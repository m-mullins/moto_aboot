    stack[2049] = arg5;
    stack[2048] = arg4;
    r2 = arg2;
    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x2c;
    if (r1 != 0x0) {
            CMP(r0, 0x0);
    }
    r4 = r2;
    stack[2032] = *0x8f7112f4;
    r10 = r1;
    r11 = stack[2048];
    r7 = stack[2049];
    stack[2033] = r11;
    stack[2034] = r0;
    stack[2037] = *0x8f7112f4;
    if (CPU_FLAGS & E) goto loc_8f670108;

loc_8f66fc80:
    r12 = stack[2032];
    if (r7 != 0x0) {
            CMP(r12, 0x0);
    }
    if (CPU_FLAGS & E) goto loc_8f670108;

loc_8f66fc90:
    r3 = zero_extend_32(r2 - 0x4);
    if (r3 > 0xfc) goto loc_8f670108;

loc_8f66fca0:
    COND = r5 != 0x0;
    if ((COND) || (r11 > 0x4)) goto loc_8f670108;

loc_8f66fcb0:
    asm{ ldrsb      r3, [r1] };
    if ((r3 >= 0x0) || (loc_ffffffff8f64af40() >= 0x0)) goto loc_8f670108;

loc_8f66fcc8:
    r8 = 0x8f70e708;
    r0 = 0x8f70e500;
    r1 = r10;
    r2 = r4;
    *(r8 + 0x4) = (s0 >> r4 / 0x4) + 0x1;
    r3 = (s0 >> r4 / 0x4) + 0x1 >> ((s0 >> r4 / 0x4) + 0x1) / 0x100;
    *r8 = r0;
    r6 = r6 >> r4 / 0x2;
    *(r8 + 0x5) = r3;
    asm{ ubfx       r3, r0, #0x8, #0x8 };
    *(r8 + 0x1) = r3;
    asm{ ubfx       r3, r0, #0x10, #0x8 };
    *(r8 + 0x2) = r3;
    *(r8 + 0x3) = r3 >> r0 / 0x1000000;
    loc_ffffffff8f670d30(r0, r1, r2, r3 >> r0 / 0x1000000);
    r2 = *(r8 + 0x1);
    r3 = *r8;
    r0 = r8;
    r3 = r3 | r2 * 0x100 | *(r8 + 0x2) * 0x10000;
    r2 = *(r8 + 0x3);
    *((r3 | r2 * 0x1000000) + r0 * 0x4) = r5;
    r3 = 0x8f70e604;
    asm{ ubfx       r2, r3, #0x8, #0x8 };
    *(r8 + 0x15) = r2;
    asm{ ubfx       r2, r3, #0x10, #0x8 };
    *(r8 + 0x16) = r2;
    *(r8 + 0x17) = r2 >> r3 / 0x1000000;
    r2 = 0x8f70dad8;
    *(r8 + 0x14) = r3;
    asm{ ubfx       r1, r2, #0x8, #0x8 };
    *(r3 + r0 * 0x4) = r5;
    *(r8 + 0x10) = r2;
    *(r8 + 0x11) = r1;
    asm{ ubfx       r1, r2, #0x10, #0x8 };
    r2 = r2 >> r2 / 0x1000000;
    *(r8 + 0x12) = r1;
    *(r8 + 0x13) = r2;
    loc_ffffffff8f67046c(r0);
    do {
            r10 = r10 + 0x2;
            r11 = 0x8f70ddf8;
            if (r5 >= r6) {
                break;
            }
            r1 = *(r10 + 0xfffffffffffffffe);
            r2 = *(r10 + 0xffffffffffffffff);
            r2 = r2 | r1 * 0x100;
            *(0x8f70ddf8 + r5 * 0x4) = r2;
            r5 = r5 + 0x1;
    } while (true);
    r1 = 0x0;
    r10 = r10 << r6 * 0x4;
    r5 = 0x8f70dff8 - 0x4;
    loc_ffffffff8f64adc8(0x8f70dffc, r1, r2 << r6 * 0x8);
    r2 = *(r11 + 0x4);
    *(r5 + 0x4) = 0x1;
    r8 = *r11;
    stack[2030] = r2;
    stack[2031] = r11 + r10;
    stack[2029] = 0x0;
    stack[2035] = r10 + 0x4;
    do {
            r11 = *(r5 + 0x4);
            r3 = *(r5 + 0x8);
            if (r11 == r8) {
                    r3 = r8 + r3;
                    r0 = 0xffff;
            }
            else {
                    r1 = r8;
                    r0 = loc_ffffffff8f67b3c0(r3 + r11 * 0x10000, r1);
                    r3 = r3 + r11 * 0x10000 - r8 * r0;
            }
            r2 = 0x0;
            lr = stack[2030] * r0;
            do {
                    r1 = r1 >> r3 / 0x10000;
                    COND = r1 == 0x0;
                    if (!COND) {
                        break;
                    }
                    r1 = *(r5 + 0xc);
                    r1 = r1 + r3 * 0x10000;
                    COND = r2 + lr < r1;
                    r2 = r2 - stack[2030];
                    if (COND) {
                        break;
                    }
                    r0 = r0 - 0x1;
                    r3 = r3 + r8;
            } while (true);
            r1 = stack[2035] + r5;
            r2 = 0x0;
            r3 = r2;
            do {
                    r2 = r2 + 0x1;
                    r1 = r1 - 0x4;
                    if (r6 - r2 == -0x1) {
                        break;
                    }
                    lr = *(stack[2031] + (0x3 ^ 0xffffffff) * r2);
                    r12 = *(r1 + 0x4);
                    r11 = zero_extend_32(r12 + 0x20000 - zero_extend_32(lr * r0) - zero_extend_32(r3));
                    r3 = r3 / 0x10000 + (lr * r0 >> lr * r0 / 0x10000) + 0x2 - (r12 + 0x20000 - zero_extend_32(lr * r0) - zero_extend_32(r3)) / 0x10000;
                    *(r1 + 0x4) = r11;
            } while (true);
            r2 = *(r5 + 0x4);
            r1 = zero_extend_32(r2 + 0x10000 - zero_extend_32(r3));
            r5 = r5 + 0x4;
            *r5 = r1;
            if (r3 / 0x10000 - (r2 + 0x10000 - zero_extend_32(r3) >> (r2 + 0x10000 - zero_extend_32(r3)) / 0x10000) != -0x1) {
                    r3 = 0x0;
                    r2 = r5 + r10;
                    r1 = r3;
                    do {
                            r3 = r3 + 0x1;
                            r2 = r2 - 0x4;
                            if (r6 - r3 == -0x1) {
                                break;
                            }
                            r1 = r1 + *(stack[2031] + (0x3 ^ 0xffffffff) * r3) + *(r2 + 0x4);
                            r0 = zero_extend_32(r1);
                            r1 = r1 >> r1 / 0x10000;
                            *(r2 + 0x4) = r0;
                    } while (true);
                    r1 = zero_extend_32(r1 + *r5);
                    *r5 = r1;
            }
            r12 = stack[2029] + 0x1;
            stack[2029] = r12;
    } while (r12 < r6);
    r1 = r1 << r6 * 0x2;
    r2 = r7;
    r10 = 0x8f70dff8 + r10;
    r3 = 0x0;
    do {
            r3 = r3 + 0x1;
            r2 = r2 + 0x2;
            if (r6 + r3 > r1) {
                break;
            }
            r0 = *(r10 + r3 * 0x4);
            *(r2 + 0xfffffffffffffffe) = r0 >> r0 / 0x100;
            *(r2 + 0xffffffffffffffff) = *(r10 + r3 * 0x4);
    } while (true);
    r2 = *(0x8f70e708 + 0x15);
    r3 = *(0x8f70e708 + 0x14);
    r0 = *(0x8f70e708 + 0x17);
    r3 = r3 | r2 * 0x100;
    r2 = *(0x8f70e708 + 0x16);
    loc_ffffffff8f670d30(r3 | r2 * 0x10000 | r0 * 0x1000000, r7, r4, r3 | r2 * 0x10000);
    loc_ffffffff8f64adc8(r7, 0x0, r4 - 0x1);
    *(0xffffffffffffffff + r7 + r4) = 0x1;
    r3 = 0x0;
    r5 = r3;
    goto loc_8f66fff4;

loc_8f66fff4:
    if (r5 >= stack[2033]) goto loc_8f6700cc;

loc_8f670000:
    r8 = 0x8;
    r10 = *(stack[2032] + r5);
    goto loc_8f67000c;

loc_8f67000c:
    r12 = sign_extend_32(r10);
    if (r3 == 0x0) goto loc_8f670050;

loc_8f670018:
    loc_ffffffff8f6704b8(0x8f70e708, 0x8f70dcf4, 0x8f70dcf4);
    if (r12 < 0x0) {
            loc_ffffffff8f670a80(0x8f70e708, 0x8f70dcf4, 0x8f70dcf4, 0x8f70e3fc);
    }
    goto loc_8f6700b0;

loc_8f6700b0:
    r3 = 0x1;
    goto loc_8f6700b4;

loc_8f6700b4:
    r8 = r8 - 0x1;
    COND = r8 != 0x0;
    r10 = zero_extend_32(r10 << r10 * 0x2);
    if (COND) goto loc_8f67000c;

loc_8f6700c4:
    r5 = r5 + 0x1;
    goto loc_8f66fff4;

loc_8f670050:
    if (r12 >= 0x0) goto loc_8f6700b4;

loc_8f670058:
    r0 = loc_ffffffff8f670d30(0x8f70e3fc, stack[2034], r4);
    r2 = *(0x8f70e708 + 0x15);
    r12 = *(0x8f70e708 + 0x17);
    *(0x8f70e3fc + r0 * 0x4) = r3;
    loc_ffffffff8f670a80(0x8f70e708, 0x8f70dcf4, 0x8f70e3fc, *(0x8f70e708 + 0x14) | r2 * 0x100 | *(0x8f70e708 + 0x16) * 0x10000 | r12 * 0x1000000);
    loc_ffffffff8f670e24(0x8f70e708, 0x8f70e3fc, 0x8f70dcf4);
    goto loc_8f6700b0;

loc_8f6700cc:
    if (r3 != 0x0) {
            loc_ffffffff8f670860(0x8f70e708, 0x8f70dcf4, 0x8f70dcf4);
            r2 = *(0x8f70e708 + 0x5);
            r3 = *(0x8f70e708 + 0x4);
            loc_ffffffff8f670dbc(r7, 0x8f70dcf4, (r3 | r2 * 0x100) - 0x1, r3);
    }
    r0 = 0xf0;
    goto loc_8f670114;

loc_8f670114:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f670108:
    r0 = 0x39;
    goto loc_8f670114;

