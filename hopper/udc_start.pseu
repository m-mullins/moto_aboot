    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r3 = *0x8f7112f4;
    stack[2041] = r3;
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "udc_start()\n", arg2, r3, arg0, stack[2041], r4, 0x8f6b794c, r6, 0x8f7112f4, r8, lr);
    if ((!CPU_FLAGS & E) && (*0x8f6b792c != 0x0)) {
            r5 = 0x8f6b794c;
            r0 = loc_ffffffff8f604d60(0x1, 0x0, 0x12);
            r1 = *r5;
            r4 = r0;
            *(r0 + 0xa) = 0x0;
            *(r0 + 0xc) = 0x0;
            *(0xfffffffffffffffd + r0 + 0x10) = 0x0;
            *(0xfffffffffffffffe + r0 + 0x10) = 0x0;
            *(0xfffffffffffffffb + r0 + 0x10) = 0x2;
            *(0xffffffffffffffff + r0 + 0x10) = 0x40;
            loc_ffffffff8f64ac90(r0 + 0x10, r1, 0x2, 0x40);
            loc_ffffffff8f64ac90(r4 + 0x12, *r5 + 0x2, 0x2);
            loc_ffffffff8f64ac90(r4 + 0x14, *r5 + 0x4, 0x2);
            r0 = *(*r5 + 0x8);
            r0 = loc_ffffffff8f604e34(r0);
            r3 = *r5;
            *(r4 + 0x16) = r0;
            r0 = *(r3 + 0xc);
            r0 = loc_ffffffff8f604e34(r0);
            r3 = *r5;
            *(r4 + 0x17) = r0;
            r0 = *(r3 + 0x10);
            r0 = loc_ffffffff8f604e34(r0);
            *(r4 + 0x19) = 0x1;
            *(r4 + 0x18) = r0;
            loc_ffffffff8f604df0(r4);
            r3 = *0x8f6b792c;
            r1 = *(r3 + 0x14);
            if (r1 != 0x0) {
                    r5 = *r1;
            }
            if (CPU_FLAGS & E) {
                    r5 = 0x9;
            }
            if (CPU_FLAGS & NE) {
                    r5 = r5 + 0x9;
            }
            r8 = 0x8f6b792c;
            asm{ smlabb     r5, r2, r3, r5 };
            r0 = loc_ffffffff8f604d60();
            *(r0 + 0xa) = r5 + 0x9;
            *(r0 + 0xb) = r5 + 0x9 >> (r5 + 0x9) / 0x100;
            r4 = r0;
            r5 = *r8;
            *(r0 + 0x8) = 0x9;
            *(r0 + 0xc) = 0x1;
            *(r0 + 0xd) = 0x1;
            *(r0 + 0xf) = 0x7f ^ 0xffffffff;
            *(r0 + 0x11) = 0x9;
            *(r0 + 0xe) = 0x0;
            *(r0 + 0x12) = 0x4;
            *(r0 + 0x10) = 0x5 ^ 0xffffffff;
            *(r0 + 0x13) = 0x0;
            *(r0 + 0x14) = 0x0;
            *(r0 + 0x15) = *(r5 + 0xb);
            *(r0 + 0x16) = *(r5 + 0x8);
            *(r0 + 0x17) = *(r5 + 0x9);
            r3 = *(r5 + 0xa);
            *(r0 + 0x18) = r3;
            r0 = *(r5 + 0xc);
            r0 = loc_ffffffff8f604e34(r0, 0x5 ^ 0xffffffff, 0x4, r3);
            r3 = r4 + 0x1a;
            *(r4 + 0x19) = r0;
            r2 = *(r5 + 0x14);
            if (r2 != 0x0) {
                    r2 = r3;
            }
            if (!CPU_FLAGS & E) {
                    do {
                            r0 = *(r5 + 0x14);
                            r1 = r2 - r3;
                            if (r1 < *r0) {
                                    r1 = *(r0 + r1);
                            }
                            if (CPU_FLAGS & S) {
                                    *r2 = r1;
                                    r2 = r2 + 0x1;
                            }
                    } while (CPU_FLAGS & B);
                    r3 = r2;
            }
            r1 = 0x0;
            while (r1 < *(r5 + 0xb)) {
                    r2 = *(r5 + 0x18);
                    r2 = *(r2 + r1 * 0x4);
                    *r3 = 0x7;
                    *(r3 + 0x1) = 0x5;
                    lr = *(r2 + 0x11);
                    r6 = *(r2 + 0x10);
                    if (lr != 0x0) {
                            lr = 0x80;
                    }
                    if (CPU_FLAGS & E) {
                            lr = 0x0;
                    }
                    *(r3 + 0x2) = lr | r6;
                    lr = *(r2 + 0x12);
                    if (lr == 0x0) {
                            lr = 0x2;
                    }
                    if (CPU_FLAGS & NE) {
                            lr = 0x3;
                    }
                    *(r3 + 0x3) = lr;
                    *(r3 + 0x4) = *(r2 + 0x14);
                    lr = *(r2 + 0x14);
                    *(r3 + 0x5) = lr >> lr / 0x100;
                    if (*(r2 + 0x12) != 0x0) {
                            r2 = 0x1;
                    }
                    if (!CPU_FLAGS & NE) {
                            r2 = *(r2 + 0x11);
                            r2 = 0x1 - r2;
                            COND = r2 < 0x0;
                            if (COND) {
                                    r2 = 0x0;
                            }
                    }
                    *(r3 + 0x6) = r2;
                    r1 = r1 + 0x1;
                    r3 = r3 + 0x7;
            }
            loc_ffffffff8f604df0(r4);
            loc_ffffffff8f60cae0(0xa6, 0x8f60569c, 0x0);
            *(0x78d9000 + 0x148) = 0x145;
            loc_ffffffff8f60caac(0xa6);
            loc_ffffffff8f60c558(0x258);
            r0 = 0x0;
            *(0x78d9000 + 0x140) = *(0x78d9000 + 0x140) | 0x80000 | 0x1;
    }
    else {
            loc_ffffffff8f656968();
            r0 = 0x0 ^ 0xffffffff;
    }
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

