    r1 = arg1;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x7c;
    r3 = *0x8f7112f4;
    r5 = arg0 + 0xc;
    r4 = arg0;
    r10 = r1;
    s0 = *(arg0 + 0x8);
    stack[2037] = r3;
    r3 = 0x8f6a4258;
    asm{ ldm        r5, {r5, r7, r8} };
    r3 = *r3;
    if (r3 != 0x0) {
            if ((r1 & 0x3) != 0x0) {
                    loc_ffffffff8f64ac90(sp + 0x34);
                    r10 = sp + 0x34;
            }
    }
    else {
            do {
                    r1 = sp + 0x34;
                    *(r3 + r1) = *(0x3 + r10 + r3) * 0x1000000 + *(0x2 + r10 + r3) * 0x10000 + *(r10 + r3) + *(0x1 + r10 + r3) * 0x100;
                    r3 = r3 + 0x4;
            } while (r3 != 0x40);
            r10 = r1;
    }
    r6 = *r10;
    r3 = r6 + (r8 & !r5 | r7 & r5) + s0 + 0xd76aa478;
    r0 = *(r10 + 0x4);
    r12 = r8 + 0xe8c7b756;
    r8 = *(r10 + 0x14);
    stack[2008] = r0;
    r1 = *(r10 + 0x8);
    r12 = (ROR((r7 & !(r5 + (ROR(r3, 0x19))) | r5 + (ROR(r3, 0x19)) & r5) + r12 + r0, 0x14)) + r5 + (ROR(r3, 0x19));
    s0 = *(r10 + 0x18);
    stack[2009] = r1;
    r0 = r1 + r7 + 0x242070db;
    r7 = *(r10 + 0x10);
    r11 = *(r10 + 0x1c);
    stack[2011] = r7;
    r0 = r12 + (ROR(r0 + (r5 & !r12 | r12 & r5 + (ROR(r3, 0x19))), 0xf));
    stack[2012] = r8;
    stack[2010] = *(r10 + 0xc);
    stack[2013] = s0;
    r2 = r0 + (ROR((r5 + (ROR(r3, 0x19)) & !r0 | r0 & r12) + stack[2010] + r5 + 0xc1bdceee, 0xa));
    r3 = r7 + 0xf57c0faf + r5 + (ROR(r3, 0x19));
    r7 = *(r10 + 0x24);
    r1 = r8 + 0x4787c62a;
    r8 = *(r10 + 0x28);
    r3 = r2 + (ROR(r3 + (r12 & !r2 | r2 & r0), 0x19));
    stack[2017] = r8;
    stack[2016] = r7;
    r1 = r3 + (ROR((r0 & !r3 | r3 & r2) + r1 + r12, 0x14));
    stack[2018] = *(r10 + 0x2c);
    r12 = r1 + (ROR((r2 & !r1 | r1 & r3) + r0 + s0 + 0xa8304613, 0xf));
    r0 = (r3 & !r12 | r12 & r1) + r2 + r11 + 0xfd469501;
    stack[2015] = *(r10 + 0x20);
    r2 = (ROR((r1 & !(r12 + (ROR(r0, 0xa))) | r12 + (ROR(r0, 0xa)) & r12) + r3 + stack[2015] + 0x698098d8, 0x19)) + r12 + (ROR(r0, 0xa));
    r3 = r2 + (ROR((r12 & !r2 | r2 & r12 + (ROR(r0, 0xa))) + r1 + r7 + 0x8b44f7af, 0x14));
    r1 = r12 + (ROR(r0, 0xa)) & !r3 | r3 & r2;
    r0 = stack[2018] + 0x895cd7be + r12 + (ROR(r0, 0xa));
    r1 = r3 + (ROR(r1 + (r8 - 0xa400 - 0x4f) + r12, 0xf));
    r12 = *(r10 + 0x30);
    s0 = r1 + (ROR(r0 + (r2 & !r1 | r1 & r3), 0xa));
    r0 = s0 + (ROR((r3 & !s0 | s0 & r1) + r2 + r12 + 0x6b901122, 0x19));
    stack[2019] = *(r10 + 0x34);
    r5 = *(r10 + 0x38);
    r2 = r0 + (ROR((r1 & !r0 | r0 & s0) + r3 + stack[2019] + 0xfd987193, 0x14));
    r3 = ((r2 ^ 0xffffffff) & s0 | r2 & r0) + r1 + r5 + 0xa679438e;
    r1 = *(r10 + 0x3c);
    r3 = r2 + (ROR(r3, 0xf));
    s0 = r3 + (ROR(((r3 ^ 0xffffffff) & r0 | r3 & r2) + s0 + r1 + 0x49b40821, 0xa));
    r0 = s0 + (ROR((s0 & r2 | r3 & (r2 ^ 0xffffffff)) + r0 + stack[2008] + 0xf61e2562, 0x1b));
    r2 = r0 + (ROR((r0 & r3 | s0 & (r3 ^ 0xffffffff)) + r2 + stack[2013] + 0xc040b340, 0x17));
    r3 = r2 + (ROR((r2 & s0 | r0 & !s0) + r3 + stack[2018] + 0x265e5a51, 0x12));
    s0 = r3 + (ROR((r3 & r0 | r2 & !r0) + s0 + r6 + 0xe9b6c7aa, 0xc));
    r8 = s0 + (ROR((s0 & r2 | r3 & !r2) + r0 + stack[2012] + 0xd62f105d, 0x1b));
    r0 = r8 + (ROR((r8 & r3 | s0 & !r3) + r2 + stack[2017] + 0x2441453, 0x17));
    r7 = r0 + (ROR((r0 & s0 | r8 & !s0) + r3 + r1 + 0xd8a1e681, 0x12));
    s0 = r7 + (ROR((r7 & r8 | r0 & !r8) + s0 + stack[2011] + 0xe7d3fbc8, 0xc));
    r3 = s0 + (ROR((s0 & r0 | r7 & !r0) + r8 + stack[2016] + 0x21e1cde6, 0x1b));
    r0 = r3 + (ROR((r3 & r7 | s0 & !r7) + r0 + r5 + 0xc33707d6, 0x17));
    r7 = r0 + (ROR((r0 & s0 | r3 & !s0) + r7 + stack[2010] + 0xf4d50d87, 0x12));
    r2 = r7 + (ROR((r7 & r3 | r0 & !r3) + s0 + stack[2015] + 0x455a14ed, 0xc));
    r3 = r2 + (ROR((r2 & r0 | r7 & !r0) + r3 + stack[2019] + 0xa9e3e905, 0x1b));
    r0 = r3 + (ROR((r3 & r7 | r2 & !r7) + r0 + stack[2009] + 0xfcefa3f8, 0x17));
    r7 = r0 + (ROR((r0 & r2 | r3 & !r2) + r7 + r11 + 0x676f02d9, 0x12));
    r2 = r7 + (ROR((r7 & r3 | r0 & !r3) + r2 + r12 + 0x8d2a4c8a, 0xc));
    r10 = r2 + (ROR((r7 ^ r0 ^ r2) + r3 + stack[2012] + 0xfffa3942, 0x1c));
    r0 = r10 + (ROR((r2 ^ r7 ^ r10) + r0 + stack[2015] + 0x8771f681, 0x15));
    r7 = r0 + (ROR((r10 ^ r2 ^ r0) + r7 + stack[2018] + 0x6d9d6122, 0x10));
    r2 = r7 + (ROR((r0 ^ r10 ^ r7) + r2 + r5 + 0xfde5380c, 0x9));
    r10 = r2 + (ROR((r7 ^ r0 ^ r2) + r10 + stack[2008] + 0xa4beea44, 0x1c));
    r0 = r10 + (ROR((r2 ^ r7 ^ r10) + r0 + stack[2011] + 0x4bdecfa9, 0x15));
    r3 = r0 + (ROR((r10 ^ r2 ^ r0) + r7 + r11 + 0xf6bb4b60, 0x10));
    r7 = r3 + (ROR((r0 ^ r10 ^ r3) + r2 + stack[2017] + 0xbebfbc70, 0x9));
    r10 = r7 + (ROR((r3 ^ r0 ^ r7) + r10 + stack[2019] + 0x289b7ec6, 0x1c));
    r0 = r10 + (ROR((r7 ^ r3 ^ r10) + r0 + r6 + 0xeaa127fa, 0x15));
    r8 = r0 + (ROR((r10 ^ r7 ^ r0) + r3 + stack[2010] + 0xd4ef3085, 0x10));
    r7 = r8 + (ROR((r0 ^ r10 ^ r8) + r7 + stack[2013] + 0x4881d05, 0x9));
    r2 = r7 + (ROR((r8 ^ r0 ^ r7) + r10 + stack[2016] + 0xd9d4d039, 0x1c));
    r0 = r2 + (ROR((r7 ^ r8 ^ r2) + r0 + r12 + 0xe6db99e5, 0x15));
    r8 = r0 + (ROR((r2 ^ r7 ^ r0) + r8 + r1 + 0x1fa27cf8, 0x10));
    r3 = r8 + (ROR((r0 ^ r2 ^ r8) + r7 + stack[2009] + 0xc4ac5665, 0x9));
    r2 = r3 + (ROR(((r3 | r0 ^ 0xffffffff) ^ r8) + r2 + r6 + 0xf4292244, 0x1a));
    r0 = r2 + (ROR(((r2 | r8 ^ 0xffffffff) ^ r3) + r0 + r11 + 0x432aff97, 0x16));
    r8 = r0 + (ROR(((r0 | r3 ^ 0xffffffff) ^ r2) + r8 + r5 + 0xab9423a7, 0x11));
    r3 = r8 + (ROR(((r8 | r2 ^ 0xffffffff) ^ r0) + r3 + stack[2012] + 0xfc93a039, 0xb));
    r2 = r3 + (ROR(((r3 | r0 ^ 0xffffffff) ^ r8) + r2 + r12 + 0x655b59c3, 0x1a));
    r0 = r2 + (ROR(((r2 | r8 ^ 0xffffffff) ^ r3) + r0 + stack[2010] + 0x8f0ccc92, 0x16));
    r8 = r0 + (ROR(((r0 | r3 ^ 0xffffffff) ^ r2) + r8 + stack[2017] + 0xffeff47d, 0x11));
    r3 = r8 + (ROR(((r8 | r2 ^ 0xffffffff) ^ r0) + r3 + stack[2008] + 0x85845dd1, 0xb));
    r2 = r3 + (ROR(((r3 | r0 ^ 0xffffffff) ^ r8) + r2 + stack[2015] + 0x6fa87e4f, 0x1a));
    r0 = r2 + (ROR(((r2 | r8 ^ 0xffffffff) ^ r3) + r0 + r1 + 0xfe2ce6e0, 0x16));
    r8 = r0 + (ROR(((r0 | r3 ^ 0xffffffff) ^ r2) + r8 + stack[2013] + 0xa3014314, 0x11));
    r3 = r8 + (ROR(((r8 | r2 ^ 0xffffffff) ^ r0) + r3 + stack[2019] + 0x4e0811a1, 0xb));
    r2 = r3 + (ROR(((r3 | r0 ^ 0xffffffff) ^ r8) + r2 + stack[2011] + 0xf7537e82, 0x1a));
    r0 = r2 + (ROR(((r2 | r8 ^ 0xffffffff) ^ r3) + r0 + stack[2018] + 0xbd3af235, 0x16));
    *(r4 + 0x8) = *(r4 + 0x8) + r2;
    *(r4 + 0xc) = (ROR(((r0 + (ROR(((r0 | r3 ^ 0xffffffff) ^ r2) + r8 + stack[2009] + 0x2ad7d2bb, 0x11)) | r2 ^ 0xffffffff) ^ r0) + r3 + stack[2016] + 0xeb86d391, 0xb)) + *(r4 + 0xc) + r0 + (ROR(((r0 | r3 ^ 0xffffffff) ^ r2) + r8 + stack[2009] + 0x2ad7d2bb, 0x11));
    r8 = *(r4 + 0x10) + r0 + (ROR(((r0 | r3 ^ 0xffffffff) ^ r2) + r8 + stack[2009] + 0x2ad7d2bb, 0x11));
    r3 = *(r4 + 0x14);
    *(r4 + 0x10) = r8;
    r0 = r3 + r0;
    *(r4 + 0x14) = r0;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

