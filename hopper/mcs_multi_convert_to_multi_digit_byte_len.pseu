    stack[2040] = arg0;
    stack[2042] = r4;
    stack[2044] = r6;
    stack[2045] = r7;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r7 = arg0;
    r6 = arg1;
    r4 = zero_extend_32(0x2 - (arg2 & 0x1));
    r3 = *0x8f7112f4;
    stack[2041] = r3;
    loc_ffffffff8f6673b4(sp, 0x2, arg2, r3, stack[2040], stack[2041], stack[2042], r5, stack[2044], stack[2045], 0x8f7112f4, lr);
    r3 = sp + 0x0;
    r2 = r4;
    r5 = arg2 + 0x1 >> (arg2 + 0x1) / 0x2;
    loc_ffffffff8f667258(r3 + (0x2 - r4), r7, r2, r3);
    if (r5 != 0x0) {
            r3 = stack[2041];
    }
    if (CPU_FLAGS & NE) {
            r2 = stack[2040];
    }
    if (CPU_FLAGS & NE) {
            r3 = r3 | r2 * 0x100;
    }
    if (CPU_FLAGS & NE) {
            *r6 = r3;
    }
    loc_ffffffff8f6673b4();
    r0 = r7 + r4;
    r3 = 0x1;
    do {
            r0 = r0 + 0x2;
            if (r3 >= r5) {
                break;
            }
            r3 = r3 + 0x1;
            r6 = r6 + 0x4;
            *r6 = *(r0 + 0xffffffffffffffff) | *(r0 + 0xfffffffffffffffe) * 0x100;
    } while (true);
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

