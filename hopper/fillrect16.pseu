    r3 = arg3;
    r1 = arg1;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r7 = r7 << r3 * 0x2;
    r12 = arg5;
    r6 = arg4;
    stack[2041] = *0x8f7112f4;
    r5 = *(arg0 + 0x18);
    r0 = *arg0;
    r2 = r1 + r5 * arg2;
    asm{ ubfx       r1, ip, #0x3, #0x5 };
    r5 = r5 - r3 << (r5 - r3) * 0x2;
    r2 = r0 + r2 * 0x2;
    r0 = r0 >> r12 / 0x80000;
    asm{ ubfx       ip, ip, #0xa, #0x6 };
    r12 = r1 | r0 * 0x800 | r12 * 0x20;
    r1 = 0x0;
    r12 = zero_extend_32(r12);
    while (r1 != r6) {
            r0 = 0x0;
            do {
                    if (r0 != r3) {
                            r8 = r8 << r0 * 0x2;
                    }
                    if (CPU_FLAGS & NE) {
                            r0 = r0 + 0x1;
                    }
                    if (CPU_FLAGS & NE) {
                            *(r2 + r8) = r12;
                    }
            } while (CPU_FLAGS & NE);
            r1 = r1 + 0x1;
            r2 = r5 + r2 + r7;
    }
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

