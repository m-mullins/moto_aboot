    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0xd0;
    r3 = *0x8f7112f4;
    stack[2039] = r3;
    loc_ffffffff8f61afc0(0x8f6e0a28, arg1, arg2, r3, stack[1988], stack[1989], stack[1990], stack[1991], stack[1992], stack[1993], stack[1994], stack[1995], stack[1996]);
    r4 = *0x8f6e0a44;
    *0x8f6e0a44 = 0x0;
    loc_ffffffff8f61b098(0x8f6e0a28);
    if (r4 < 0x0) {
            loc_ffffffff8f64de10(0x0);
            loc_ffffffff8f64f108();
    }
    if ((*0x8f6e0a44 & 0x800) != 0x0) {
            loc_ffffffff8f63d06c(0x0);
            loc_ffffffff8f64f890();
    }
    if ((*0x8f6e0a44 & 0x8000) == 0x0) goto loc_8f63e1b0;

loc_8f63e138:
    if (*0x8f6e0a00 == 0x0) goto loc_8f63e240;

loc_8f63e148:
    r0 = loc_ffffffff8f633874();
    if (r0 == 0x0) goto loc_8f63ec28;

loc_8f63e154:
    if (*(*(r0 + 0x1f8) + 0x18) == 0x0) {
            r7 = *(0x8f712580 + 0xc);
            r0 = loc_ffffffff8f64f2c4();
            r2 = *(0x8f712580 + 0xc);
            r3 = *(0x8f712580 + 0x10);
            r3 = r2 + r3;
            r2 = *(0x8f712580 + 0x4);
            r8 = r0;
    }
    else {
            r0 = loc_ffffffff8f64f330();
            r0 = r0 - *(0x8f712580 + 0xc);
            r7 = r0 - *(0x8f712580 + 0x10);
            r8 = loc_ffffffff8f64f2c4(r0);
            r0 = loc_ffffffff8f64f330();
            r3 = *(0x8f712580 + 0x4);
    }
    goto loc_8f63e22c;

loc_8f63e22c:
    loc_ffffffff8f64f9c4(0x0, r7, r8);
    goto loc_8f63e240;

loc_8f63e240:
    if ((*0x8f6e0a44 & 0x1) != 0x0) {
            loc_ffffffff8f64adc8(sp + 0x4c, 0x0, 0x80);
            loc_ffffffff8f64b21c(sp + 0x4c, "AP Fastboot Flash Mode", 0x80);
            loc_ffffffff8f64b21c(sp + 0x4c, 0x8f69c770, 0x80);
            loc_ffffffff8f64b21c();
            loc_ffffffff8f64b21c(sp + 0x4c, 0x8f687c45, 0x80);
            loc_ffffffff8f63d06c(0x0);
            loc_ffffffff8f64f890();
            r0 = loc_ffffffff8f63d06c(0x0);
            loc_ffffffff8f64f730(sp + 0x4c, r0, 0x0, 0xff);
    }
    if (*0x8f6e0a09 == 0x0) {
            if ((*0x8f6e0a44 & 0x2) != 0x0) {
                    loc_ffffffff8f63d0ac();
            }
            if ((*0x8f6e0a44 & 0x4) != 0x0) {
                    loc_ffffffff8f64adc8(sp + 0x4c, 0x0, 0x40);
                    r0 = loc_ffffffff8f600d34();
                    loc_ffffffff8f64a9f0(sp + 0x4c, 0x40, "CPU: %s", r0);
                    loc_ffffffff8f63d06c(0x5);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0x5);
                    loc_ffffffff8f64f730(sp + 0x4c, r0, 0x0, 0xff000000 ^ 0xffffffff);
            }
            if ((*0x8f6e0a44 & 0x8) != 0x0) {
                    loc_ffffffff8f64adc8(sp + 0x4c, 0x0, 0x40);
                    r3 = *0x8f7125ec;
                    loc_ffffffff8f64a9f0(sp + 0x4c, 0x40, "eMMC: %uGB %s RV=%02X PV=%02X TY=%02X", *(r3 + 0x28), *(r3 + 0x18), *(r3 + 0x36), *(r3 + 0x35), *(r3 + 0x37));
                    loc_ffffffff8f63d06c(0x6);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0x6);
                    loc_ffffffff8f64f730(sp + 0x4c, r0, 0x0, 0xff000000 ^ 0xffffffff);
            }
            if ((*0x8f6e0a44 & 0x10) != 0x0) {
                    loc_ffffffff8f64adc8(sp + 0x4c, 0x0, 0x40);
                    loc_ffffffff8f64a9f0(sp + 0x4c, 0x40, "DRAM: %s", 0x8f711464);
                    loc_ffffffff8f63d06c(0x7);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0x7);
                    loc_ffffffff8f64f730(sp + 0x4c, r0, 0x0, 0xff000000 ^ 0xffffffff);
            }
            if ((*0x8f6e0a44 & 0x20) != 0x0) {
                    r5 = zero_extend_32(loc_ffffffff8f674ac8());
                    if (loc_ffffffff8f674b74() == 0x0) {
                            if (r5 == 0x0) {
                                    r5 = 0xff000000 ^ 0xffffffff;
                                    r7 = 0x8f69c64f;
                            }
                            else {
                                    if (r5 != 0x1) {
                                            if (r5 != 0x2) {
                                                    r3 = "Device is UNLOCKED.  Status Code: 3";
                                                    r7 = 0x8f69c64f;
                                                    r5 = 0xffff;
                                                    if (0xffff != 0x3) {
                                                            r5 = 0xff000000 ^ 0xffffffff;
                                                    }
                                                    if (CPU_FLAGS & E) {
                                                            r7 = r3;
                                                    }
                                            }
                                            else {
                                                    r7 = "Device is LOCKED.  Status Code: 2";
                                                    r5 = 0xff000000 ^ 0xffffffff;
                                            }
                                    }
                                    else {
                                            r5 = 0xffff;
                                            r7 = "Device is ENGINEERING.";
                                    }
                            }
                    }
                    else {
                            if (loc_ffffffff8f674cc4() == 0x6) {
                                    r5 = 0xff00;
                                    r7 = "Device is VERIFIED.";
                            }
                            else {
                                    if (r5 == 0x0) {
                                            r5 = 0xff000000 ^ 0xffffffff;
                                            r7 = 0x8f69c64f;
                                    }
                                    else {
                                            if (r5 != 0x1) {
                                                    if (r5 != 0x2) {
                                                            r3 = "Device is UNLOCKED.  Status Code: 3";
                                                            r7 = 0x8f69c64f;
                                                            r5 = 0xffff;
                                                            if (0xffff != 0x3) {
                                                                    r5 = 0xff000000 ^ 0xffffffff;
                                                            }
                                                            if (CPU_FLAGS & E) {
                                                                    r7 = r3;
                                                            }
                                                    }
                                                    else {
                                                            r7 = "Device is LOCKED.  Status Code: 2";
                                                            r5 = 0xff000000 ^ 0xffffffff;
                                                    }
                                            }
                                            else {
                                                    r5 = 0xffff;
                                                    r7 = "Device is ENGINEERING.";
                                            }
                                    }
                            }
                    }
                    loc_ffffffff8f63d06c(0xa);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0xa);
                    loc_ffffffff8f64f730(r7, r0, 0x0, r5);
            }
            if ((loc_ffffffff8f63284c() != 0x1) && ((*0x8f6e0a44 & 0x40) != 0x0)) {
                    loc_ffffffff8f64adc8(sp + 0x4c, 0x0, 0x21);
                    loc_ffffffff8f64adc8(sp + 0x2c, 0x0, 0x20);
                    r0 = loc_ffffffff8f62d21c();
                    loc_ffffffff8f64b2c0(sp + 0x4c, r0, 0x21);
                    r0 = loc_ffffffff8f64b7f0(sp + 0x4c, 0x8f686fbc);
                    COND = r5 != 0x0;
                    if (!COND) {
                            r5 = 0x1;
                    }
                    else {
                            r0 = loc_ffffffff8f64b354();
                            if ((r0 != 0x0) && (*(0xffffffffffffffff + r5 + r0) == 0x30)) {
                                    r5 = 0x0;
                            }
                            else {
                                    r5 = 0x1;
                            }
                    }
                    loc_ffffffff8f64a9f0(sp + 0x2c, 0x20, "Software status: %s");
                    loc_ffffffff8f63d06c(0xb);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0xb);
                    loc_ffffffff8f64f730(sp + 0x2c, r0);
            }
            if ((*0x8f6e0a44 & 0x80) != 0x0) {
                    r7 = "Battery Low";
                    r5 = *0x8f6e0a08;
                    loc_ffffffff8f64adc8(sp + 0x4c, 0x0, 0x40, 0x8f6e0a08);
                    if (r5 == 0x0) {
                            r7 = 0x8f69c6ed;
                    }
                    r0 = loc_ffffffff8f646cd0();
                    r3 = " (Charging)";
                    if (r0 == 0x0) {
                            r0 = 0x8f6a4e20;
                    }
                    if (CPU_FLAGS & NE) {
                            r0 = r3;
                    }
                    r5 = *0x8f6e0a08;
                    loc_ffffffff8f64a9f0(sp + 0x4c);
                    loc_ffffffff8f63d06c(0x9);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0x9);
                    loc_ffffffff8f64f730(sp + 0x4c, r0);
            }
            if ((*0x8f6e0a44 & 0x100) != 0x0) {
                    if (*0x8f6aca1c != 0x0) {
                            r2 = "Connect USB Data Cable   ";
                            r5 = "Charger Connected";
                            if (*0x8f6aca1c != 0x2) {
                                    r5 = r2;
                            }
                    }
                    else {
                            r5 = "Transfer Mode: USB Connected";
                    }
                    loc_ffffffff8f63d06c(0xc);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0xc);
                    loc_ffffffff8f64f730(r5, r0, 0x0, 0xff000000 ^ 0xffffffff);
            }
            if ((*0x8f6e0a44 & 0x200) != 0x0) {
                    loc_ffffffff8f64adc8(sp + 0x4c, 0x0, 0x40);
                    r3 = *0x8f6aca74;
                    if (CPU_FLAGS & E) {
                            r3 = *(0x8f6e0a58 + 0x8);
                    }
                    if ((!CPU_FLAGS & E) && (CPU_FLAGS & E)) {
                            r3 = *0x8f6e0a58;
                    }
                    loc_ffffffff8f64a9f0();
                    r3 = *0x8f6aca74;
                    loc_ffffffff8f656968(0x1, "Kernel console : %s.\n", *(0x8f6e0a58 + r3 * 0x4), r3);
                    loc_ffffffff8f63d06c(0x8);
                    loc_ffffffff8f64f890();
                    r0 = loc_ffffffff8f63d06c(0x8);
                    loc_ffffffff8f64f730(sp + 0x4c, r0, 0x0, 0xff000000 ^ 0xffffffff);
            }
    }
    else {
            if ((*0x8f6e0a44 & 0x4000) != 0x0) {
                    r7 = sp + 0x4c;
                    r1 = 0x0;
                    loc_ffffffff8f64adc8(r7, r1, 0x64);
                    r5 = loc_ffffffff8f63d06c(0x0) - 0xc;
                    asm{ ldm        lr!, {r0, r1, r2, r3} };
                    asm{ stm        ip!, {r0, r1, r2, r3} };
                    asm{ ldm        lr, {r0, r1, r2} };
                    asm{ stm        ip, {r0, r1, r2} };
                    r10 = loc_ffffffff8f64f2c4();
                    s0 = loc_ffffffff8f648ad4();
                    r0 = loc_ffffffff8f64b354(stack[1995]);
                    r1 = r1 << s0 * 0x2;
                    r8 = r0;
                    r0 = r10 - s0 * r0;
                    r0 = loc_ffffffff8f67b488(r0 - 0x5a, r1);
                    if (r0 < 0x0) {
                            r0 = 0x0;
                    }
                    if (!CPU_FLAGS & L) {
                            r8 = 0x63 - r8;
                            if (r0 >= r8) {
                                    r0 = r8;
                            }
                    }
                    r3 = 0x0;
                    do {
                            if (r3 < r0) {
                                    *(r7 + r3) = 0x20;
                            }
                            if (CPU_FLAGS & L) {
                                    r3 = r3 + 0x1;
                            }
                    } while (CPU_FLAGS & L);
                    r10 = r7 + r0;
                    r8 = 0x0;
                    do {
                            loc_ffffffff8f64a9f0(r10, 0x63, *(loc_ffffffff8f64f890(r5, 0x1, 0x1) + r8));
                            r8 = r8 + 0x4;
                            loc_ffffffff8f64f730(r7, r5, 0x0, 0xff);
                            r5 = r5 + 0x1;
                    } while (r8 != 0x1c);
            }
            if ((*0x8f6e0a44 & 0x400) != 0x0) {
                    r5 = loc_ffffffff8f63d06c(0x1);
                    r0 = loc_ffffffff8f656854(0x2);
                    COND = r8 == 0x0;
                    if (!COND) {
                            r3 = *(r8 + 0x8);
                            r7 = (r3)();
                            while ((r7 != 0x0) && (r5 < loc_ffffffff8f64feb8())) {
                                    loc_ffffffff8f64f890(r5, 0x1, 0x1);
                                    r0 = *(r7 + 0x4);
                                    if (r0 != 0x0) {
                                            asm{ ldrsb      r3, [r7] };
                                            loc_ffffffff8f64f730();
                                    }
                                    r3 = *(r8 + 0xc);
                                    r5 = r5 + 0x1;
                                    r7 = (r3)();
                            }
                    }
            }
    }
    if (((*0x8f6e0a44 & 0x10000) != 0x0) && (*0x8f6e0a00 != 0x0)) {
            r0 = "droid_operation";
            asm{ ldm        r3, {r1, r2} };
            loc_ffffffff8f63dc10(r0);
    }
    if (((*0x8f6e0a44 & 0x20000) != 0x0) && (*0x8f6e0a00 != 0x0)) {
            loc_ffffffff8f63dc10("arrows", *(0x8f712580 + 0x14), *(0x8f712580 + 0x18), 0x0);
    }
    if ((((*0x8f6e0a44 & 0x40000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("start", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330("Start", 0xff00);
    }
    if ((((*0x8f6e0a44 & 0x80000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("restartbootloader", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330("Restart bootloader", 0xff);
    }
    if ((((*0x8f6e0a44 & 0x100000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("recoverymode", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330("Recovery mode", 0xff);
    }
    if ((((*0x8f6e0a44 & 0x200000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("poweroff", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330("Power off", 0xff000000 ^ 0xffffffff);
    }
    if ((((*0x8f6e0a44 & 0x400000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("wififlash", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330(0x8f69ceb2, 0xff);
    }
    if ((((*0x8f6e0a44 & 0x800000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("factory", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330("Factory", 0xff);
    }
    if ((((*0x8f6e0a44 & 0x1000000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("switchconsole", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330(0x8f69ced3, 0xff000000 ^ 0xffffffff);
    }
    if ((((*0x8f6e0a44 & 0x2000000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("barcodes", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330("Barcodes", 0xff000000 ^ 0xffffffff);
    }
    if ((((*0x8f6e0a44 & 0x4000000) != 0x0) && (*0x8f6e0a00 != 0x0)) && (loc_ffffffff8f63dc10("bptools", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0)) {
            loc_ffffffff8f63d330("BP tools", 0xff);
    }
    if ((*0x8f6e0a44 & 0x8000000) != 0x0) {
            if (*0x8f6e0a00 != 0x0) {
                    if (loc_ffffffff8f63dc10(0x8f6884dc, *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0) {
                            loc_ffffffff8f63d330(0x8f69cf05, 0xff);
                    }
            }
    }
    if ((*0x8f6e0a44 & 0x10000000) != 0x0) {
            if (*0x8f6e0a00 != 0x0) {
                    if (loc_ffffffff8f63dc10("bootloaderlogs", *(0x8f712580 + 0x8), *(0x8f712580 + 0xc), 0x2) == 0x0) {
                            loc_ffffffff8f63d330(0x8f69cf19, 0xff000000 ^ 0xffffffff);
                    }
            }
    }
    r0 = loc_ffffffff8f64f850(0x0, 0x0, 0x1);
    goto loc_8f63ec28;

loc_8f63ec28:
    if (stack[2039] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f63e1b0:
    if (((*0x8f6e0a44 & 0x2000) == 0x0) || (*0x8f6e0a00 == 0x0)) goto loc_8f63e240;

loc_8f63e1c8:
    r0 = loc_ffffffff8f633874();
    if (r0 == 0x0) goto loc_8f63ec28;

loc_8f63e1d4:
    if (*(*(r0 + 0x1f8) + 0x18) == 0x0) {
            r7 = *(0x8f712580 + 0xc);
            r0 = loc_ffffffff8f64f2c4();
            r2 = *(0x8f712580 + 0xc);
            r3 = *(0x8f712580 + 0x10);
            r8 = r0;
    }
    else {
            r0 = loc_ffffffff8f64f330();
            r0 = r0 - *(0x8f712580 + 0xc);
            r7 = r0 - *(0x8f712580 + 0x10);
            r8 = loc_ffffffff8f64f2c4(r0);
            r0 = loc_ffffffff8f64f330();
            r3 = *(0x8f712580 + 0xc);
    }
    goto loc_8f63e22c;

