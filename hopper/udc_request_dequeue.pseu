    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r4 = 0x1;
    r5 = r0;
    stack[2040] = *0x8f7112f4;
    COND = *(r0 + 0x11) != 0x0;
    r3 = *(r0 + 0x10);
    if (COND) {
            r3 = r3 + 0x10;
    }
    r4 = r4 << r3;
    r2 = *0x8f6ac0f0;
    *0x8f6ac0f0 = r2 + 0x1;
    if (r2 == 0x0) {
            r0 = loc_ffffffff8f619448();
    }
    do {
            *(r0 + 0x1b4) = r4;
            while ((r4 & *(0x78d9000 + 0x1b4)) != 0x0) {
                    r0 = loc_ffffffff8f60c5a0(0xa);
            }
    } while ((r4 & *(0x78d9000 + 0x1b8)) != 0x0);
    r0 = *(r5 + 0xc);
    *(0x78d9000 + 0x1bc) = r4;
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f601d48();
            if (r0 != 0x0) {
                    r0 = *(r0 + 0x10);
                    r0 = loc_ffffffff8f601d48(r0);
                    r4 = r0;
                    r0 = *r0;
                    if (r0 >= 0x1) {
                            r0 = loc_ffffffff8f64ab9c();
                    }
                    *r4 = 0x1;
            }
    }
    r3 = *0x8f6ac0f0;
    r2 = stack[2040];
    *0x8f6ac0f0 = r3 - 0x1;
    COND = r3 != 0x1;
    r3 = *0x8f7112f4;
    if (!COND) {
            if (r2 == r3) {
                    r0 = loc_ffffffff8f619438();
            }
            else {
                    r0 = loc_ffffffff8f648514();
            }
    }
    else {
            if (r2 != r3) {
                    r0 = loc_ffffffff8f648514();
            }
    }
    return r0;

