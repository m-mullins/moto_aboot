    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x28;
    r8 = arg0;
    r6 = arg1;
    r3 = *0x8f7112f4;
    stack[2039] = r3;
    r0 = loc_ffffffff8f635424(arg0, arg1);
    if (r0 == 0x0) {
            asm{ ldrd       r2, r3, [r8, #0x8] };
            r4 = r8;
            r1 = *(r8 + 0x20);
            r5 = r0;
            asm{ strd       r2, r3, [sp, #0x48 + var_38] };
            r2 = r2 + 0x20000;
            r3 = r3 + 0x0 + CARRY(FLAGS);
            asm{ strd       r2, r3, [r6, #0x8] };
            do {
                    r12 = *(r8 + 0x10);
                    if (r5 == r1) {
                        break;
                    }
                    r11 = 0x0;
                    asm{ ldrd       sl, fp, [r4, #0xb0] };
                    asm{ ldrd       r2, r3, [sp, #0x48 + var_38] };
                    asm{ strd       sl, fp, [sp, #0x48 + var_48] };
                    r10 = r10 - r2;
                    asm{ strd       sl, fp, [sp, #0x48 + var_30] };
                    r10 = r12;
                    asm{ ldrd       r2, r3, [sp, #0x48 + var_30] };
                    if (r3 == 0x0) {
                            CMP(r2, r10);
                    }
                    if (!CPU_FLAGS & NB) {
                            r11 = 0x0;
                            asm{ ldrd       r2, r3, [r6, #0x8] };
                            asm{ ldrd       sl, fp, [sp, #0x48 + var_48] };
                            if (r11 == r3) {
                                    CMP(r10, r2);
                            }
                            if (CPU_FLAGS & NS) {
                                    asm{ strdhs     sl, fp, [r6, #0x8] };
                            }
                            if (CPU_FLAGS & NS) {
                                    r0 = *(r4 + 0xbc);
                            }
                    }
                    r5 = r5 + 0x1;
                    r4 = r4 + 0x68;
            } while (true);
            if (r0 != 0x0) {
                    r3 = r0 + 0x1ffff;
                    r0 = r0 >> r3 / 0x20000;
                    asm{ ldrd       r2, r3, [r6, #0x8] };
                    r2 = r2 + (r0 << r0 * 0x20000);
                    asm{ strd       r2, r3, [r6, #0x8] };
            }
            r3 = *(r6 + 0x14);
            r0 = 0x1ffff;
            asm{ ldrd       r4, r5, [sp, #0x48 + var_38] };
            r0 = r3 + r0;
            asm{ ldrd       r2, r3, [r6, #0x8] };
            r2 = r2 + (r0 >> r0 / 0x20000 << (r0 >> r0 / 0x20000) * 0x20000);
            r3 = r3 + 0x0 + CARRY(FLAGS);
            r4 = r4 + r12;
            if (r3 == r5 + 0x0 + CARRY(FLAGS)) {
                    CMP(r2, r4);
            }
            if (!CPU_FLAGS & A) {
                    *(r8 + 0x20) = r1 + 0x1;
                    loc_ffffffff8f64ac90(0xa8 + r8 + 0x68 * r1, r6, 0x68, r1 + 0x1);
            }
    }
    if (stack[2039] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

