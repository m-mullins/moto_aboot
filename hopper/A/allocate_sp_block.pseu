    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4c;
    r11 = 0x8f7112f4;
    r10 = arg0;
    asm{ ldrd       r8, sb, [sp, #0x70 + ret_addr] };
    r4 = r2;
    r6 = 0x1ff & (r2 | r8);
    r5 = r3;
    stack[2037] = *r11;
    r1 = r3 | s0;
    r7 = 0x0 & r1;
    COND = r0 == 0x0;
    if (COND) goto loc_8f676bfc;

loc_8f676be8:
    loc_ffffffff8f656968(0x0, "%s: size & offset must be 512-bytes aligned\n", "allocate_sp_block");
    goto loc_8f676cf4;

loc_8f676cf4:
    r0 = 0x0 ^ 0xffffffff;
    goto loc_8f676d7c;

loc_8f676d7c:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f676bfc:
    asm{ ldrd       r6, r7, [sl, #0x10] };
    asm{ ldrd       r0, r1, [sl, #0x8] };
    if (r7 == s0) {
            CMP(r6, r8);
    }
    asm{ strd       r0, r1, [sp, #0x70 + var_48] };
    if (CPU_FLAGS & NE) goto loc_8f676c7c;

loc_8f676c14:
    if (r1 == r5) {
            CMP(r0, r4);
    }
    if (CPU_FLAGS & NE) goto loc_8f676c54;

loc_8f676c20:
    r0 = 0x1;
    asm{ strd       r6, r7, [sp, #0x70 + var_70] };
    loc_ffffffff8f656968(r0, "the whole block [0x%llx, 0x%llx] is allocated, remove it %p\n");
    asm{ ldm        sl, {r2, r3} };
    r0 = 0x0;
    *r3 = r2;
    *(*r10 + 0x4) = r3;
    *(r10 + 0x4) = r0;
    *r10 = r0;
    goto loc_8f676d7c;

loc_8f676c54:
    asm{ ldrd       r0, r1, [sp, #0x70 + var_48] };
    r6 = r6 + r2;
    asm{ strd       r6, r7, [sl, #0x10] };
    r4 = r0 - r4;
    asm{ strd       r6, r7, [sp, #0x70 + var_68] };
    asm{ strd       r4, r5, [sl, #0x8] };
    asm{ strd       r4, r5, [sp, #0x70 + var_70] };
    goto loc_8f676cb8;

loc_8f676cb8:
    loc_ffffffff8f656968(0x2, "shrink block (%p) to block [0x%llx, 0x%llx]\n", r10);
    goto loc_8f676d78;

loc_8f676d78:
    r0 = 0x0;
    goto loc_8f676d7c;

loc_8f676c7c:
    asm{ ldrd       r0, r1, [sp, #0x70 + var_48] };
    r0 = r0 + r6;
    r1 = r1 + r7 + CARRY(FLAGS);
    r2 = r2 + r8;
    if (r1 == r3 + s0 + CARRY(FLAGS)) {
            CMP(r0, r2);
    }
    if (CPU_FLAGS & NE) goto loc_8f676ccc;

loc_8f676c9c:
    asm{ ldrd       r0, r1, [sp, #0x70 + var_48] };
    asm{ strd       r8, sb, [sl, #0x10] };
    r4 = r0 - r4;
    asm{ strd       r8, sb, [sp, #0x70 + var_68] };
    asm{ strd       r4, r5, [sl, #0x8] };
    asm{ strd       r4, r5, [sp, #0x70 + var_70] };
    goto loc_8f676cb8;

loc_8f676ccc:
    r1 = r8 + r4;
    r0 = loc_ffffffff8f676a78(r6 + stack[2030] - r8 - r4, r1);
    COND = r6 != 0x0;
    if (COND) goto loc_8f676cfc;

loc_8f676cec:
    loc_ffffffff8f656968();
    goto loc_8f676cf4;

loc_8f676cfc:
    asm{ ldrd       r0, r1, [sl, #0x10] };
    r2 = r10;
    r4 = r8 - r0;
    asm{ strd       r4, r5, [sl, #0x8] };
    asm{ strd       r0, r1, [sp, #0x70 + var_68] };
    r0 = 0x2;
    r1 = "shrink block (%p) to block [0x%llx, 0x%llx]\n";
    asm{ strd       r4, r5, [sp, #0x70 + var_70] };
    loc_ffffffff8f656968(r0, r1, r2);
    r3 = *(r10 + 0x4);
    *r6 = r10;
    r0 = 0x2;
    r1 = "add new block (%p) block [0x%llx, 0x%llx]after block (%p) block [0x%llx, 0x%llx]\n";
    *(r6 + 0x4) = r3;
    r3 = *(r10 + 0x4);
    *r3 = r6;
    asm{ ldrd       r2, r3, [r6, #0x8] };
    *(r10 + 0x4) = r6;
    asm{ strd       r2, r3, [sp, #0x70 + var_70] };
    asm{ ldrd       r2, r3, [r6, #0x10] };
    asm{ strd       r2, r3, [sp, #0x70 + var_68] };
    asm{ ldrd       r2, r3, [sl, #0x8] };
    asm{ strd       r2, r3, [sp, #0x70 + var_58] };
    asm{ ldrd       r2, r3, [sl, #0x10] };
    asm{ strd       r2, r3, [sp, #0x70 + var_50] };
    loc_ffffffff8f656968(r0, r1, r6, r3, stack[2020]);
    goto loc_8f676d78;

