    COND = r11 != 0x0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r10 = lr;
    stack[2034] = arg1;
    stack[2035] = arg2;
    stack[2037] = *0x8f7112f4;
    if (!COND) {
            loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x15e, "p != ((void *)0)");
    }
    r0 = stack[2035];
    if (r0 > 0x100) goto loc_8f65cd6c;

loc_8f65cd54:
    if (*(r11 + 0x8) != 0xc) {
            r5 = 0x0;
    }
    if (CPU_FLAGS & NE) {
            s0 = 0x1;
    }
    if (CPU_FLAGS & NE) {
            r5 = 0x0;
            r6 = r5;
    }
    if (CPU_FLAGS & NE) goto loc_8f65cec8;

loc_8f65cd6c:
    *(r11 + 0x8) = 0xc;
    goto loc_8f65d43c;

loc_8f65d43c:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f65cec8:
    r7 = *(r11 + 0x14);
    goto loc_8f65ce0c;

loc_8f65ce0c:
    r3 = *r11;
    r2 = *(r11 + 0x4);
    r4 = *(r11 + 0x14);
    if (r3 < r2) goto loc_8f65cd78;

loc_8f65ce20:
    if (r4 == r7) {
            r0 = loc_ffffffff8f65b358(r11, 0xe);
    }
    r3 = *r11;
    if ((r3 >= *(r11 + 0x4)) || (*r3 != 0x7c)) goto loc_8f65d3d0;

loc_8f65ce50:
    *r11 = r3 + 0x1;
    if (s0 != 0x0) {
            r5 = r7;
            r6 = r7;
            loc_ffffffff8f65c82c(r11, 0x78000000, *(r11 + 0x14) + 0x1 - r7, r7);
    }
    s0 = 0x0;
    loc_ffffffff8f65b978(r11, 0x80000000, *(r11 + 0x14) - r6);
    r2 = *(r11 + 0x14);
    r6 = r2 - 0x1;
    loc_ffffffff8f65b8c0(r11, r5, r2 - r5);
    r5 = *(r11 + 0x14);
    r0 = loc_ffffffff8f65b978(r11, 0x88000000, 0x0);
    goto loc_8f65cec8;

loc_8f65d3d0:
    if (s0 == 0x0) {
            loc_ffffffff8f65b8c0(r11, r5, *(r11 + 0x14) - r5);
            r0 = loc_ffffffff8f65b978(r11, 0x90000000, *(r11 + 0x14) - r6);
    }
    r3 = *r11;
    if ((r3 < *(r11 + 0x4)) && (*r3 != stack[2034])) {
            r0 = loc_ffffffff8f6484ac(r10, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x181, "!(p->next < p->end) || ((p->next < p->end) && (*p->next) == (stop))");
    }
    goto loc_8f65d43c;

loc_8f65cd78:
    r1 = *r3;
    if (r1 == 0x7c) goto loc_8f65ce20;

loc_8f65cd84:
    r0 = stack[2034];
    if (r1 == r0) goto loc_8f65ce20;

loc_8f65cd90:
    r1 = r3 + 0x1;
    *r11 = r1;
    r8 = *r3;
    if (r8 == 0x2e) goto loc_8f65d050;

loc_8f65cda4:
    if (CPU_FLAGS & B) goto loc_8f65ced0;

loc_8f65cda8:
    if (r8 == 0x5c) goto loc_8f65d07c;

loc_8f65cdb0:
    if (CPU_FLAGS & B) goto loc_8f65cefc;

loc_8f65cdb4:
    if (r8 == 0x7b) goto loc_8f65d0a8;

loc_8f65cdbc:
    if (r8 == 0x7c) goto loc_8f65d048;

loc_8f65cdc4:
    if (r8 != 0x5e) goto loc_8f65d0d4;

loc_8f65cdcc:
    r8 = 0x1;
    r0 = loc_ffffffff8f65b978(r11, 0x18000000, 0x0);
    r3 = *(r11 + 0x1c);
    *(r3 + 0x28) = *(r3 + 0x28) | 0x1;
    *(r3 + 0x2c) = *(r3 + 0x2c) + 0x1;
    goto loc_8f65cdfc;

loc_8f65cdfc:
    r2 = *r11;
    r1 = *(r11 + 0x4);
    if (r2 < r1) goto loc_8f65d0e0;
    goto loc_8f65ce0c;

loc_8f65d0e0:
    r3 = *r2;
    r0 = zero_extend_32(r3 - 0x2a);
    if (r3 != 0x3f) {
            CMP(r0, 0x1);
    }
    if (CPU_FLAGS & A) goto loc_8f65d124;

loc_8f65d0f8:
    *r11 = *r11 + 0x1;
    if (r8 != 0x0) {
            r0 = loc_ffffffff8f65b358(r11, 0xd);
            r3 = r3;
    }
    if (r3 == 0x2b) goto loc_8f65d1d8;

loc_8f65d15c:
    if (CPU_FLAGS & A) goto loc_8f65d1c4;

loc_8f65d160:
    if (r3 != 0x2a) goto loc_8f65d370;

loc_8f65d168:
    loc_ffffffff8f65c82c(r11, 0x48000000, *(r11 + 0x14) + 0x1 - r4, r4);
    loc_ffffffff8f65b978(r11, 0x50000000, *(r11 + 0x14) - r4);
    loc_ffffffff8f65c82c(r11, 0x58000000, *(r11 + 0x14) + 0x1 - r4, r4);
    r2 = *(r11 + 0x14);
    goto loc_8f65d204;

loc_8f65d204:
    r0 = loc_ffffffff8f65b978();
    goto loc_8f65d370;

loc_8f65d370:
    r3 = *r11;
    r1 = *(r11 + 0x4);
    if (r3 < r1) {
            r2 = *r3;
            r0 = zero_extend_32(r2 - 0x2a);
            if (r2 != 0x3f) {
                    CMP(r0, 0x1);
            }
            if (!CPU_FLAGS & A) {
                    r0 = loc_ffffffff8f65b358(r11, 0xd);
            }
            else {
                    if ((r2 == 0x7b) && (r1 >= r3 + 0x1)) {
                            r0 = *(r3 + 0x1);
                            r0 = loc_ffffffff8f64a0c8(r0);
                            if (r0 != 0x0) {
                                    r0 = loc_ffffffff8f65b358(r11, 0xd);
                            }
                    }
            }
    }
    goto loc_8f65ce0c;

loc_8f65d1c4:
    if (r3 == 0x3f) goto loc_8f65d20c;

loc_8f65d1cc:
    if (r3 == 0x7b) goto loc_8f65d284;
    goto loc_8f65d370;

loc_8f65d284:
    r0 = loc_ffffffff8f65b3e0(r11);
    r3 = *r11;
    r8 = r0;
    if ((r3 < *(r11 + 0x4)) && (*r3 == 0x2c)) {
            *r11 = r3 + 0x1;
            if (!CPU_FLAGS & E) {
                    r0 = loc_ffffffff8f65b3e0(r11);
                    r3 = r0;
                    if (r8 > r0) {
                            loc_ffffffff8f65b358(r11, 0xa);
                    }
            }
    }
    r0 = loc_ffffffff8f65c98c(r11, r4, r8);
    r3 = *r11;
    r2 = *(r11 + 0x4);
    if (r3 >= r2) goto loc_8f65d34c;

loc_8f65d320:
    if (*r3 == 0x7d) {
            r3 = r3 + 0x1;
    }
    if (CPU_FLAGS & E) {
            *r11 = r3;
    }
    if (CPU_FLAGS & NE) goto loc_8f65d34c;
    goto loc_8f65d370;

loc_8f65d34c:
    r3 = *r11;
    if (r3 < r2) goto loc_8f65d338;

loc_8f65d358:
    loc_ffffffff8f65b358(r11, 0x9);
    goto loc_8f65d364;

loc_8f65d364:
    r0 = loc_ffffffff8f65b358(r11, 0xa);
    goto loc_8f65d370;

loc_8f65d338:
    if (*r3 == 0x7d) goto loc_8f65d364;

loc_8f65d344:
    *r11 = r3 + 0x1;
    goto loc_8f65d34c;

loc_8f65d20c:
    loc_ffffffff8f65c82c(r11, 0x78000000, *(r11 + 0x14) + 0x1 - r4, r4);
    loc_ffffffff8f65b978(r11, 0x80000000, *(r11 + 0x14) - r4);
    loc_ffffffff8f65b8c0(r11, r4, *(r11 + 0x14) - r4);
    loc_ffffffff8f65b978(r11, 0x88000000, 0x0);
    loc_ffffffff8f65b8c0(r11, *(r11 + 0x14) - 0x1, 0x1);
    goto loc_8f65d204;

loc_8f65d1d8:
    loc_ffffffff8f65c82c(r11, 0x48000000, *(r11 + 0x14) + 0x1 - r4, r4);
    r2 = *(r11 + 0x14);
    goto loc_8f65d204;

loc_8f65d124:
    if (r3 != 0x7b) goto loc_8f65ce0c;

loc_8f65d12c:
    r0 = r2 + 0x1;
    if (r1 < r0) goto loc_8f65ce0c;

loc_8f65d138:
    r0 = *(r2 + 0x1);
    r0 = loc_ffffffff8f64a0c8(r0);
    r3 = r3;
    if (r0 != 0x0) goto loc_8f65d0f8;
    goto loc_8f65ce0c;

loc_8f65d0d4:
    r0 = loc_ffffffff8f65c5e4();
    goto loc_8f65d0d8;

loc_8f65d0d8:
    r8 = 0x0;
    goto loc_8f65cdfc;

loc_8f65d048:
    r0 = loc_ffffffff8f65b358();
    goto loc_8f65d0d8;

loc_8f65d0a8:
    if ((r1 < r2) && (loc_ffffffff8f64a0c8(*(r3 + 0x1)) != 0x0)) {
            loc_ffffffff8f65b358(r11, 0xd);
    }
    goto loc_8f65d0d4;

loc_8f65cefc:
    if (r8 != 0x3f) {
            if (r8 == 0x5b) {
                    r0 = loc_ffffffff8f65bb34(r11);
            }
            else {
                    r0 = loc_ffffffff8f65c5e4();
            }
    }
    else {
            r0 = loc_ffffffff8f65b358();
    }
    goto loc_8f65d0d8;

loc_8f65d07c:
    if (r1 >= r2) {
            loc_ffffffff8f65b358(r11, 0x5);
    }
    r3 = *r11;
    *r11 = r3 + 0x1;
    goto loc_8f65d0d4;

loc_8f65ced0:
    if (r8 != 0x29) {
            if (!CPU_FLAGS & A) {
                    if (r8 != 0x24) {
                            if (r8 != 0x28) {
                                    r0 = loc_ffffffff8f65c5e4();
                            }
                            else {
                                    if (r1 >= r2) {
                                            loc_ffffffff8f65b358(r11, 0x8);
                                    }
                                    r2 = *(r11 + 0x1c);
                                    r3 = *(r2 + 0x44);
                                    r8 = r3 + 0x1;
                                    *(r2 + 0x44) = r8;
                                    if (r8 < 0x9) {
                                            r3 = r3 + 0x9;
                                    }
                                    if (CPU_FLAGS & B) {
                                            r2 = *(r11 + 0x14);
                                    }
                                    if (CPU_FLAGS & B) {
                                            *(r11 + r3 * 0x4) = r2;
                                    }
                                    loc_ffffffff8f65b978();
                                    r3 = *r11;
                                    if ((r3 >= *(r11 + 0x4)) || (*r3 != 0x29)) {
                                            loc_ffffffff8f65cd04(r11, 0x29, stack[2035] + 0x1, stack[2035]);
                                    }
                                    if (r8 <= 0x9) {
                                            r3 = *(r11 + 0x14);
                                            *(r11 + (r8 + 0x12) * 0x4) = r3;
                                            if (r3 == 0x0) {
                                                    loc_ffffffff8f6484ac(r10, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x1a6, "p->pend[subno] != 0");
                                            }
                                    }
                                    r0 = loc_ffffffff8f65b978(r11, 0x70000000, r8);
                                    r3 = *r11;
                                    if (r3 < *(r11 + 0x4)) {
                                            *r11 = r3 + 0x1;
                                            if (*r3 != 0x29) {
                                                    r0 = loc_ffffffff8f65b358();
                                            }
                                    }
                                    else {
                                            r0 = loc_ffffffff8f65b358();
                                    }
                            }
                    }
                    else {
                            r0 = loc_ffffffff8f65b978(r11, 0x20000000, 0x0);
                            r3 = *(r11 + 0x1c);
                            *(r3 + 0x28) = *(r3 + 0x28) | 0x2;
                            *(r3 + 0x30) = *(r3 + 0x30) + 0x1;
                    }
            }
            else {
                    if (r8 >= 0x2b) {
                            r0 = loc_ffffffff8f65c5e4();
                    }
                    else {
                            r0 = loc_ffffffff8f65b358();
                    }
            }
    }
    else {
            r0 = loc_ffffffff8f65b358();
    }
    goto loc_8f65d0d8;

loc_8f65d050:
    r8 = *(*(r11 + 0x1c) + 0x18);
    r8 = r8 & 0x8;
    COND = r8 == 0x0;
    if (COND) goto loc_8f65d06c;

loc_8f65d064:
    r0 = loc_ffffffff8f65c74c();
    goto loc_8f65d0d8;

loc_8f65d06c:
    r0 = loc_ffffffff8f65b978();
    goto loc_8f65cdfc;

