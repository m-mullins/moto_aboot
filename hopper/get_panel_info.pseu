    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r6 = zero_extend_32(arg2);
    r8 = arg0;
    s0 = arg1;
    r4 = arg2;
    stack[2039] = *0x8f7112f4;
    stack[2032] = sp + 0x4;
    r3 = *(0x8f6acabc + 0x4);
    *r3 = r6;
    if ((loc_ffffffff8f60f7a8(0x8f6acabc, 0x1, arg2, r3, stack[2032]) != 0x0) || (loc_ffffffff8f60f7a8(s0, 0x1) != 0x0)) goto loc_8f643b88;

loc_8f643b60:
    loc_ffffffff8f60f928(sp, r4);
    r1 = stack[2032];
    r3 = *r1;
    if (r3 != 0x0) goto loc_8f643b90;

loc_8f643b7c:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Failed in reading panel info.\n");
    goto loc_8f643b88;

loc_8f643b88:
    r0 = 0x1;
    goto loc_8f643bf4;

loc_8f643bf4:
    if (stack[2039] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f643b90:
    r2 = zero_extend_32(r3);
    if (r2 != 0x1c) {
            CMP(r2, 0x1a);
    }
    if (CPU_FLAGS & E) {
            r3 = *(r1 + 0x4);
    }
    if (CPU_FLAGS & NE) {
            r2 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r2 = 0x1;
    }
    if (CPU_FLAGS & E) {
            r2 = 0x1;
    }
    COND = r4 == 0x1;
    asm{ rev        r1, r3 };
    r3 = r3 >> r1 / 0x100;
    if (COND) {
            asm{ ubfxeq     r3, r1, #0x10, #0x8 };
    }
    if ((!CPU_FLAGS & E) && (r4 == 0x2)) {
            if (r2 != 0x0) {
                    r3 = r3 >> r1 / 0x10000;
            }
            if (CPU_FLAGS & E) {
                    r3 = zero_extend_32(r3);
            }
    }
    *r8 = r3;
    **(0x8f6acabc + 0x4) = r6;
    r0 = loc_ffffffff8f60f7a8(0x8f6acabc, 0x1);
    r0 = r0 + 0x0;
    COND = r0 != 0x0;
    if (COND) {
            r0 = 0x1;
    }
    goto loc_8f643bf4;

