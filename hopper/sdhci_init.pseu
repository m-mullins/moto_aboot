    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r4 = r0;
    r2 = *r0;
    r12 = 0xf4240;
    stack[2043] = *0x8f7112f4;
    r3 = *(r2 + 0x40);
    r1 = *(r2 + 0x44);
    asm{ ubfx       r0, r3, #0x8, #0x8 };
    COND = (r3 & 0x40000) != 0x0;
    r0 = r12 * r0;
    *(r4 + 0x18) = r0;
    asm{ ubfx       r0, r3, #0x10, #0x2 };
    *(r4 + 0x1c) = r0;
    if (COND) {
            r0 = 0x1;
    }
    if (CPU_FLAGS & NE) {
            *(r4 + 0x20) = r0;
    }
    if ((r3 & 0x80000) != 0x0) {
            r0 = 0x1;
    }
    if (CPU_FLAGS & NE) {
            *(r4 + 0x21) = r0;
    }
    if ((r3 & 0x1000000) != 0x0) {
            r3 = 0x7;
    }
    if (CPU_FLAGS & NE) goto loc_8f60814c;

loc_8f608134:
    if ((r3 & 0x2000000) != 0x0) {
            r3 = 0x6;
    }
    if (CPU_FLAGS & NE) goto loc_8f60814c;

loc_8f608140:
    if ((r3 & 0x4000000) == 0x0) goto loc_8f608150;

loc_8f608148:
    r3 = 0x5;
    goto loc_8f60814c;

loc_8f60814c:
    *(r4 + 0x22) = r3;
    goto loc_8f608150;

loc_8f608150:
    asm{ ubfx       r3, r1, #0x2, #0x1 };
    *(r4 + 0x24) = r3;
    *(r4 + 0x25) = r1 & 0x1;
    r3 = *(r4 + 0x28);
    asm{ ubfx       r1, r1, #0x1, #0x1 };
    *(r4 + 0x26) = r1;
    r3 = *r3;
    r1 = *(r3 + 0x50);
    r3 = r3 >> r1 / 0x10000000;
    r1 = zero_extend_32(r1);
    *(r4 + 0xd) = r3;
    *(r4 + 0xe) = r1;
    if ((r3 != 0x1) || (r1 >= 0x33)) {
            r3 = 0x0;
    }
    *(r4 + 0x10) = r3;
    r3 = *(r4 + 0x22);
    *(r2 + 0x29) = zero_extend_32(r3 << r3 * 0x2);
    *(*r4 + 0x29) = zero_extend_32(r3 << r3 * 0x2) | 0x1;
    r0 = *(r4 + 0x14);
    loc_ffffffff8f61ac4c(r0);
    r0 = loc_ffffffff8f6079a0(r4, 0x0);
    *(*r4 + 0x28) = 0x10;
    r3 = *r4;
    *(r3 + 0x34) = 0xb;
    *(r3 + 0x36) = 0x0 ^ 0xffffffff;
    *(r3 + 0x38) = 0xb;
    *(r3 + 0x3a) = 0x0 ^ 0xffffffff;
    if (stack[2043] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

