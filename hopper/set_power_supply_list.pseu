    r4 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r2 = *0x8f7112f4;
    r8 = arg0;
    r7 = arg1;
    r5 = 0x0;
    r3 = arg1 - 0xe0000001;
    stack[2037] = r2;
    stack[2035] = r3;
    while (r5 < r7) {
            if (r4 == 0x0) {
                    r2 = r2 << r5 * 0x8;
            }
            if (CPU_FLAGS & NE) {
                    r3 = stack[2035];
            }
            if (CPU_FLAGS & NE) {
                    r2 = r3 - r5;
            }
            if (CPU_FLAGS & NE) {
                    r2 = r2 << r2 * 0x8;
            }
            r3 = r8 + r2;
            r2 = *(r8 + r2);
            r2 = r2 - 0x1;
            if (r2 < 0x4) {
                    loc_8f6184d8();
            }
            r5 = r5 + 0x1;
    }
    if (stack[2037] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

