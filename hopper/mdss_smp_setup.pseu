    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x1c;
    r10 = arg2;
    r2 = 0x10060000;
    r6 = r0;
    stack[2035] = lr;
    r12 = arg1;
    stack[2037] = *0x8f7112f4;
    if (*0x1a01000 == r2) goto loc_8f60e324;

loc_8f60e2e8:
    r3 = *0x1a01000;
    if (r3 == r2 + 0x20000) goto loc_8f60e330;

loc_8f60e2f4:
    if (r3 - 0x11000000 > 0xeffffff) goto loc_8f60e33c;

loc_8f60e308:
    r4 = *(r0 + 0x1c);
    r1 = 0x2000;
    r8 = 0xc;
    if (r4 == 0x1) {
            r4 = 0x2;
    }
    if (CPU_FLAGS & NE) {
            r4 = 0x0;
    }
    goto loc_8f60e348;

loc_8f60e348:
    r0 = 0x1006;
    r3 = *(r6 + 0x1c);
    r2 = *0x1a01000;
    r2 = r2 >> r2 / 0x10000;
    if (r2 != r0) {
            CMP(r2, 0x1001);
    }
    if ((!CPU_FLAGS & E) && (r2 != r0 + 0x2)) {
            if (r3 != 0x1) {
                    if (r3 == 0x2) {
                            r7 = 0xd;
                    }
                    if (CPU_FLAGS & NE) {
                            r7 = 0x4;
                    }
                    if (CPU_FLAGS & E) {
                            s0 = 0xa;
                    }
                    if (CPU_FLAGS & NE) {
                            s0 = 0x1;
                    }
            }
            else {
                    r7 = 0x11;
                    s0 = 0x10;
            }
    }
    else {
            if (r3 != 0x1) {
                    if (r3 == 0x2) {
                            r7 = 0xd;
                    }
                    if (CPU_FLAGS & NE) {
                            r7 = 0x4;
                    }
                    if (CPU_FLAGS & E) {
                            s0 = 0x4;
                    }
                    if (CPU_FLAGS & NE) {
                            s0 = 0x1;
                    }
            }
            else {
                    r7 = 0x11;
                    s0 = 0x7;
            }
    }
    r3 = *(r6 + 0x70);
    r0 = r1 - 0x1;
    stack[2034] = r12;
    if (r3 != 0x0) {
            r3 = 0x1800;
    }
    if (CPU_FLAGS & E) {
            r3 = 0x3000;
    }
    r0 = loc_ffffffff8f67b3c0(r0 + r3);
    r12 = stack[2034];
    r5 = r0;
    if (r0 == 0x5) {
            loc_ffffffff8f656968(0x0 ^ 0xffffffff, "ERROR: %s: Out of SMP's, cnt=%d! \n", "mdss_smp_setup", r5);
            r1 = "ASSERT FAILED at (%s:%d): %s\n";
            r2 = "platform/msm_shared/mdp5.c";
            loc_ffffffff8f6484ac(stack[2035], r1, r2, 0x15c, 0x8f69c66f);
            r12 = stack[2034];
    }
    r1 = r1 << r5 * 0x40;
    r3 = 0xc0 * r5;
    *(r12 + 0x50) = r1;
    r2 = r2 << r5 * 0x80;
    *(r12 + 0x54) = r2;
    *(r12 + 0x58) = r3;
    if (*(r6 + 0x70) != 0x0) {
            *(r10 + 0x50) = r1;
    }
    if (CPU_FLAGS & NE) {
            *(r10 + 0x54) = r2;
    }
    if (CPU_FLAGS & NE) {
            *(r10 + 0x58) = r3;
    }
    r0 = loc_ffffffff8f60e058();
    if (*(r6 + 0x70) != 0x0) {
            if (stack[2037] == *0x8f7112f4) {
                    r0 = loc_ffffffff8f60e058(r7, r5, r4);
            }
            else {
                    r0 = loc_ffffffff8f648514();
            }
    }
    else {
            if (stack[2037] != *0x8f7112f4) {
                    r0 = loc_ffffffff8f648514();
            }
    }
    return r0;

loc_8f60e33c:
    r1 = 0x1000;
    goto loc_8f60e344;

loc_8f60e344:
    r4 = 0x0;
    r8 = r4;
    goto loc_8f60e348;

loc_8f60e330:
    r1 = 0x2800;
    goto loc_8f60e344;

loc_8f60e324:
    r1 = 0x2000;
    goto loc_8f60e344;

