    stack[2040] = arg0;
    stack[2041] = r4;
    stack[2042] = r5;
    r5 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x18;
    r12 = 0x8f67f630;
    r10 = arg1;
    r8 = arg0;
    r7 = arg2;
    s0 = 0x4;
    r4 = sp;
    stack[2039] = *0x8f7112f4;
    asm{ ldm        ip, {r0, r1, r2, r3} };
    asm{ stm        sp, {r0, r1, r2, r3} };
    r0 = loc_ffffffff8f64ac90(sp + 0x10, r12 + 0x10, s0, sp + 0x10, stack[2034], stack[2035], stack[2036], stack[2037], stack[2038], stack[2039], stack[2040], stack[2041], stack[2042]);
    r1 = *0x8f6b8b04;
    r3 = r0;
    r0 = *(0x18 + 0x2c00000 + (r1 << r1 * 0x8000) + s0 * r10);
    r1 = 0x0;
    do {
            r2 = *r5;
            if (r2 >= r7) {
                break;
            }
            r12 = *(r4 + r1 * 0x4);
            s0 = *(r3 + r1);
            r1 = r1 + 0x1;
            *(r8 + r2) = (r0 & r12) >> s0;
            *r5 = *r5 + 0x1;
    } while (r1 != 0x4);
    if (stack[2039] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

