    stack[2041] = r4;
    stack[2042] = r5;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x18;
    r5 = sp + 0x4;
    r4 = arg0;
    stack[2039] = *0x8f7112f4;
    r3 = 0x1a01000;
    r8 = *r3;
    loc_ffffffff8f64adc8(r5, 0x0, 0x10, r3, stack[2034], stack[2035], stack[2036], stack[2037], stack[2038], stack[2039], arg0, stack[2041], stack[2042]);
    r2 = *(r4 + 0x1c);
    if (r2 == 0x1) {
            r7 = 0x5;
    }
    if (!CPU_FLAGS & E) {
            if (r2 == 0x2) {
                    r7 = 0xa;
            }
            if (CPU_FLAGS & NE) {
                    r7 = 0x4;
            }
            if (CPU_FLAGS & E) {
                    r2 = 0x2;
            }
            if (CPU_FLAGS & NE) {
                    r2 = 0x0;
            }
    }
    r3 = r3 >> r8 / 0x10000;
    r0 = 0x1008;
    if (r3 != 0x1006) {
            r0 = 0x1008;
            CMP(r3, r0);
    }
    if (CPU_FLAGS & E) {
            r3 = 0x2;
    }
    if (!CPU_FLAGS & E) {
            r0 = 0x1009;
            if (r3 != 0x1005) {
                    r0 = 0x1009;
                    CMP(r3, r0);
            }
            if (!CPU_FLAGS & NE) {
                    r0 = r0 << r2 * 0x2;
                    r7 = r7 << r7 * 0x2;
                    r8 =     r0;
    0x3;
 ^ 0xffffffff;
                    r10 =     0x3;
    r7;
 ^ 0xffffffff;
                    r3 = 0x1ac8020;
                    do {
                            r2 = *r3;
                            r12 = *(r4 + 0x70);
                            r1 = *(0xfe537fe0 + r3 + r5);
                            r2 = r2 & r8 |     r0;
    r1;
;
                            if (r12 != 0x0) {
                                    r2 = r2 & r10;
                            }
                            if (CPU_FLAGS & NE) {
                                    r2 = r2 |     r1;
    r7;
;
                            }
                            *r3 = r2;
                            r3 = r3 + 0x4;
                    } while (r3 != 0x1ac8030);
            }
    }
    else {
            r0 = r0 << r2 * 0x2;
            r7 = r7 << r7 * 0x2;
            r8 =     r0;
    0x3;
 ^ 0xffffffff;
            r10 =     0x3;
    r7;
 ^ 0xffffffff;
            r3 = 0x1ac8020;
            do {
                    r2 = *r3;
                    r12 = *(r4 + 0x70);
                    r1 = *(0xfe537fe0 + r3 + r5);
                    r2 = r2 & r8 |     r0;
    r1;
;
                    if (r12 != 0x0) {
                            r2 = r2 & r10;
                    }
                    if (CPU_FLAGS & NE) {
                            r2 = r2 |     r1;
    r7;
;
                    }
                    *r3 = r2;
                    r3 = r3 + 0x4;
            } while (r3 != 0x1ac8030);
    }
    if (stack[2039] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

