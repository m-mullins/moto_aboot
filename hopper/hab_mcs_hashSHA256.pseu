    r2 = arg2;
    r0 = arg0;
    r3 = arg1;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x11c;
    r4 = sp + 0x14;
    r12 = r0;
    stack[2037] = *0x8f7112f4;
    r1 = 0x0;
    do {
            r12 = r12 + 0x4;
            *(r1 + r4) = *(r12 + 0xffffffffffffffff) | *(r0 + r1) * 0x1000000 | *(r12 + 0xfffffffffffffffd) * 0x10000 | *(r12 + 0xfffffffffffffffe) * 0x100;
            r1 = r1 + 0x4;
    } while (r1 != 0x40);
    r1 = r4;
    r0 = 0x0;
    do {
            lr = *(r1 + 0x4);
            r1 = r1 + 0x4;
            r6 = *(r1 + 0x20);
            r5 = *(r4 + r0);
            r0 = r0 + 0x4;
            r12 = *(r1 + 0x34);
            COND = r0 != 0xc0;
            r5 = r6 + r5;
            asm{ ror        r6, lr, #0x7 };
            lr = r5 + (r6 ^ ROR(lr, 0x12) ^ lr / 0x8);
            asm{ ror        r5, ip, #0x11 };
            *(r1 + 0x3c) = lr + (r5 ^ ROR(r12, 0x13) ^ r12 / 0x400);
    } while (COND);
    r8 = *(r3 + 0xc);
    r1 = *r3;
    r7 = *(r3 + 0x4);
    stack[1970] = r8;
    r4 = *(r3 + 0x8);
    lr = r1;
    r12 = *(r3 + 0x10);
    r6 = *(r3 + 0x14);
    r5 = *(r3 + 0x18);
    r8 = *(r3 + 0x1c);
    stack[1969] = r1;
    r1 = 0x0;
    do {
            r0 = r4 & lr;
            r11 = 0x8f6a6c68;
            r10 = (lr ^ r4) & r7 ^ r0;
            asm{ ror        r0, lr, #0x2 };
            s0 = *(r1 + r11);
            stack[1971] = r10 + (r0 ^ ROR(lr, 0xd) ^ ROR(lr, 0x16));
            r11 = r5 & !r12;
            r10 = *(r1 + sp + 0x14);
            r1 = r1 + 0x4;
            COND = r1 == 0x100;
            s0 = r10 + s0;
            asm{ ror        sl, ip, #0x6 };
            r10 = r8 + (r11 ^ r6 & r12) + s0 + (r10 ^ ROR(r12, 0xb) ^ ROR(r12, 0x19));
            r11 = stack[1970] + r10;
            r10 = stack[1971] + r10;
            if (COND) {
                break;
            }
            r8 = r5;
            stack[1970] = r4;
            r5 = r6;
            r4 = r7;
            r6 = r12;
            r7 = lr;
            r12 = r11;
            lr = r10;
    } while (true);
    r3 = *0x8f7112f4;
    *r2 = r10 + stack[1969];
    *(r2 + 0x4) = lr + *(r3 + 0x4);
    *(r2 + 0x8) = r7 + *(r3 + 0x8);
    *(r2 + 0xc) = r4 + *(r3 + 0xc);
    *(r2 + 0x10) = r11 + *(r3 + 0x10);
    *(r2 + 0x14) = r12 + *(r3 + 0x14);
    *(r2 + 0x18) = r6 + *(r3 + 0x18);
    *(r2 + 0x1c) = r5 + *(r3 + 0x1c);
    loc_ffffffff8f64adc0();
    r0 = 0x0;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

