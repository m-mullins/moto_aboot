    r7 = arg3;
    r3 = 0x8f7112f4;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x2c;
    COND = s0 == 0x0;
    r8 = arg0;
    r6 = arg2;
    asm{ ldrd       sl, fp, [sp, #0x50 + ret_addr] };
    r3 = *r3;
    stack[2037] = r3;
    if ((CPU_FLAGS & E) || (r8 == 0x0)) goto loc_8f67ae6c;

loc_8f67ae78:
    r2 = *(*0x8f7125ec + 0x8);
    r0 = loc_ffffffff8f67b5cc(r6, r7, r2, 0x0);
    COND = r1 == 0x0;
    if (COND) goto loc_8f67aeb4;

loc_8f67ae9c:
    asm{ strd       r6, r7, [sp, #0x50 + var_50] };
    loc_ffffffff8f656968(0x0, "%s: offset must be sector aligned: 0x%llx\n", "load_partition");
    goto loc_8f67afd8;

loc_8f67afd8:
    r0 = 0x0 ^ 0xffffffff;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f67aeb4:
    r4 = *(r8 + 0x20) | *(r8 + 0x21) * 0x100 | *(r8 + 0x22) * 0x10000 | *(r8 + 0x23) * 0x1000000;
    r0 = r0 << r4 * 0x200;
    r5 = *(r8 + 0x24) | *(r8 + 0x25) * 0x100 | *(r8 + 0x26) * 0x10000 | *(r8 + 0x27) * 0x1000000;
    r1 = r1 << r5 * 0x200 | r4 / 0x800000;
    r2 = *(r8 + 0x2d);
    r3 = *(r8 + 0x2c);
    r3 = r3 | r2 * 0x100 | *(r8 + 0x2e) * 0x10000;
    r2 = *(r8 + 0x2f);
    r2 = r3 | r2 * 0x1000000;
    asm{ ldrd       r2, r3, [sp, #0x50 + var_38] };
    r2 = r2 + 0x1;
    r3 = r3 + 0x0 + CARRY(FLAGS);
    r2 = r2 - r4;
    r4 = r4 << r2 * 0x200;
    r5 = r5 << (r3 - r5 + !CARRY(FLAGS)) * 0x200 | r2 / 0x800000;
    r2 = r6 + r10;
    if (r7 + r11 + CARRY(FLAGS) == r5) {
            CMP(r2, r4);
    }
    if (CPU_FLAGS & B) goto loc_8f67af98;

loc_8f67af6c:
    r0 = loc_ffffffff8f6537f0(r8);
    asm{ strd       r4, r5, [sp, #0x50 + var_50] };
    asm{ strd       r6, r7, [sp, #0x50 + var_48] };
    asm{ strd       sl, fp, [sp, #0x50 + var_40] };
    loc_ffffffff8f656968(0x0, "%s: data range exceeds partition %s size: [0x%llx, 0x%llx, 0x%llx]\n", "load_partition", r0);
    goto loc_8f67afd8;

loc_8f67af98:
    COND = r3 != 0x0;
    r3 = 0x8f7112f4;
    r2 = stack[2037];
    if (COND) {
            r4 = r10;
    }
    if (CPU_FLAGS & NE) {
            r5 = r11;
    }
    if (r2 == *r3) {
            r0 = r0 + r6;
            r0 = loc_ffffffff8f6507a4(r0, r1 + r7 + CARRY(FLAGS), r4, r5, s0);
    }
    else {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f67ae6c:
    loc_ffffffff8f656968();
    goto loc_8f67afd8;

