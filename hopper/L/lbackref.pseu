    r8 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x2c;
    r7 = arg0;
    r10 = arg2;
    r6 = arg1;
    s0 = arg5;
    stack[2033] = lr;
    stack[2034] = arg4;
    stack[2037] = *0x8f7112f4;
    goto loc_8f65faa8;

loc_8f65faa8:
    if (r7 == 0x0) {
            loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x23e, "m != ((void *)0)");
    }
    if (r6 == 0x0) {
            loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x23f, "start != ((void *)0)");
    }
    if (r10 == 0x0) {
            loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x240, "stop != ((void *)0)");
    }
    r0 = 0x0;
    goto loc_8f65fb18;

loc_8f65fb18:
    r3 = r0 ^ 0x1;
    if (r8 >= stack[2034]) {
            r3 = 0x0;
    }
    if (CPU_FLAGS & S) {
            r3 = r3 & 0x1;
    }
    if (r3 == 0x0) goto loc_8f65fdf8;

loc_8f65fb34:
    r2 = *r7;
    r12 = r12 << r8 * 0x4;
    r0 = *(r2 + 0x4);
    r1 = *(r0 + r8 * 0x4);
    r3 = r1 & 0xf8000000;
    if (r3 == 0x30000000) goto loc_8f65fbe0;

loc_8f65fb50:
    if (CPU_FLAGS & A) goto loc_8f65fb80;

loc_8f65fb54:
    if (r3 == 0x18000000) goto loc_8f65fc18;

loc_8f65fb5c:
    if (CPU_FLAGS & A) goto loc_8f65fb6c;

loc_8f65fb60:
    if (r3 == 0x10000000) goto loc_8f65fbac;

loc_8f65fde4:
    r0 = 0x1;
    goto loc_8f65fdf0;

loc_8f65fdf0:
    r8 = r8 + 0x1;
    goto loc_8f65fb18;

loc_8f65fbac:
    if (r6 == r10) goto loc_8f6601b0;

loc_8f65fbb4:
    r3 = r6 + 0x1;
    if (*r6 != zero_extend_32(r1)) goto loc_8f6601b0;

loc_8f65fbc8:
    r6 = r3;
    goto loc_8f65fdec;

loc_8f65fdec:
    r0 = 0x0;
    goto loc_8f65fdf0;

loc_8f6601b0:
    r0 = 0x0;
    goto loc_8f6601b4;

loc_8f6601b4:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f65fb6c:
    if (r3 == 0x20000000) goto loc_8f65fc44;

loc_8f65fb74:
    if (r3 == 0x28000000) goto loc_8f65fbd0;
    goto loc_8f65fde4;

loc_8f65fbd0:
    if (r6 == r10) goto loc_8f6601b0;

loc_8f65fbd8:
    r6 = r6 + 0x1;
    goto loc_8f65fdec;

loc_8f65fc44:
    if (r6 != *(r7 + 0x14)) goto loc_8f65fc60;

loc_8f65fc50:
    r0 = *(r7 + 0x4);
    r0 = r0 & 0x2;
    COND = r0 == 0x0;
    if (COND) goto loc_8f65fdf0;
    goto loc_8f6601b0;

loc_8f65fc60:
    if (CPU_FLAGS & NB) goto loc_8f6601b0;

loc_8f65fc64:
    r3 = *r6;
    goto loc_8f65fc68;

loc_8f65fc68:
    if ((r3 != 0xa) || ((*(r2 + 0x18) & 0x8) == 0x0)) goto loc_8f6601b0;
    goto loc_8f65fdec;

loc_8f65fc18:
    if (r6 != *(r7 + 0x10)) goto loc_8f65fc30;

loc_8f65fc24:
    r0 = *(r7 + 0x4);
    r0 = r0 & 0x1;
    COND = r0 == 0x0;
    if (COND) goto loc_8f65fdf0;

loc_8f65fc30:
    if (r6 >= *(r7 + 0x14)) goto loc_8f6601b0;

loc_8f65fc3c:
    r3 = *(r6 + 0xffffffffffffffff);
    goto loc_8f65fc68;

loc_8f65fb80:
    if (r3 == 0x80000000) goto loc_8f65fd8c;

loc_8f65fb88:
    if (CPU_FLAGS & A) goto loc_8f65fb98;

loc_8f65fb8c:
    if (r3 != 0x60000000) {
            r0 = 0x1;
    }
    else {
            r0 = 0x0;
    }
    goto loc_8f65fdf0;

loc_8f65fb98:
    if (r3 == 0x98000000) goto loc_8f65fc80;

loc_8f65fba0:
    if (r3 == 0xa0000000) goto loc_8f65fd0c;
    goto loc_8f65fde4;

loc_8f65fd0c:
    if (r6 != *(r7 + 0x14)) goto loc_8f65fd34;

loc_8f65fd18:
    if ((*(r7 + 0x4) & 0x2) != 0x0) goto loc_8f6601b0;

loc_8f65fd24:
    if (r6 > *(r7 + 0x10)) goto loc_8f65fd6c;
    goto loc_8f6601b0;

loc_8f65fd6c:
    r0 = *(r6 + 0xffffffffffffffff);
    r0 = loc_ffffffff8f64a18c(r0);
    if (r0 != 0x0) goto loc_8f65fdec;

loc_8f65fd7c:
    r3 = *(r6 + 0xffffffffffffffff);
    goto loc_8f65fd80;

loc_8f65fd80:
    if (r3 == 0x5f) goto loc_8f65fdf0;
    goto loc_8f6601b0;

loc_8f65fd34:
    if (CPU_FLAGS & NB) goto loc_8f6601b0;

loc_8f65fd38:
    if ((*r6 != 0xa) || ((*(r2 + 0x18) & 0x8) == 0x0)) goto loc_8f65fd50;
    goto loc_8f65fd24;

loc_8f65fd50:
    if ((loc_ffffffff8f64a18c() != 0x0) || (*r6 == 0x5f)) goto loc_8f6601b0;
    goto loc_8f65fd24;

loc_8f65fc80:
    r3 = *(r7 + 0x10);
    if ((r6 != r3) || ((*(r7 + 0x4) & 0x1) != 0x0)) goto loc_8f65fca8;

loc_8f65fc98:
    r3 = *(r7 + 0x14);
    if (r6 < r3) goto loc_8f65fcf4;
    goto loc_8f6601b0;

loc_8f65fcf4:
    r0 = *r6;
    r0 = loc_ffffffff8f64a18c(r0);
    if (r0 == 0x0) {
            r3 = *r6;
    }
    if (CPU_FLAGS & E) goto loc_8f65fd80;
    goto loc_8f65fdec;

loc_8f65fca8:
    if (((r6 >= *(r7 + 0x14)) || (*(r6 + 0xffffffffffffffff) != 0xa)) || ((*(r2 + 0x18) & 0x8) == 0x0)) goto loc_8f65fccc;
    goto loc_8f65fc98;

loc_8f65fccc:
    if (((r6 < r3) || (loc_ffffffff8f64a18c(*(r6 + 0xffffffffffffffff)) != 0x0)) || (*(r6 + 0xffffffffffffffff) == 0x5f)) goto loc_8f6601b0;
    goto loc_8f65fc98;

loc_8f65fd8c:
    r8 = r8 + 0x1;
    r4 = *(0x4 + r0 + r12);
    do {
            if ((r4 & 0xf8000000) != 0x88000000) {
                    loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x282, "((s)&((uint32_t)0xf8000000UL)) == (((uint32_t)(17))<<((unsigned)27))");
            }
            r8 = r8 + (r4 & !0xf8000000);
            r4 = *(*(*r7 + 0x4) + r8 * 0x4);
    } while ((r4 & 0xf8000000) != 0x90000000);
    goto loc_8f65fdec;

loc_8f65fbe0:
    r1 = r1 & !0xf8000000;
    r3 = *(r2 + 0x10);
    r0 = r3 + r1 * 0x10;
    if (r6 == r10) goto loc_8f6601b0;

loc_8f65fbf4:
    r3 = *(r3 + r1 * 0x10);
    r2 = r6 + 0x1;
    r12 = *r6;
    if ((*(r3 + r12) & *(r0 + 0x4)) == 0x0) goto loc_8f6601b0;

loc_8f65fc10:
    r6 = r2;
    goto loc_8f65fdec;

loc_8f65fdf8:
    if (r0 != 0x0) goto loc_8f65fe10;

loc_8f65fe00:
    if (r6 == r10) {
            r0 = r10;
    }
    if (CPU_FLAGS & NE) {
            r0 = 0x0;
    }
    goto loc_8f6601b4;

loc_8f65fe10:
    r3 = *r7;
    r5 = r8 - 0x1;
    r2 = *(r3 + 0x4);
    stack[2035] = r3 << r5 * 0x4;
    r11 = *(r2 + r5 * 0x4);
    r3 = r11 & 0xf8000000;
    if (r3 == 0x58000000) goto loc_8f65ff34;

loc_8f65fe34:
    if (CPU_FLAGS & A) goto loc_8f65fe54;

loc_8f65fe38:
    if (r3 == 0x48000000) goto loc_8f65ff64;

loc_8f65fe40:
    if (r3 == 0x50000000) goto loc_8f65ffc8;

loc_8f65fe48:
    if (r3 != 0x38000000) goto loc_8f6601b0;

loc_8f65fe70:
    r4 = r11 & !0xf8000000;
    r12 = *(r7 + 0x8);
    r0 = 0x0 ^ 0xffffffff;
    r8 = r8 << r4 * 0x10;
    asm{ ldrd       r2, r3, [r1, #0x8] };
    r1 = 0x0 ^ 0xffffffff;
    if (r3 == r1) {
            CMP(r2, r0);
    }
    if (CPU_FLAGS & E) goto loc_8f6601b0;

loc_8f65fe98:
    asm{ ldrd       r2, r3, [ip, r8] };
    if (r3 == r1) {
            CMP(r2, r0);
    }
    if (!CPU_FLAGS & NE) {
            loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x29a, "m->pmatch[i].rm_so != (regoff_t)-1");
    }
    r3 = *(r7 + 0x8);
    r8 = r3 + r8;
    r3 = *(r3 + r4 * 0x10);
    r11 = *(r8 + 0x8);
    r11 = r11 - r3;
    COND = r11 == 0x0;
    if (((COND) || (r6 > r10 - r11)) || (loc_ffffffff8f64af40(r6, *(r7 + 0xc) + r3, r11) != 0x0)) goto loc_8f6601b0;

loc_8f65ff04:
    r3 = *r7;
    r4 = r4 | 0x40000000;
    r3 = *(r3 + 0x4);
    r3 = r3 + stack[2035];
    do {
            r2 = *r3;
            r3 = r3 + 0x4;
            r5 = r5 + 0x1;
    } while (r2 != r4);
    r6 = r6 + r11;
    r8 = r5;
    goto loc_8f65faa8;

loc_8f65ffc8:
    r3 = *(r7 + 0x1c);
    if (r6 == *(r3 + r0 * 0x4)) goto loc_8f660004;

loc_8f65ffd8:
    r1 = r6;
    *(r3 + stack[2034] * 0x4) = r6;
    r2 = r10;
    r3 = r8 - (r11 & !0xf8000000);
    asm{ stm        sp, {r0, sb} };
    r0 = loc_ffffffff8f65fa74(r7, r1, r2, r3);
    if (r0 != 0x0) goto loc_8f6601b4;

loc_8f660004:
    s0 = s0 - 0x1;
    goto loc_8f65faa8;

loc_8f65ff64:
    if (*(r7 + 0x1c) == 0x0) {
            r0 = loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x2ae, "m->lastpos != ((void *)0)");
    }
    s0 = s0 + 0x1;
    if (s0 >= *(*r7 + 0x4c)) {
            r0 = loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x2af, "lev+1 <= m->g->nplus");
    }
    *(*(r7 + 0x1c) + r0 * 0x4) = r6;
    goto loc_8f65faa8;

loc_8f65fe54:
    if (r3 == 0x70000000) goto loc_8f66015c;

loc_8f65fe5c:
    if (r3 == 0x78000000) goto loc_8f66000c;

loc_8f65fe64:
    if (r3 == 0x68000000) {
            r2 = *(r7 + 0xc);
            r0 = r7;
            asm{ ldrd       r4, r5, [r1, fp] };
            asm{ strd       r2, r3, [r1, fp] };
            r1 = r6;
            r3 = r8;
            asm{ stm        sp, {r2, sb} };
            r0 = loc_ffffffff8f65fa74(r0, r1, r10, r3);
            if (CPU_FLAGS & E) {
                    asm{ strdeq     r4, r5, [r3, fp] };
            }
    }
    else {
            r0 = 0x0;
    }
    goto loc_8f6601b4;

loc_8f66000c:
    r4 = (r8 - 0x2) + (r11 & !0xf8000000);
    if ((*(r2 + r4 * 0x4) & 0xf8000000) != 0x80000000) {
            loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x2c0, "((m->g->strip[esub])&((uint32_t)0xf8000000UL)) == (((uint32_t)(16))<<((unsigned)27))");
    }
    r11 = "((m->g->strip[esub])&((uint32_t)0xf8000000UL)) == (((uint32_t)(17))<<((unsigned)27))";
    goto loc_8f660048;

loc_8f660048:
    asm{ stm        sp, {r4, sb} };
    r0 = loc_ffffffff8f65fa74(r7, r6, r10, r8);
    if (r0 != 0x0) goto loc_8f6601b4;

loc_8f660068:
    r3 = *r7;
    r5 = r5 << r4 * 0x4;
    r3 = *(r3 + 0x4);
    if ((*(r3 + r4 * 0x4) & 0xf8000000) == 0x90000000) goto loc_8f6601b0;

loc_8f660084:
    r5 = r5 + 0x4;
    r12 = r4 + 0x1;
    if ((*(r3 + r5) & 0xf8000000) != 0x88000000) {
            loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x2c9, r11);
            r12 = r12;
    }
    r3 = *r7;
    r8 = r4 + 0x2;
    r3 = *(r3 + 0x4);
    r4 = *(r3 + r5);
    r4 = (r4 & !0xf8000000) + r12;
    r3 = *(r3 + r4 * 0x4);
    r3 = r3 & 0xf8000000;
    if (r3 == 0x88000000) {
            r4 = r4 - 0x1;
    }
    if ((!CPU_FLAGS & E) && (r3 != 0x90000000)) {
            loc_ffffffff8f6484ac(stack[2033], "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x2cf, "((m->g->strip[esub])&((uint32_t)0xf8000000UL)) == (((uint32_t)(18))<<((unsigned)27))");
    }
    goto loc_8f660048;

loc_8f66015c:
    r1 = *(r7 + 0x8);
    r2 = *(r7 + 0xc);
    r0 = r7;
    r11 = (r11 & !0xf8000000) << (r11 & !0xf8000000) * 0x10;
    r2 = r6 - r2;
    asm{ ldrd       r4, r5, [r1, #0x8] };
    asm{ strd       r2, r3, [r1, #0x8] };
    r1 = r6;
    r2 = r10;
    asm{ stm        sp, {r3, sb} };
    r3 = r8;
    r0 = loc_ffffffff8f65fa74(r0, r1, r2, r3);
    if (r0 == 0x0) {
            r3 = *(r7 + 0x8);
    }
    if (CPU_FLAGS & E) {
            asm{ strdeq     r4, r5, [fp, #0x8] };
    }
    goto loc_8f6601b4;

loc_8f65ff34:
    r0 = r7;
    r1 = r6;
    r3 = r8;
    asm{ stm        sp, {r2, sb} };
    r0 = loc_ffffffff8f65fa74(r0, r1, r10, r3);
    if (r0 != 0x0) goto loc_8f6601b4;

loc_8f65ff58:
    r8 = (r11 & !0xf8000000) + r8;
    goto loc_8f65faa8;

