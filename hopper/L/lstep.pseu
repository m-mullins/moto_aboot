    r8 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    COND = r10 != 0x0;
    s0 = lr;
    r6 = arg1;
    stack[2034] = arg2;
    r7 = arg4;
    r4 = arg5;
    stack[2037] = *0x8f7112f4;
    if (!COND) {
            loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x3c7, "g != ((void *)0)");
    }
    r5 = r6;
    stack[2033] = r7 - 0x100 - 0x2;
    goto loc_8f65e544;

loc_8f65e544:
    if (r6 == stack[2034]) goto loc_8f65e8c0;

loc_8f65e550:
    r11 = *(*(r10 + 0x4) + r6 * 0x4);
    r2 = r11 & 0xf8000000;
    if (r2 == 0x50000000) goto loc_8f65e714;

loc_8f65e564:
    if (CPU_FLAGS & A) goto loc_8f65e5cc;

loc_8f65e568:
    r3 = r5 + 0x1;
    if (r2 == 0x28000000) goto loc_8f65e6d0;

loc_8f65e574:
    if (CPU_FLAGS & A) goto loc_8f65e5a4;

loc_8f65e578:
    if (r2 == 0x10000000) goto loc_8f65e694;

loc_8f65e580:
    if (CPU_FLAGS & A) goto loc_8f65e590;

loc_8f65e584:
    if (r2 == 0x8000000) {
            if (r6 != stack[2034] - 0x1) {
                    loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x3cd, "pc == stop-1");
            }
    }
    goto loc_8f65e8b4;

loc_8f65e8b4:
    r6 = r6 + 0x1;
    r5 = r5 + 0x1;
    goto loc_8f65e544;

loc_8f65e590:
    if (r2 == 0x18000000) goto loc_8f65e6a0;

loc_8f65e598:
    if (r2 == 0x20000000) goto loc_8f65e6b0;
    goto loc_8f65e8b4;

loc_8f65e6b0:
    if (stack[2033] > 0x1) goto loc_8f65e8b4;

loc_8f65e708:
    r1 = *(r4 + r3);
    r2 = *(r8 + r5);
    goto loc_8f65e8ac;

loc_8f65e8ac:
    *(r4 + r3) = r1 | r2;
    goto loc_8f65e8b4;

loc_8f65e6a0:
    CMP(r7 & !0x2, 0x101);
    goto loc_8f65e6c8;

loc_8f65e6c8:
    if (CPU_FLAGS & NE) goto loc_8f65e8b4;
    goto loc_8f65e708;

loc_8f65e694:
    CMP(r7, zero_extend_32(r11));
    goto loc_8f65e6c8;

loc_8f65e5a4:
    if (r2 == 0x38000000) goto loc_8f65e8a4;

loc_8f65e5ac:
    if (CPU_FLAGS & A) goto loc_8f65e5bc;

loc_8f65e5b0:
    if (r2 == 0x30000000) goto loc_8f65e6dc;
    goto loc_8f65e8b4;

loc_8f65e6dc:
    r2 = *(r10 + 0x10);
    if ((r7 > 0xff) || ((*(*(r2 + (r11 & !0xf8000000) * 0x10) + zero_extend_32(r7)) & *(0x4 + r2 + (r11 & !0xf8000000) * 0x10)) == 0x0)) goto loc_8f65e8b4;
    goto loc_8f65e708;

loc_8f65e5bc:
    if (r2 == 0x40000000) goto loc_8f65e8a4;

loc_8f65e5c4:
    CMP(r2, 0x48000000);
    goto loc_8f65e620;

loc_8f65e620:
    if (CPU_FLAGS & E) goto loc_8f65e8a4;
    goto loc_8f65e8b4;

loc_8f65e8a4:
    r1 = *(r4 + r3);
    r2 = *(r4 + r5);
    goto loc_8f65e8ac;

loc_8f65e6d0:
    if (r7 > 0xff) goto loc_8f65e8b4;
    goto loc_8f65e708;

loc_8f65e5cc:
    if (r2 == 0x78000000) goto loc_8f65e75c;

loc_8f65e5d4:
    if (CPU_FLAGS & A) goto loc_8f65e628;

loc_8f65e5d8:
    r3 = r5 + 0x1;
    if (r2 == 0x60000000) goto loc_8f65e8a4;

loc_8f65e5e4:
    if (CPU_FLAGS & A) goto loc_8f65e614;

loc_8f65e5e8:
    if (r2 != 0x58000000) goto loc_8f65e8b4;

loc_8f65e5f0:
    r11 = r5 + (r11 & !0xf8000000);
    *(r4 + r3) = *(r4 + r3) | *(r4 + r5);
    r2 = *(r4 + r11);
    r3 = *(r4 + r5);
    goto loc_8f65e894;

loc_8f65e894:
    *(r4 + r11) = r2 | r3;
    goto loc_8f65e8b4;

loc_8f65e614:
    if (r2 == 0x68000000) goto loc_8f65e8a4;

loc_8f65e61c:
    CMP(r2, 0x70000000);
    goto loc_8f65e620;

loc_8f65e628:
    if (r2 == 0x90000000) goto loc_8f65e8a0;

loc_8f65e630:
    if (CPU_FLAGS & A) goto loc_8f65e648;

loc_8f65e634:
    if (r2 == 0x80000000) goto loc_8f65e7ac;

loc_8f65e63c:
    if (r2 == 0x88000000) goto loc_8f65e828;
    goto loc_8f65e8b4;

loc_8f65e828:
    r11 = r11 & !0xf8000000;
    r12 = r4 + r5;
    *(r4 + r5 + 0x1) = *(r4 + r5 + 0x1) | *(r4 + r5);
    r3 = *(r10 + 0x4);
    r3 = *(r3 + (r11 + r6) * 0x4);
    r3 = r3 & 0xf8000000;
    if (r3 == 0x90000000) goto loc_8f65e8b4;

loc_8f65e85c:
    if (r3 != 0x88000000) {
            loc_ffffffff8f6484ac();
            r12 = r12;
    }
    goto loc_8f65e888;

loc_8f65e888:
    r11 = r5 + r11;
    r3 = *r12;
    r2 = *(r4 + r11);
    goto loc_8f65e894;

loc_8f65e7ac:
    stack[2035] = r4 + r5;
    if (*(r4 + r5) != 0x0) {
            r11 = 0x1;
    }
    if (CPU_FLAGS & E) goto loc_8f65e8b4;

loc_8f65e7c4:
    do {
            r12 = *(*(r10 + 0x4) + (r11 + r6) * 0x4);
            r3 = r12 & 0xf8000000;
            if (r3 == 0x90000000) {
                break;
            }
            if (r3 != 0x88000000) {
                    loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x414, "((s)&((uint32_t)0xf8000000UL)) == (((uint32_t)(17))<<((unsigned)27))");
                    r12 = r12;
            }
            r11 = r11 + (r12 & !0xf8000000);
    } while (true);
    r11 = r11 + r5;
    r2 = *(r4 + r11);
    r3 = *stack[2035];
    goto loc_8f65e894;

loc_8f65e648:
    r3 = r5 + 0x1;
    if (r2 == 0x98000000) goto loc_8f65e6c0;

loc_8f65e654:
    if (r2 == 0xa0000000) {
            r2 = 0x106;
    }
    if (CPU_FLAGS & E) goto loc_8f65e6c4;
    goto loc_8f65e8b4;

loc_8f65e6c4:
    CMP(r7, r2);
    goto loc_8f65e6c8;

loc_8f65e6c0:
    r2 = 0x105;
    goto loc_8f65e6c4;

loc_8f65e8a0:
    r3 = r5 + 0x1;
    goto loc_8f65e8a4;

loc_8f65e75c:
    r11 = r11 & !0xf8000000;
    r12 = r4 + r5;
    *(r4 + r5 + 0x1) = *(r4 + r5 + 0x1) | *(r4 + r5);
    if ((*(*(r10 + 0x4) + (r11 + r6) * 0x4) & 0xf8000000) != 0x88000000) {
            loc_ffffffff8f6484ac();
            r12 = r12;
    }
    goto loc_8f65e888;

loc_8f65e714:
    r11 = r11 & !0xf8000000;
    *(r4 + r5 + 0x1) = *(r4 + r5 + 0x1) | *(r4 + r5);
    r2 = *(r4 + (r5 - r11));
    r3 = *(r4 + r5);
    r3 = r2 | r3;
    *(r4 + (r5 - r11)) = r3;
    if (r2 == 0x0) {
            if (r3 != 0x0) {
                    r6 = r6 - r11;
            }
            if (CPU_FLAGS & NE) {
                    r6 = r6 - 0x1;
            }
            if (CPU_FLAGS & NE) {
                    r5 = r6;
            }
    }
    goto loc_8f65e8b4;

loc_8f65e8c0:
    r0 = r4;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

