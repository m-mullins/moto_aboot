    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x3c;
    r3 = *0x8f7112f4;
    r11 = arg0;
    stack[2037] = r3;
    r8 = loc_ffffffff8f60155c(arg0, arg1, arg2, r3, stack[2024]);
    r0 = loc_ffffffff8f65385c(r11);
    COND = r10 == 0x0;
    if (CPU_FLAGS & E) goto loc_8f620344;

loc_8f61fee0:
    stack[2028] = *(r10 + 0x20) | *(r10 + 0x21) * 0x100 | *(r10 + 0x22) * 0x10000 | *(r10 + 0x23) * 0x1000000;
    r2 = *(r10 + 0x25);
    r3 = *(r10 + 0x24);
    r6 = r6 << stack[2028] * 0x200;
    r3 = r3 | r2 * 0x100 | *(r10 + 0x26) * 0x10000;
    r2 = *(r10 + 0x27);
    r7 = r7 << (r3 | r2 * 0x1000000) * 0x200 | stack[2028] / 0x800000;
    loc_ffffffff8f6062c0(0x4);
    r3 = *0x8f7125ec;
    r4 = *(r3 + 0x8);
    if (loc_ffffffff8f61fe3c(r8, r4) != 0x0) {
            r3 = 0x473;
    }
    if (CPU_FLAGS & NE) goto loc_8f6202f8;

.l22:
    if (CPU_FLAGS & NE) goto loc_8f620114;

loc_8f61ffc4:
    r1 = *(r8 + 0x24);
    r2 = r1 + r1;
    r3 = 0x0 + CARRY(FLAGS);
    r2 = r2 + (r1 + *(r8 + 0x8) - 0x1 & 0x0 - r1);
    r3 = r3 + 0x0 + CARRY(FLAGS);
    r2 = r2 + (r1 + *(r8 + 0x10) - 0x1 & 0x0 - r1);
    r3 = r3 + 0x0 + CARRY(FLAGS);
    r2 = r2 + (r1 + *(r8 + 0x18) - 0x1 & 0x0 - r1);
    r3 = r3 + 0x0 + CARRY(FLAGS);
    r4 = r2 + (r1 + *(r8 + 0x28) - 0x1 & 0x0 - r1);
    r2 = 0x0 ^ 0xffffffff;
    if (r3 + 0x0 + CARRY(FLAGS) == 0x0) {
            CMP(r4, r2);
    }
    asm{ strd       r4, r5, [sp, #0x60 + var_48] };
    if (CPU_FLAGS & A) goto loc_8f620114;

loc_8f620058:
    r2 = *(r10 + 0x28) | *(r10 + 0x29) * 0x100 | *(r10 + 0x2a) * 0x10000 | *(r10 + 0x2b) * 0x1000000;
    r2 = r2 + 0x1;
    r3 = *(r10 + 0x2c) | *(r10 + 0x2d) * 0x100 | *(r10 + 0x2e) * 0x10000 | *(r10 + 0x2f) * 0x1000000;
    r3 = r3 + 0x0 + CARRY(FLAGS);
    r4 = *(r10 + 0x20) | *(r10 + 0x21) * 0x100 | *(r10 + 0x22) * 0x10000 | *(r10 + 0x23) * 0x1000000;
    r0 = *(r10 + 0x25);
    r1 = *(r10 + 0x24);
    r1 = r1 | r0 * 0x100 | *(r10 + 0x26) * 0x10000;
    r0 = *(r10 + 0x27);
    r2 = r2 - r4;
    r4 = r4 << r2 * 0x200;
    r5 = (r1 | r0 * 0x1000000) << (r3 - (r1 | r0 * 0x1000000) + !CARRY(FLAGS)) * 0x200 | r2 / 0x800000;
    r0 = loc_ffffffff8f67428c(r10, r1, r2, r3 - (r1 | r0 * 0x1000000) + !CARRY(FLAGS));
    r2 = r4 - r0;
    r3 = r5 - r0 / 0x80000000 + !CARRY(FLAGS);
    asm{ ldrd       r4, r5, [sp, #0x60 + var_48] };
    r0 = r2;
    if (r5 == r3) {
            CMP(r4, r0);
    }
    if (CPU_FLAGS & B) goto loc_8f62011c;

loc_8f620114:
    loc_ffffffff8f656968();
    goto loc_8f62034c;

loc_8f62034c:
    r4 = 0x0 ^ 0xffffffff;
    goto loc_8f62038c;

loc_8f62038c:
    r0 = r4;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f62011c:
    if (loc_ffffffff8f61fe3c(r8, stack[2030]) != 0x0) {
            r3 = 0x493;
    }
    if (CPU_FLAGS & NE) goto loc_8f6202f8;

loc_8f620134:
    r1 = r7;
    stack[2024] = r8;
    r0 = r6;
    r5 = SAR(r5, stack[2030] / 0x80000000);
    r2 = stack[2030];
    asm{ strd       r4, r5, [sp, #0x60 + var_38] };
    r3 = r5;
    r0 = loc_ffffffff8f6507a4(r0, r1, r2, r3, stack[2024]);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f620344;

loc_8f620168:
    if (loc_ffffffff8f674320() == 0x0) goto loc_8f6201f8;

loc_8f620174:
    if (((loc_ffffffff8f674b74() != 0x0) && (loc_ffffffff8f673228() != 0x0)) && (loc_ffffffff8f674a88() == 0x0)) {
            loc_ffffffff8f61e8ec();
            (*(0x8f6ac374 + 0x4))("orange_screen", 0x1);
            r0 = loc_ffffffff8f61ac4c(0x8f7114d4);
            r2 = *0x8f7114f0;
            r3 = *(0x8f6ac374 + 0x4);
            if (r2 != 0x0) {
                    r0 = "logo_screen";
            }
            if (CPU_FLAGS & E) {
                    r0 = "fastboot_screen";
            }
            (r3)(r0);
            if (*0x8f7114f0 == 0x0) {
                    r4 = 0x1;
            }
            if (!CPU_FLAGS & E) {
                    loc_ffffffff8f6062c0(0x5);
            }
    }
    else {
            loc_ffffffff8f6062c0(0x5);
    }
    goto loc_8f62038c;

loc_8f6201f8:
    asm{ ldrd       r2, r3, [sp, #0x60 + var_40] };
    asm{ ldrd       r4, r5, [sp, #0x60 + var_50] };
    r2 = r2 + 0x1;
    r3 = r3 + 0x0 + CARRY(FLAGS);
    r2 = r2 - r4;
    r3 = r3 - r5 + !CARRY(FLAGS);
    s0 = r8 + stack[2030];
    r4 = r4 << r2 * 0x200;
    r5 = r5 << r3 * 0x200 | r2 / 0x800000;
    r2 = stack[2030];
    r1 = r4 - r2;
    if (loc_ffffffff8f6745c4(r10) == 0x0) goto loc_8f6202e4;

loc_8f62023c:
    r0 = loc_ffffffff8f67428c(r10);
    stack[2027] = r1 + (0xfffffc00 - r0);
    loc_ffffffff8f64adc8(s0, 0xff, r1 + (0xfffffc00 - r0), r1 + (0xfffffc00 - r0), stack[2024]);
    r3 = stack[2027];
    s0 = s0 + r3;
    if (loc_ffffffff8f61fe3c(s0, loc_ffffffff8f67428c(r10) + 0x400) != 0x0) {
            r3 = 0x4ab;
    }
    if (CPU_FLAGS & NE) goto loc_8f6202f8;

loc_8f620294:
    r6 = r6 + r4;
    r7 = r7 + r5 + CARRY(FLAGS);
    r0 = loc_ffffffff8f67428c(r10);
    r6 = r6 - r0 + 0x400;
    r7 = r7 - (r0 + 0x400) / 0x80000000 + !CARRY(FLAGS);
    r0 = loc_ffffffff8f67428c(r10);
    if (CPU_FLAGS & E) goto loc_8f620354;

loc_8f620344:
    loc_ffffffff8f656968();
    goto loc_8f62034c;

loc_8f620354:
    loc_ffffffff8f6062c0(0x5);
    if (stack[2037] == *0x8f7112f4) {
            r0 = loc_ffffffff8f673264(r10, r8, r4, 0x0, stack[2048]);
    }
    else {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f6202f8:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "%s:%s(%d): Address overlap with aboot address.\n", "app/mbm/linux_boot.c", "load_and_validate_kernel_image", r3);
    goto loc_8f62034c;

loc_8f6202e4:
    r0 = loc_ffffffff8f61fe3c(s0);
    if (r0 == 0x0) goto loc_8f620314;

loc_8f6202f4:
    r3 = 0x4b4;
    goto loc_8f6202f8;

loc_8f620314:
    asm{ ldrd       r0, r1, [sp, #0x60 + var_38] };
    asm{ ldrd       r2, r3, [sp, #0x60 + var_38] };
    r0 = r0 + r6;
    r1 = r1 + r7 + CARRY(FLAGS);
    r2 = r4 - r2;
    if (loc_ffffffff8f6507a4(r0, r1, r2, r5 - r3 + !CARRY(FLAGS), s0) == 0x0) goto loc_8f620354;

