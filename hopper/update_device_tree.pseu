    s0 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x124;
    r8 = arg0;
    r7 = arg1;
    r10 = arg2;
    r3 = *0x8f7112f4;
    stack[2037] = r3;
    r0 = loc_ffffffff8f64b880(arg0, arg1, arg2, r3, stack[1966]);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615770;

loc_8f615614:
    r0 = *(r8 + 0x4);
    r0 = loc_ffffffff8f612f08(r0);
    r0 = loc_ffffffff8f64d30c(r8, r8, r0 + 0x1000);
    COND = r4 == 0x0;
    if (COND) goto loc_8f615648;

loc_8f615634:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Failed to move/resize dtb buffer: %d\n", r4);
    goto loc_8f615eac;

loc_8f615eac:
    r0 = r4;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f615648:
    if (loc_ffffffff8f612f5c(r8, 0x1) != -0x1) goto loc_8f615664;

loc_8f61565c:
    r4 = 0x0 ^ 0xffffffff;
    goto loc_8f615eac;

loc_8f615664:
    r5 = 0x8f6ac0c0;
    r11 = *(r5 + 0x4);
    r6 = r5;
    r0 = loc_ffffffff8f60145c(r8, r11);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615770;

loc_8f61568c:
    r0 = loc_ffffffff8f615234(r8, r11);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615770;

loc_8f6156a8:
    if (loc_ffffffff8f612f5c(r8, 0x2) == -0x1) goto loc_8f61565c;

loc_8f6156bc:
    r5 = *(r5 + 0x8);
    r0 = loc_ffffffff8f64cd54(r8, r5, "mmi,reserve", 0x800);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615770;

loc_8f6156e4:
    if (r7 == 0x0) goto loc_8f615720;

loc_8f6156ec:
    r0 = loc_ffffffff8f64b354(r7);
    r0 = loc_ffffffff8f64cfb0(r8, r5, "bootargs", r7, r0 + 0x1);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615770;

loc_8f615720:
    if (s0 == 0x0) goto loc_8f615778;

loc_8f615728:
    r0 = loc_ffffffff8f613764(r8, r5, "linux,initrd-start", r10);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615770;

loc_8f61574c:
    r0 = loc_ffffffff8f613764(r8, r5, "linux,initrd-end", r10 + s0);
    COND = r4 == 0x0;
    if (COND) goto loc_8f615778;

loc_8f615770:
    loc_ffffffff8f656968();
    goto loc_8f615eac;

loc_8f615778:
    r5 = loc_ffffffff8f63787c();
    r11 = loc_ffffffff8f61a43c();
    r10 = loc_ffffffff8f61a280();
    loc_ffffffff8f64adc8(sp + 0x44, 0x0, 0x11);
    loc_ffffffff8f64adc8(sp + 0x58, 0x0, 0x11);
    if (loc_ffffffff8f612f5c(r8, 0x2) != -0x1) goto loc_8f6157dc;

loc_8f6157d4:
    r4 = 0x0 ^ 0xffffffff;
    goto loc_8f615ea4;

loc_8f615ea4:
    loc_ffffffff8f64d548(r8);
    goto loc_8f615eac;

loc_8f6157dc:
    s0 = *(r6 + 0x8);
    r0 = loc_ffffffff8f613764(r8, s0, "mmi,powerup_reason", r5);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615804:
    loc_ffffffff8f656968(0x1, "Powerup reason for kernel: 0x%08X\n", r5);
    r0 = loc_ffffffff8f613764(r8, s0, "mmi,mbmversion", 0x8104);
    COND = r4 == 0x0;
    if (COND) goto loc_8f615840;

loc_8f615838:
    loc_ffffffff8f656968();
    goto loc_8f615ea4;

loc_8f615840:
    r0 = loc_ffffffff8f657dec();
    r0 = loc_ffffffff8f613764(r8, s0, "mmi,boot_seq", r0);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615868:
    r0 = loc_ffffffff8f613764(r8, s0, 0x8f680619, r11);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f61588c:
    if (loc_ffffffff8f606ff4(sp + 0x38, 0x8) == 0x0) {
            r3 = stack[1980];
            asm{ rev        r3, r3 };
            stack[1980] = r3;
            r3 = stack[1981];
            asm{ rev        r3, r3 };
            stack[1981] = r3;
    }
    else {
            stack[1980] = r4;
            stack[1981] = loc_ffffffff8f60b648();
    }
    loc_ffffffff8f656968(0x2, "CPU UID %08x%08x\n", stack[1980], stack[1981]);
    r0 = loc_ffffffff8f613764(r8, s0, "linux,seriallow", stack[1981]);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615900:
    r0 = loc_ffffffff8f613764(r8, s0, "linux,serialhigh", stack[1980]);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615924:
    r0 = loc_ffffffff8f613764(r8, s0, "mmi,prod_id", r10);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615948:
    r4 = loc_ffffffff8f600d34();
    loc_ffffffff8f600d34();
    stack[1966] = loc_ffffffff8f64b354() + 0x1;
    r0 = loc_ffffffff8f64cde0(r8, s0, 0x8f68072d, r4, stack[1966]);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615984:
    if (loc_ffffffff8f61e414() != 0x4) goto loc_8f615ec8;

loc_8f615990:
    r0 = loc_ffffffff8f613764(r8, s0, "mmi,factory-cable", 0x1);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f6159b4:
    if (loc_ffffffff8f64fdf4() == 0x0) goto loc_8f615ec8;

loc_8f6159c0:
    r0 = loc_ffffffff8f613764(r8, s0, 0x8f6807a3, 0x1);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f6159e4:
    loc_ffffffff8f656968(0x1, "UTAG set to enable bare_board, set \"mmi,bare_board\" to 1\n");
    r0 = loc_ffffffff8f613980(r8);
    if (r0 < 0x0) goto loc_8f615ea0;

loc_8f615a00:
    if (loc_ffffffff8f612f5c(r8, 0x2) == -0x1) goto loc_8f6157d4;

loc_8f615a14:
    s0 = *(r6 + 0x8);
    goto loc_8f615a18;

loc_8f615a18:
    r5 = loc_ffffffff8f64fe30();
    r0 = loc_ffffffff8f613764(r8, s0, 0x8f6808da, r5);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615a44:
    loc_ffffffff8f656968(0x1, "Set \"mmi,auto_detect_state\" to 0x%x\n", r5);
    r0 = loc_ffffffff8f6798a8(r4, 0x8f680949);
    r5 = r0;
    if (((r0 != 0x1) || (loc_ffffffff8f6797bc(r4, 0x8f680949, sp + 0x16, r5) == 0x0)) || (0x0 != 0x0)) goto loc_8f615ac0;

loc_8f615a94:
    r0 = loc_ffffffff8f613764(r8, s0, 0x8f680945);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615ab4:
    loc_ffffffff8f656968(r5, "UTAG set to disable esd, set \"mmi,esd\" to 0\n");
    goto loc_8f615ac0;

loc_8f615ac0:
    stack[1982] = 0x30;
    r6 = loc_ffffffff8f64d2b4(r8, s0, "mmi,bl_sigs", 0x30, stack[1966]);
    r0 = loc_ffffffff8f64cd54(r8, r6, "mmi,reserve", 0x100);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615b00:
    loc_ffffffff8f6516d0(0x8f6809a6, 0x8f6137d0, sp + 0x30);
    stack[1966] = loc_ffffffff8f64b354(sp + 0x6c) + 0x1;
    loc_ffffffff8f64cde0(r8, r6, sp + 0x40, sp + 0x6c, stack[1966]);
    loc_ffffffff8f6516d0(0x8f6809ab, 0x8f6137d0, sp + 0x30, stack[1982] + 0x1, stack[1966], stack[1967]);
    stack[1966] = loc_ffffffff8f64b354(sp + 0x6c) + 0x1;
    loc_ffffffff8f64cde0(r8, r6, sp + 0x40, sp + 0x6c, stack[1966]);
    loc_ffffffff8f6516d0(0x8f6809af, 0x8f6137d0, sp + 0x30, stack[1982] + 0x2, stack[1966], stack[1967]);
    stack[1966] = loc_ffffffff8f64b354(sp + 0x6c) + 0x1;
    loc_ffffffff8f64cde0(r8, r6, sp + 0x40, sp + 0x6c, stack[1966]);
    loc_ffffffff8f6516d0(0x8f6809b2, 0x8f6137d0, sp + 0x30, stack[1982] + 0x3, stack[1966], stack[1967]);
    stack[1966] = loc_ffffffff8f64b354(sp + 0x6c) + 0x1;
    loc_ffffffff8f64cde0(r8, r6, sp + 0x40, sp + 0x6c, stack[1966]);
    r3 = stack[1982] + 0x4;
    loc_ffffffff8f6516d0("aboot", 0x8f6137d0, sp + 0x30, r3, stack[1966], stack[1967]);
    r0 = loc_ffffffff8f64b354(sp + 0x6c);
    loc_ffffffff8f64cde0(r8, r6, sp + 0x40, sp + 0x6c, r0 + 0x1);
    if (loc_ffffffff8f613b90("battery", sp + 0x44) == 0x0) goto loc_8f615cb8;

loc_8f615c74:
    r0 = loc_ffffffff8f64b354(sp + 0x44);
    r0 = loc_ffffffff8f64cde0(r8, s0, 0x8f6809bc, sp + 0x44, r0 + 0x1);
    COND = r5 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615d00;

loc_8f615ca8:
    loc_ffffffff8f656968(0x2, "Set \"mmi,battery\" to %s\n", sp + 0x44);
    goto loc_8f615cb8;

loc_8f615cb8:
    if (loc_ffffffff8f613b90(0x8f680a09, sp + 0x58) == 0x0) goto loc_8f615d1c;

loc_8f615ccc:
    r0 = loc_ffffffff8f64b354(sp + 0x58);
    r0 = loc_ffffffff8f64cde0(r8, s0, "mmi,battid", sp + 0x58, r0 + 0x1);
    COND = r5 == 0x0;
    if (COND) goto loc_8f615d0c;

loc_8f615d00:
    loc_ffffffff8f656968();
    r4 = r5;
    goto loc_8f615ea4;

loc_8f615d0c:
    loc_ffffffff8f656968(0x2, "Set \"mmi,battid\" to %s\n", sp + 0x58);
    goto loc_8f615d1c;

loc_8f615d1c:
    r0 = loc_ffffffff8f6798a8(0x0, "disable-reset");
    r5 = r0;
    if (((r0 == 0x1) && (loc_ffffffff8f6797bc(0x0, "disable-reset", sp + 0x17, r5) != 0x0)) && (0x0 != 0x0)) {
            loc_ffffffff8f656968(r5, "Disabling user reset!\n");
            r0 = loc_ffffffff8f612f5c(r8, 0x3);
            if (r0 != -0x1) {
                    r0 = loc_ffffffff8f64c6d8(r8, *(0x8f6ac0c0 + 0xc), "qcom,qpnp-power-on", 0x8f6ac0c0);
                    COND = r6 < 0x0;
                    if (!CPU_FLAGS & L) {
                            r0 = loc_ffffffff8f64c090(r8, r6, "qcom,pon_1");
                            COND = r6 >= 0x0;
                            if (!COND) {
                                    loc_ffffffff8f656968();
                                    r4 = r6;
                            }
                            else {
                                    r0 = loc_ffffffff8f64c438(r8, r6, "qcom,support-reset", 0x0);
                                    if (r0 == 0x0) {
                                            r0 = r5;
                                    }
                                    if (!CPU_FLAGS & E) {
                                            r5 = *r0;
                                            r0 = 0x2;
                                            r1 = "found qcom,support-reset: %d\n";
                                            asm{ rev        r5, r5 };
                                            loc_ffffffff8f656968(r0, r1, r5);
                                            if (r5 == 0x1) {
                                                    r0 = loc_ffffffff8f613764(r8, r6, "qcom,support-reset", 0x0);
                                                    COND = r4 == 0x0;
                                                    if (!COND) {
                                                            loc_ffffffff8f656968();
                                                    }
                                            }
                                    }
                                    else {
                                            loc_ffffffff8f656968();
                                    }
                            }
                    }
                    else {
                            loc_ffffffff8f656968();
                            r4 = r6;
                    }
            }
            else {
                    r4 = r0;
            }
    }
    loc_ffffffff8f6556d4(0x1, r8, s0);
    goto loc_8f615ea4;

loc_8f615ea0:
    r4 = r0;
    goto loc_8f615ea4;

loc_8f615ec8:
    r0 = loc_ffffffff8f633874();
    COND = r10 == 0x0;
    if (COND) goto loc_8f615a18;

loc_8f615ed4:
    r0 = loc_ffffffff8f6153f0(r8, r10);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f615ef0:
    if (loc_ffffffff8f612f5c(r8, 0x2) == -0x1) goto loc_8f6157d4;

loc_8f615f04:
    r5 = r10 + 0x8;
    s0 = *(r6 + 0x8);
    stack[1966] = loc_ffffffff8f64b354(r5) + 0x1;
    r0 = loc_ffffffff8f64cde0(r8, s0, "mmi,panel_name", r5, stack[1966]);
    COND = r4 == 0x0;
    if (COND) goto loc_8f615e5c;
    goto loc_8f615838;

loc_8f615e5c:
    loc_ffffffff8f656968(0x1, "Set \"mmi,panel_name\" to %s\n", r5);
    r0 = loc_ffffffff8f64fdf4();
    COND = r11 == 0x0;
    if (COND) goto loc_8f615f44;

loc_8f615e78:
    r3 = *(r10 + 0x1f4);
    if ((r3 == 0x0) || (*(r3 + 0x25) != 0x0)) goto loc_8f615a18;

loc_8f615e90:
    r0 = loc_ffffffff8f613980(r8);
    if (r0 >= 0x0) goto loc_8f616044;
    goto loc_8f615ea0;

loc_8f616044:
    if (loc_ffffffff8f612f5c(r8, 0x2) == -0x1) goto loc_8f6157d4;

loc_8f616058:
    s0 = *(0x8f6ac0c0 + 0x8);
    goto loc_8f615a18;

loc_8f615f44:
    loc_ffffffff8f610288(r10, sp + 0x18);
    r12 = 0xfffffef8;
    r1 = *(r12 + sp + 0x120);
    r0 = r8;
    r3 = *(r12 + sp + 0x124);
    stack[1977] = r3;
    r3 = r3 << r1 * 0x1000000;
    r7 = r1 << r1 * 0x100 & 0xff0000;
    r1 = s0;
    r7 = (r7 | r3) << stack[1977] * 0x100 | r7 | r3 | 0x0;
    r2 = "mmi,panel_ver";
    asm{ strd       r4, r5, [lr, r3] };
    stack[1966] = 0x8;
    r0 = loc_ffffffff8f64cde0(r0, r1, r2, sp + 0x20, stack[1966]);
    COND = r4 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f615838;

loc_8f61602c:
    r0 = 0x1;
    r1 = "Set \"mmi,panel_ver\" to 0x%llx\n";
    asm{ ldrd       r2, r3, [lr, ip] };
    loc_ffffffff8f656968(r0, r1);
    goto loc_8f615e78;

