    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x1c;
    r4 = lr;
    stack[2041] = *0x8f7112f4;
    r0 = loc_ffffffff8f6359f4(arg0);
    asm{ strd       r2, r3, [sp, #0x30 + var_28] };
    COND = r6 == 0x0;
    if (COND) goto loc_8f6367fc;

loc_8f636754:
    loc_ffffffff8f656968(0x1, "Pruning SOD...\n");
    if (loc_ffffffff8f6364dc() != 0x0) {
            loc_ffffffff8f6356d0();
    }
    r3 = 0x0;
    r2 = sp + 0x8;
    loc_ffffffff8f634d98(0x0, 0x0, r2);
    asm{ ldrd       r2, r3, [sp, #0x30 + var_28] };
    COND = r1 != 0x0;
    if (!COND) {
            r2 = "app/mbm/sod.c";
            r3 = 0x425;
            loc_ffffffff8f6484ac(r4, "ASSERT FAILED at (%s:%d): %s\n", r2, r3, "udata_size");
    }
    asm{ ldrd       r2, r3, [sp, #0x30 + var_28] };
    r0 = r6;
    asm{ ldrd       r4, r5, [r6, #0x18] };
    r1 = *(r6 + 0x10);
    r2 = r2 + r4;
    r3 = r3 + r5 + CARRY(FLAGS);
    r2 = r2 + r1;
    r3 = r3 + 0x0 + CARRY(FLAGS);
    asm{ strd       r2, r3, [sp, #0x30 + var_28] };
    r0 = loc_ffffffff8f634e38(r0, r1, r2, r3);
    if (r0 != 0x0) goto loc_8f636800;

loc_8f6367d8:
    asm{ ldrd       r0, r1, [sp, #0x30 + var_28] };
    r0 = loc_ffffffff8f634f04();
    COND = r6 != 0x0;
    if (!COND) {
            r0 = *0x8f6e0794;
            loc_ffffffff8f64ab9c(r0);
            *0x8f6e0794 = r6;
    }
    goto loc_8f6367fc;

loc_8f6367fc:
    r0 = r6;
    goto loc_8f636800;

loc_8f636800:
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

