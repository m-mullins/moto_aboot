    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0xb4;
    r3 = *0x8f7112f4;
    r5 = 0x0;
    stack[2013] = arg0;
    stack[2015] = lr;
    stack[2014] = arg2;
    stack[2037] = r3;
    stack[2020] = arg0 + arg1;
    stack[2022] = r5;
    r0 = loc_ffffffff8f64aacc(0xc, arg0 + arg1, arg2, r3, stack[1994], stack[1995], stack[1996]);
    COND = r10 != 0x0;
    if (COND) goto loc_8f613f40;

loc_8f613f2c:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Out of memory\n");
    r0 = r10;
    goto loc_8f6140f8;

loc_8f6140f8:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f613f40:
    *(r10 + 0x4) = r10;
    *r10 = r10;
    loc_ffffffff8f64ac90(sp + 0x70, stack[2013] + 0x2c, 0x4);
    r3 = stack[2013] + stack[2022];
    COND = r3 >= 0x0;
    if (COND) goto loc_8f6140f4;

loc_8f613f6c:
    stack[2006] = r3;
    goto loc_8f613f70;

loc_8f613f70:
    if (stack[2006] + 0x28 >= stack[2020]) goto loc_8f614010;

loc_8f613f84:
    loc_ffffffff8f64ac90(sp + 0x84, stack[2006], 0x28);
    if (loc_ffffffff8f64b880(sp + 0x84) != 0x0) goto loc_8f614010;

loc_8f613fa4:
    r0 = loc_ffffffff8f612f08(stack[2028]);
    r3 = r0 + stack[2006];
    stack[2009] = r0;
    if ((r3 < stack[2006]) || (r3 > stack[2020])) goto loc_8f614010;

loc_8f613fcc:
    r12 = stack[2014];
    if ((r12 ^ 0xffffffff) < r0) goto loc_8f614110;

loc_8f613fdc:
    r3 = 0x8f5fffff;
    if (r12 > r3) goto loc_8f613ffc;

loc_8f613fe8:
    if (r0 + r12 > r3 + 0x1) goto loc_8f614110;

loc_8f614124:
    r0 = loc_ffffffff8f64c50c(stack[2006], 0x8f686fbc);
    COND = r5 < 0x0;
    if (COND) goto loc_8f614a30;

loc_8f614138:
    r4 = "model";
    r0 = loc_ffffffff8f64c438(stack[2006], r5, r4, sp + 0x74);
    COND = r6 == 0x0;
    if ((!COND) && (stack[2023] > 0x0)) {
            r0 = loc_ffffffff8f64aacc();
            stack[2007] = r0;
            if (r0 == 0x0) {
                    stack[1994] = r4;
                    loc_ffffffff8f6484ac(stack[2015], "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/dev_tree.c", 0xaa, stack[1994]);
            }
            loc_ffffffff8f64b2c0(stack[2007], r6, stack[2023]);
    }
    else {
            loc_ffffffff8f656968(0x1, "model does not exist in device tree\n");
            stack[2007] = 0x0;
    }
    stack[2012] = loc_ffffffff8f64c438(stack[2006], r5, "qcom,pmic-id", sp + 0x80);
    r0 = loc_ffffffff8f64c438(stack[2006], r5, "qcom,board-id", sp + 0x78, stack[1994]);
    r7 = r0;
    if (stack[2012] == 0x0) goto loc_8f61423c;

loc_8f6141f0:
    r2 = stack[2026];
    if (r2 <= 0x0) goto loc_8f61423c;

loc_8f6141fc:
    if (r0 == 0x0) goto loc_8f614270;

loc_8f614204:
    r3 = stack[2024];
    if (r3 <= 0x0) goto loc_8f614244;

loc_8f614210:
    r6 = 0x8;
    if (((r3 | r2) & 0x7) == 0x0) {
            r4 = 0x3;
    }
    if (CPU_FLAGS & E) goto loc_8f614278;

loc_8f614224:
    stack[1994] = 0x8;
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "qcom,pmic-id(%d) or qcom,board-id(%d) in device tree is not a multiple of (%d %d)\n");
    goto loc_8f614a30;

loc_8f614a30:
    stack[2006] = stack[2006] + stack[2009];
    goto loc_8f613f70;

loc_8f614278:
    r0 = loc_ffffffff8f64c438(stack[2006], r5, "qcom,msm-id", sp + 0x7c);
    COND = r5 == 0x0;
    if (COND) goto loc_8f6142f8;

loc_8f614294:
    r11 = stack[2025];
    if (r11 > 0x0) goto loc_8f6142ac;

loc_8f6142f8:
    loc_ffffffff8f656968();
    goto loc_8f614a30;

loc_8f6142ac:
    r0 = loc_ffffffff8f67b564(r11, r6);
    COND = r8 == 0x0;
    if (COND) goto loc_8f6142d8;

loc_8f6142d0:
    loc_ffffffff8f656968();
    goto loc_8f614a30;

loc_8f6142d8:
    if (r4 != 0x1) goto loc_8f614470;

loc_8f6142e0:
    r0 = loc_ffffffff8f64aacc(0x28);
    COND = r4 != 0x0;
    if (COND) goto loc_8f614300;
    goto loc_8f6142f8;

loc_8f614300:
    loc_ffffffff8f64adc8();
    while (stack[2025] != 0x0) {
            r0 = *r5;
            r0 = loc_ffffffff8f612f08(r0);
            r6 = *(r5 + 0x4);
            *r4 = r0;
            *(r4 + 0x4) = loc_ffffffff8f612f08(r6);
            *(r4 + 0xc) = loc_ffffffff8f612f08(*(r5 + 0x8));
            r0 = loc_ffffffff8f612f08(r6);
            *(r4 + 0x8) = r0 >> r0 / 0x1000000;
            *(r4 + 0x10) = loc_ffffffff8f60d860(0x0);
            *(r4 + 0x14) = loc_ffffffff8f60d860(0x1);
            *(r4 + 0x18) = loc_ffffffff8f60d860(0x2);
            r0 = loc_ffffffff8f60d860(0x3);
            r3 = *(r4 + 0x4);
            lr = "unknown";
            *(r4 + 0x20) = stack[2006];
            *(r4 + 0x24) = stack[2009];
            r12 = stack[2007];
            if (*r12 == 0x0) {
                    r12 = lr;
            }
            *(r4 + 0x1c) = r0;
            stack[1994] = r3;
            stack[1995] = *(r4 + 0xc);
            loc_ffffffff8f656968(0x2);
            r0 = loc_ffffffff8f613d10(r4, r10);
            r6 = *(r4 + 0x4);
            r7 = *r4;
            if (r0 != 0x0) {
                    loc_ffffffff8f60d6f8();
                    s0 = loc_ffffffff8f60d7ac();
                    r0 = loc_ffffffff8f60d8ac();
                    asm{ stm        sp, {r8, fp} };
                    loc_ffffffff8f656968(0x2, "Device tree exact match the board: <%u %u 0x%x> != <%u %u 0x%x>\n", r7, r6, stack[1994], stack[1995]);
            }
            else {
                    r5 = r5 + 0xc;
                    loc_ffffffff8f60d6f8();
                    s0 = loc_ffffffff8f60d7ac();
                    r0 = loc_ffffffff8f60d8ac();
                    r3 = r6;
                    asm{ stm        sp, {r8, fp} };
                    loc_ffffffff8f656968(0x2, "Device tree's msm_id doesn't match the board: <%u %u 0x%x> != <%u %u 0x%x>\n", r7, r3, stack[1994], stack[1995]);
                    stack[2025] = stack[2025] - 0xc;
            }
    }
    goto loc_8f614a18;

loc_8f614a18:
    loc_ffffffff8f64ab9c();
    goto loc_8f614a1c;

loc_8f614a1c:
    r12 = stack[2007];
    if (r12 != 0x0) {
            loc_ffffffff8f64ab9c(r12);
    }
    goto loc_8f614a30;

loc_8f614470:
    r3 = stack[2024];
    r12 = stack[2026];
    r2 = r3 + 0x7;
    if (r3 < 0x0) {
            r3 = r2;
    }
    stack[2011] = r12;
    stack[2008] = SAR(r3, r3 / 0x8);
    r0 = loc_ffffffff8f64aacc(r0 << (SAR(r3, r3 / 0x8)) * 0x8);
    stack[2017] = r0;
    if (r0 == 0x0) {
            stack[1994] = "board_data";
            loc_ffffffff8f6484ac(stack[2015], "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/dev_tree.c", 0x11f, stack[1994]);
    }
    r0 = stack[2025];
    r3 = r0 + 0x7;
    if (r0 < 0x0) {
            r0 = r3;
    }
    r0 = loc_ffffffff8f64aacc(r0 & !0x7);
    stack[2018] = r0;
    if (r0 == 0x0) {
            stack[1994] = "platform_data";
            loc_ffffffff8f6484ac(stack[2015], "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/dev_tree.c", 0x121, stack[1994]);
    }
    if (r4 != 0x3) {
            r12 = 0x0;
    }
    if (CPU_FLAGS & NE) {
            stack[2010] = r12;
    }
    if (!CPU_FLAGS & NE) {
            r3 = stack[2026];
            r0 = r3 + 0x7;
            if (r3 < 0x0) {
                    r3 = r0;
            }
            r0 = loc_ffffffff8f64aacc(SAR(r0, r3 / 0x8) << (SAR(r0, r3 / 0x8)) * 0x10);
            stack[2010] = r0;
            if (r0 == 0x0) {
                    stack[1994] = "pmic_data";
                    loc_ffffffff8f6484ac(stack[2015], "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/dev_tree.c", 0x124, stack[1994]);
            }
    }
    r6 = 0x0;
    r7 = r7 + 0x8;
    s0 = r6;
    while (s0 != stack[2008]) {
            r8 = stack[2017] + r6;
            *r8 = loc_ffffffff8f612f08(*(r7 + 0xfffffffffffffff8));
            r0 = *(r7 + 0xfffffffffffffffc);
            r0 = loc_ffffffff8f612f08(r0);
            *(r8 + 0x4) = r0;
            if (r0 == 0x0) {
                    r0 = *(r7 + 0xfffffffffffffff8);
                    r0 = loc_ffffffff8f612f08(r0);
                    *(r8 + 0x4) = r0 >> r0 / 0x1000000;
            }
            s0 = s0 + 0x1;
            r6 = r6 + 0x8;
            r7 = r7 + 0x8;
            stack[2024] = stack[2024] - 0x8;
    }
    r7 = stack[2018];
    r11 = SAR(r11, r11 / 0x8);
    r8 = 0x0;
    do {
            r5 = r5 + 0x8;
            r7 = r7 + 0x8;
            if (r8 == r11) {
                break;
            }
            r8 = r8 + 0x1;
            *(r7 + 0xfffffffffffffff8) = loc_ffffffff8f612f08(*(r5 + 0xfffffffffffffff8));
            stack[2025] = stack[2025] - 0x8;
            *(r7 + 0xfffffffffffffffc) = loc_ffffffff8f612f08(*(r5 + 0xfffffffffffffffc));
    } while (true);
    COND = r6 < 0x0;
    r12 = stack[2011] + 0x7;
    if (COND) {
            r6 = r12;
    }
    r3 = r4 - 0x3;
    r4 = 0x0 - r3;
    r12 = stack[2012];
    r4 = r4 + r3 + CARRY(FLAGS);
    s0 = SAR(s0, r6 / 0x8);
    stack[2021] = r4;
    r3 = r4;
    if (r12 == 0x0) {
            r3 = 0x0;
    }
    if (CPU_FLAGS & NE) {
            r3 = r3 & 0x1;
    }
    if (r3 != 0x0) {
            r4 = stack[2010];
            r5 = r12;
            r6 = 0x0;
            do {
                    r5 = r5 + 0x10;
                    r4 = r4 + 0x10;
                    if (r6 == s0) {
                        break;
                    }
                    r6 = r6 + 0x1;
                    *(r4 + 0xfffffffffffffff0) = loc_ffffffff8f612f08(*(r5 + 0xfffffffffffffff0));
                    *(r4 + 0xfffffffffffffff4) = loc_ffffffff8f612f08(*(r5 + 0xfffffffffffffff4));
                    *(r4 + 0xfffffffffffffff8) = loc_ffffffff8f612f08(*(r5 + 0xfffffffffffffff8));
                    stack[2026] = stack[2026] - 0x10;
                    *(r4 + 0xfffffffffffffffc) = loc_ffffffff8f612f08(*(r5 + 0xfffffffffffffffc));
            } while (true);
            stack[2012] = stack[2012] + s0 * 0x10;
            r3 = s0 * stack[2008] * r11;
            stack[2011] = r3;
    }
    else {
            stack[2011] = stack[2008] * r11;
    }
    r12 = stack[2008];
    r3 = SAR(r3, r11 / 0x80000000);
    r1 = 0x0;
    asm{ umull      r4, r5, ip, fp };
    r5 = r5 + r12 * r3;
    r3 = r12 * r11;
    asm{ umull      r6, r7, r4, sb };
    r8 = s0 * r3;
    r0 = r8;
    if (r7 + s0 * r5 == r1) {
            CMP(r6, r0);
    }
    if (CPU_FLAGS & NE) goto loc_8f614718;

loc_8f614704:
    r2 = r3;
    if (r5 == 0x0) {
            CMP(r4, r2);
    }
    if (CPU_FLAGS & E) goto loc_8f61473c;

loc_8f614718:
    loc_ffffffff8f64ab9c(stack[2017]);
    loc_ffffffff8f64ab9c(stack[2018]);
    r12 = stack[2010];
    if (CPU_FLAGS & NE) {
            loc_ffffffff8f64ab9c();
    }
    goto loc_8f614a1c;

loc_8f61473c:
    r0 = loc_ffffffff8f64aacc(0x28 * stack[2011]);
    COND = r6 != 0x0;
    if (!COND) {
            stack[1994] = "dt_entry_array";
            loc_ffffffff8f6484ac(stack[2015], "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/dev_tree.c", 0x166, stack[1994]);
    }
    r7 = stack[2018];
    r4 = 0x0;
    r12 = r4;
    r2 = 0x28;
    do {
            if (r12 == r11) {
                    r11 = r6;
            }
            if (CPU_FLAGS & E) {
                    r4 = 0x0;
            }
            if (CPU_FLAGS & E) {
                break;
            }
            r5 = stack[2017];
            for (stack[2016] = 0x0; stack[2016] != stack[2008]; stack[2016] = stack[2016] + 0x1) {
                    r0 = stack[2021];
                    if (stack[2012] == 0x0) {
                            r0 = 0x0;
                    }
                    if (CPU_FLAGS & NE) {
                            r0 = r0 & 0x1;
                    }
                    if (r0 != 0x0) {
                            r3 = r6 + r2 * r4;
                            r1 = stack[2010];
                            r0 = 0x0;
                            do {
                                    r3 = r3 + 0x28;
                                    r1 = r1 + 0x10;
                                    if (r0 == s0) {
                                        break;
                                    }
                                    r0 = r0 + 0x1;
                                    *(r3 + 0xffffffffffffffd8) = *r7;
                                    *(r3 + 0xffffffffffffffe4) = *(r7 + 0x4);
                                    *(r3 + 0xffffffffffffffdc) = *r5;
                                    *(r3 + 0xffffffffffffffe0) = *(r5 + 0x4);
                                    *(r3 + 0xffffffffffffffe8) = *(r1 + 0xfffffffffffffff0);
                                    *(r3 + 0xffffffffffffffec) = *(r1 + 0xfffffffffffffff4);
                                    *(r3 + 0xfffffffffffffff0) = *(r1 + 0xfffffffffffffff8);
                                    *(r3 + 0xfffffffffffffff4) = *(r1 + 0xfffffffffffffffc);
                                    *(r3 + 0xfffffffffffffff8) = stack[2006];
                                    *(r3 + 0xfffffffffffffffc) = stack[2009];
                            } while (true);
                            r4 = r4 + s0;
                    }
                    else {
                            r1 = r2 * r4;
                            r4 = r4 + 0x1;
                            r8 = r6 + r1;
                            *(r6 + r1) = *r7;
                            *(r8 + 0xc) = *(r7 + 0x4);
                            *(r8 + 0x4) = *r5;
                            *(r8 + 0x8) = *(r5 + 0x4);
                            *(r8 + 0x10) = loc_ffffffff8f60d860();
                            *(r8 + 0x14) = loc_ffffffff8f60d860(0x1);
                            *(r8 + 0x18) = loc_ffffffff8f60d860(0x2);
                            r0 = loc_ffffffff8f60d860(0x3);
                            r12 = r12;
                            r2 = r2;
                            *(r8 + 0x20) = stack[2006];
                            *(r8 + 0x24) = stack[2009];
                            *(r8 + 0x1c) = r0;
                    }
                    r5 = r5 + 0x8;
            }
            r12 = r12 + 0x1;
            r7 = r7 + 0x8;
    } while (true);
    while (r4 != stack[2011]) {
            r12 = stack[2007];
            r3 = *(r11 + 0x4);
            lr = "unknown";
            r2 = *r12;
            r3 = *(r11 + 0x8);
            if (r2 == 0x0) {
                    r12 = lr;
            }
            loc_ffffffff8f656968();
            r0 = loc_ffffffff8f613d10(r11, r10);
            asm{ ldmib      fp, {r5, r8, sb} };
            r7 = *r11;
            if (r0 != 0x0) {
                    loc_ffffffff8f60d6f8();
                    stack[1994] = s0;
                    loc_ffffffff8f60d7ac();
                    loc_ffffffff8f60d7e8();
                    loc_ffffffff8f60d8ac();
            }
            else {
                    loc_ffffffff8f60d6f8();
                    stack[1994] = s0;
                    loc_ffffffff8f60d7ac();
                    loc_ffffffff8f60d7e8();
                    loc_ffffffff8f60d8ac();
            }
            loc_ffffffff8f656968();
            r4 = r4 + 0x1;
            r11 = r11 + 0x28;
    }
    loc_ffffffff8f64ab9c(stack[2017]);
    loc_ffffffff8f64ab9c(stack[2018]);
    r12 = stack[2010];
    if (r12 != 0x0) {
            loc_ffffffff8f64ab9c(r12);
    }
    goto loc_8f614a18;

loc_8f614244:
    r2 = stack[2024];
    if (r2 <= 0x0) goto loc_8f614270;

loc_8f614250:
    if ((r2 & 0x7) == 0x0) {
            r4 = 0x2;
    }
    if (CPU_FLAGS & E) {
            r6 = 0x8;
    }
    if (CPU_FLAGS & E) goto loc_8f614278;
    goto loc_8f6142d0;

loc_8f614270:
    r4 = 0x1;
    r6 = 0xc;
    goto loc_8f614278;

loc_8f61423c:
    if (r7 == 0x0) goto loc_8f614270;
    goto loc_8f614244;

loc_8f614110:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Tags addresses overlap with aboot addresses.\n");
    r0 = 0x0;
    goto loc_8f6140f8;

loc_8f613ffc:
    if (stack[2014] > 0x8fdfffff) goto loc_8f614124;
    goto loc_8f614110;

loc_8f614010:
    if ((((((((loc_ffffffff8f6134c8(r10, 0x0) == 0x0) || (loc_ffffffff8f6134c8(r10, 0x7) == 0x0)) || (loc_ffffffff8f6131d8(r10, 0x1) == 0x0)) || (loc_ffffffff8f6131d8(r10, 0x2) == 0x0)) || (loc_ffffffff8f6131d8(r10, 0x3) == 0x0)) || (loc_ffffffff8f6131d8(r10, 0x4) == 0x0)) || (loc_ffffffff8f6131d8(r10, 0x5) == 0x0)) || (loc_ffffffff8f6131d8(r10, 0x6) == 0x0)) goto loc_8f614b50;

loc_8f6140b0:
    r3 = *(r10 + 0x4);
    goto loc_8f6140b4;

loc_8f6140b4:
    if (r3 == r10) goto loc_8f614b50;

loc_8f6140bc:
    if (r3 != 0x0) goto loc_8f6140d4;

loc_8f6140c4:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "ERROR: Couldn't find the suitable DTB!\n");
    goto loc_8f614b50;

loc_8f614b50:
    r5 = 0x0;
    goto loc_8f614b04;

loc_8f614b04:
    for (r0 = *(r10 + 0x4); r0 != r10; r0 = *(r4 + 0x4)) {
            r4 = *r0;
            loc_ffffffff8f613148();
    }
    if (r5 == 0x0) goto loc_8f6140e8;

loc_8f614b28:
    loc_ffffffff8f64ac90(stack[2014], r5, stack[2019]);
    r0 = stack[2014];
    *(stack[2013] + stack[2022]) = 0x0;
    goto loc_8f6140f8;

loc_8f6140e8:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "DTB offset is incorrect, kernel image does not have appended DTB\n");
    goto loc_8f6140f4;

loc_8f6140f4:
    r0 = r5;
    goto loc_8f6140f8;

loc_8f6140d4:
    r4 = *(r3 + 0x8);
    if (r4 != 0x0) goto loc_8f614a44;

loc_8f6140e0:
    r3 = *(r3 + 0x4);
    goto loc_8f6140b4;

loc_8f614a44:
    r3 = *(r4 + 0x8);
    r0 = 0x1;
    r12 = *(r4 + 0x24);
    r5 = *(r4 + 0x20);
    r1 = "Best match DTB tags %u/%08x/0x%08x/%x/%x/%x/%x/%x/%x/%x\n";
    stack[2019] = r12;
    asm{ ldm        r4, {r2, r3} };
    loc_ffffffff8f656968(r0, r1);
    r3 = *(r4 + 0x1c);
    r7 = *(r4 + 0x10);
    r6 = *(r4 + 0x14);
    r11 = *(r4 + 0x18);
    loc_ffffffff8f60d860(0x0);
    r8 = loc_ffffffff8f60d860(0x1);
    r4 = loc_ffffffff8f60d860(0x2);
    r0 = loc_ffffffff8f60d860(0x3);
    stack[1994] = r11;
    r2 = r7;
    asm{ stmib      sp, {r3, sb} };
    loc_ffffffff8f656968(0x1, "Using pmic info 0x%0x/0x%x/0x%x/0x%0x for device 0x%0x/0x%x/0x%x/0x%0x\n", r2, r6, stack[1994]);
    goto loc_8f614b04;

