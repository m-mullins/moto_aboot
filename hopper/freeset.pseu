    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    COND = r5 != 0x0;
    r6 = lr;
    r4 = arg1;
    stack[2041] = *0x8f7112f4;
    if (!COND) {
            loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x50d, "p != ((void *)0)");
    }
    if (r4 == 0x0) {
            loc_ffffffff8f6484ac(r6, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x50e, "cs != ((void *)0)");
    }
    r3 = *(r5 + 0x1c);
    r0 = *(r3 + 0xc);
    r2 = *(r3 + 0x10);
    r12 = *(r3 + 0x8);
    r3 = 0x0;
    r0 = r2 + r0 * 0x10;
    while (r3 != r12) {
            r1 = *r4;
            *(r1 + zero_extend_32(r3)) = *(r1 + zero_extend_32(r3)) & !*(r4 + 0x4);
            r2 = *(r4 + 0x5);
            r2 = r2 - r3;
            r3 = r3 + 0x1;
            *(r4 + 0x5) = r2;
    }
    r3 = r0 - 0x10;
    if (r4 == r3) {
            r2 = *(r5 + 0x1c);
    }
    if (CPU_FLAGS & E) {
            r3 = *(r2 + 0xc);
    }
    if (CPU_FLAGS & E) {
            r3 = r3 - 0x1;
    }
    if (CPU_FLAGS & E) {
            *(r2 + 0xc) = r3;
    }
    if (stack[2041] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

