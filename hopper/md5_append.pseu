    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r5 = arg2;
    r8 = arg1;
    COND = r5 <= 0x0;
    r1 = *r0;
    r4 = r0;
    r2 = arg2 << arg2 * 0x8;
    r3 = *r0;
    asm{ ubfx       r7, r1, #0x3, #0x6 };
    stack[2040] = r3;
    if (COND) goto loc_8f65a8a8;

loc_8f65a7f0:
    r3 = *(r0 + 0x4);
    *r0 = r2 + r1;
    r3 = r3 + r5 / 0x20000000;
    *(r0 + 0x4) = r3;
    if (r2 + r1 < r2) {
            r3 = r3 + 0x1;
    }
    if (CPU_FLAGS & S) {
            *(r0 + 0x4) = r3;
    }
    if (r7 == 0x0) goto loc_8f65a85c;

loc_8f65a818:
    if (r7 + r5 > 0x40) {
            r6 = 0x40 - r7;
    }
    if (CPU_FLAGS & LE) {
            r6 = r5;
    }
    r0 = loc_ffffffff8f64ac90();
    if (r7 + r6 <= 0x3f) goto loc_8f65a8a8;

loc_8f65a848:
    r8 = r8 + r6;
    r5 = r5 - r6;
    r0 = loc_ffffffff8f659c9c(r4, r4 + 0x18);
    goto loc_8f65a85c;

loc_8f65a85c:
    r8 = r8 + r5;
    while (r5 > 0x3f) {
            r5 = r5 - 0x40;
            r0 = loc_ffffffff8f659c9c(r4);
    }
    if (r5 != 0x0) {
            if (stack[2040] == *r0) {
                    loc_ffffffff8f64ac90(r4 + 0x18);
            }
            else {
                    loc_ffffffff8f648514();
            }
    }
    else {
            if (stack[2040] != *r0) {
                    loc_ffffffff8f648514();
            }
    }
    return;

loc_8f65a8a8:
    if (stack[2040] != *r0) {
            loc_ffffffff8f648514();
    }
    return;

