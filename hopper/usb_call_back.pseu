    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r6 = sp + 0x4;
    r4 = 0x50;
    r3 = *0x8f7112f4;
    stack[2041] = r3;
    loc_ffffffff8f64adc8(r6, 0x0, 0x7, r3, stack[2038]);
    loc_ffffffff8f64748c(0x41, 0x20, 0x0);
    do {
            r0 = loc_ffffffff8f647204(zero_extend_32(r4), (sp - 0x4c) + r4);
            COND = r3 >= 0x0;
            if (!COND) {
                    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Read IRQ reg 0x%x error %d\n", r4);
            }
            r4 = r4 + 0x1;
    } while (r4 != 0x57);
    r5 = 0x8f6e0b64;
    r4 = 0x0;
    do {
            r0 = *(r6 + r4);
            if ((r0 & 0x2) != 0x0) {
                    r3 = *r5;
                    if (r3 != 0x0) {
                            (r3)(r0 & 0x1 ^ 0x1);
                    }
            }
            r0 = *(r6 + r4);
            r0 = r0 >> r0 / 0x4;
            if ((r0 & 0x2) != 0x0) {
                    r3 = *(r5 + 0x4);
                    if (r3 != 0x0) {
                            (r3)(r0 & 0x1 ^ 0x1);
                    }
            }
            r0 = *(r6 + r4);
            r0 = r0 >> r0 / 0x10;
            if ((r0 & 0x2) != 0x0) {
                    r3 = *(r5 + 0x8);
                    if (r3 != 0x0) {
                            (r3)(r0 & 0x1 ^ 0x1);
                    }
            }
            r0 = *(r6 + r4);
            r0 = r0 >> r0 / 0x40;
            if ((r0 & 0x2) != 0x0) {
                    r3 = *(r5 + 0xc);
                    if (r3 != 0x0) {
                            r0 = (r3)(r0 & 0x1 ^ 0x1);
                    }
            }
            r4 = r4 + 0x1;
            r5 = r5 + 0x10;
    } while (r4 != 0x7);
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

