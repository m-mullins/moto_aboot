    stack[2040] = r4;
    r11 = (sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4) + 0x20;
    r4 = arg1;
    r10 = arg1 + 0x1;
    r7 = arg0;
    r2 = *0x8f7112f4;
    r5 = 0x0;
    *(r11 + 0xffffffffffffffd0) = 0x8f7112f4;
    *(r11 + 0xffffffffffffffd8) = r2;
    loc_ffffffff8f64b354(arg0, arg1, arg1 + 0x8 & !0x7, 0x8f7112f4, stack[2034], stack[2035], stack[2036], stack[2037], stack[2038], arg0, stack[2040], 0x0, r6);
    s0 = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14 - (arg1 + 0x8 & !0x7);
    r8 = loc_ffffffff8f67b3c0() + 0x1;
    r6 = loc_ffffffff8f6781b4(r8);
    do {
            if (r6 != 0x0) {
                    CMP(r5, r8);
            }
            r3 = *(r11 + 0xffffffffffffffd0);
            if (CPU_FLAGS & GE) {
                break;
            }
            *(r11 + 0xffffffffffffffd0) = r3;
            loc_ffffffff8f64b2c0(s0, r7, r10);
            r7 = r7 + r4;
            *(r6 + r5 * 0x4) = loc_ffffffff8f64b154(s0);
            r5 = r5 + 0x1;
    } while (true);
    r0 = r6;
    if (*(r11 + 0xffffffffffffffd8) != *r3) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

