    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r3 = *0x8f7112f4;
    stack[2043] = r3;
    loc_ffffffff8f643a9c(arg0, arg1, arg2, r3, arg0, stack[2043], arg2, r4, r5, lr);
    *(arg0 + 0x54) = 0xb;
    r3 = *(0x8f6ae06c + 0x4);
    *(arg0 + 0x60) = 0xff;
    *arg0 = r3;
    r0 = *0x8f6ae044;
    r1 = *(0x8f6ae044 + 0x1);
    r3 = *(0x8f6ae06c + 0x8);
    r2 = *(0x8f6ae06c + 0x10);
    *(arg0 + 0xc3) = r1;
    *(arg0 + 0x4) = r3;
    *(arg0 + 0xc) = r0;
    *(arg0 + 0x10) = 0x0;
    *(arg0 + 0x8) = r2;
    *(arg0 + 0x14) = 0x0;
    *(arg0 + 0x18) = 0x0;
    *(arg0 + 0x68) = 0x0;
    *(arg0 + 0x6c) = 0x0;
    *(arg0 + 0x44) = 0x34;
    *(arg0 + 0x5c) = 0x0;
    *(arg0 + 0x4c) = 0x8;
    *(arg0 + 0x64) = 0x0;
    *(arg0 + 0x48) = 0x78;
    *(arg0 + 0x70) = 0x0;
    *(arg0 + 0x50) = 0xa;
    *(arg0 + 0x72) = 0x0;
    *(arg0 + 0x58) = 0x1;
    *(arg0 + 0x71) = 0x0;
    *(arg0 + 0xb1) = r0;
    r0 = 0x3c;
    *(arg0 + 0xff) = 0x0;
    *(arg0 + 0x100) = 0x0;
    *(arg0 + 0xb8) = 0x0;
    *(arg0 + 0xbc) = 0x1312d000;
    *(arg0 + 0xef) = r0;
    *(arg0 + 0xc2) = 0x3;
    *(arg0 + 0xce) = 0x1;
    *(arg0 + 0xb0) = 0x1;
    *(arg0 + 0x1c) = 0x1;
    *(arg0 + 0xeb) = 0x0;
    *(arg0 + 0xb2) = 0x0;
    *(arg0 + 0xd8) = 0x8f6ae098;
    *(arg0 + 0x114) = 0x0;
    *(arg0 + 0xf4) = 0x0;
    r3 = *0x8f7112f4;
    *(arg0 + 0xee) = 0x2;
    *(arg0 + 0xb4) = 0x9;
    if (stack[2043] != r3) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

