    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r5 = arg1;
    r2 = *0x8f7112f4;
    stack[2040] = r2;
    do {
            r4 = *(0x8f6c01d0 + 0x4);
            if ((r4 == 0x8f6c01d0) || (r4 == 0x0)) {
                break;
            }
            r4 = r4 - 0x4;
            COND = r4 == 0x0;
            if (COND) {
                break;
            }
            r3 = *(r4 + 0xc);
            r3 = r5 - r3;
            if (r3 < 0x0) {
                break;
            }
            r7 = 0x0;
            asm{ ldmib      r4, {r2, r3} };
            s0 = *(r4 + 0x10);
            *r3 = r2;
            *(*(r4 + 0x4) + 0x4) = r3;
            *(r4 + 0x8) = r7;
            *(r4 + 0x4) = r7;
            r3 = *(r4 + 0x14);
            r2 = *(r4 + 0x18);
            (r3)(r4, r5, r2, r3);
            if (s0 == 0x0) {
                continue;
            }
            if (*(r4 + 0x4) != 0x0) {
                continue;
            }
            if (*(r4 + 0x8) != 0x0) {
                continue;
            }
            r3 = *(r4 + 0x10);
            if (r3 == 0x0) {
                continue;
            }
            *(r4 + 0xc) = r5 + r3;
            loc_ffffffff8f61bfbc(r4);
    } while (true);
    loc_ffffffff8f61b8d4();
    r0 = 0x1;
    if (stack[2040] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

