    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r11 = 0x8f7112f4;
    r7 = arg0;
    asm{ strd       r2, r3, [sp, #0x48 + var_38] };
    r3 = stack[2048];
    stack[2037] = *r11;
    r2 = 0x8f70da50;
    r0 = *r2;
    if (CPU_FLAGS & E) goto loc_8f65ac10;

loc_8f65abfc:
    r4 = 0x8f70da8c;
    r5 = *r4;
    if (r5 != 0x2) goto loc_8f65ac20;

loc_8f65ac10:
    loc_ffffffff8f656968();
    r0 = 0x3;
    *0x8f70da8c = r0;
    goto loc_8f65aebc;

loc_8f65aebc:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f65ac20:
    if (r5 != 0x3) goto loc_8f65ac40;

loc_8f65ac28:
    loc_ffffffff8f656968(0x0, "PIV validation has failed\n");
    *0x8f70da8c = r5;
    r0 = r5;
    goto loc_8f65aebc;

loc_8f65ac40:
    if (r3 != 0x0) goto loc_8f65ac60;

loc_8f65ac48:
    asm{ ldrd       r4, r5, [sp, #0x48 + var_38] };
    r8 = 0x8f70da48;
    asm{ strd       r4, r5, [sp, #0x48 + var_40] };
    goto loc_8f65acb0;

loc_8f65acb0:
    asm{ ldrd       r4, r5, [sp, #0x48 + var_40] };
    r3 = 0x8f70da54;
    r5 = r4 | r5;
    COND = r5 == 0x0;
    if (COND) goto loc_8f65ae4c;

loc_8f65acc0:
    r3 = *r3;
    r2 = *0x8f70da58;
    if (r2 >= *(r3 + 0x3c)) {
            r0 = 0x3;
    }
    if (CPU_FLAGS & NB) goto loc_8f65ad44;

loc_8f65acdc:
    r1 = 0x8f70da68;
    r3 = 0x30 * r2;
    asm{ ldrd       sl, fp, [r8] };
    r1 = *r1;
    r5 = r1 + r3;
    asm{ ldrd       r0, r1, [r1, r3] };
    if (r11 == r1) {
            CMP(0x8f70da40, r0);
    }
    if (CPU_FLAGS & NE) {
            r0 = 0x3;
    }
    if (CPU_FLAGS & NE) goto loc_8f65ae00;

loc_8f65ad0c:
    asm{ ldrd       r2, r3, [r4] };
    COND = r11 != 0x0;
    if (COND) goto loc_8f65ad4c;

loc_8f65ad1c:
    r2 = 0x20;
    loc_ffffffff8f64adc8(0x8f70da6c, 0x0, r2);
    r0 = loc_ffffffff8f6070ac(0x100);
    if (r0 != 0x10) goto loc_8f65ad4c;

loc_8f65ad44:
    loc_ffffffff8f656968();
    goto loc_8f65ae04;

loc_8f65ae04:
    r0 = 0x3;
    goto loc_8f65aeb4;

loc_8f65aeb4:
    *0x8f70da8c = r0;
    goto loc_8f65aebc;

loc_8f65ad4c:
    r1 = 0x0;
    asm{ ldrd       r0, r1, [r4] };
    asm{ ldrd       r2, r3, [r5, #0x8] };
    asm{ ldrd       sl, fp, [sp, #0x48 + var_40] };
    r2 = r2 - r0;
    r3 = r3 - r1 + !CARRY(FLAGS);
    r0 = 0x0 ^ 0xffffffff;
    if (r3 == 0x0) {
            CMP(r2, r0);
    }
    if (CPU_FLAGS & A) {
            r2 = r0;
    }
    if (CPU_FLAGS & A) {
            r3 = 0x0;
    }
    if (r3 == r11) {
            CMP(r2, 0x8f70da40);
    }
    asm{ strd       r2, r3, [sp, #0x48 + var_48] };
    if (CPU_FLAGS & A) {
            asm{ strdhi     sl, fp, [sp, #0x48 + var_48] };
    }
    r2 = *0x8f70da58;
    r3 = stack[2030];
    loc_ffffffff8f656968(0x2, "validating data: entry=%d, len=0x%x\n", r2, r3);
    r1 = stack[2030];
    r0 = loc_ffffffff8f60710c(r7, r1);
    r4 = 0x8f70da58;
    if (r0 != 0x10) goto loc_8f65ac70;

loc_8f65ae00:
    loc_ffffffff8f656968();
    goto loc_8f65ae04;

loc_8f65ac70:
    r10 = 0x8f70da40;
    asm{ ldrd       sl, fp, [sp, #0x48 + var_40] };
    asm{ ldrd       r0, r1, [sp, #0x48 + var_48] };
    asm{ ldrd       r2, r3, [sp, #0x48 + var_48] };
    r10 = r10 - r0;
    r11 = r11 - r1 + !CARRY(FLAGS);
    asm{ strd       sl, fp, [sp, #0x48 + var_40] };
    r7 = r7 + r2;
    asm{ ldrd       r0, r1, [sl] };
    r0 = r0 + r2;
    r1 = r1 + r3 + CARRY(FLAGS);
    asm{ ldrd       r2, r3, [r5, #0x8] };
    asm{ strd       r0, r1, [sl] };
    if (r1 == r3) {
            CMP(r0, r2);
    }
    if (CPU_FLAGS & E) goto .l20;
    goto loc_8f65acb0;

.l20:
    if ((CPU_FLAGS & E) || (loc_ffffffff8f64af40(0x8f70da6c, r5 + 0x10, 0x20) != 0x0)) goto loc_8f65ae00;

loc_8f65ae0c:
    r6 = 0x8f70da58;
    r4 = 0x8f70da58;
    r2 = *r6;
    r0 = loc_ffffffff8f656968(0x1, "PIV entry %d has been validated\n", r2);
    asm{ ldrd       r4, r5, [sl] };
    asm{ ldrd       r2, r3, [sb] };
    r2 = r2 + r4;
    asm{ strd       r2, r3, [sb] };
    asm{ strd       r2, r3, [sl] };
    *r6 = *r6 + 0x1;
    goto loc_8f65acb0;

loc_8f65ae4c:
    r3 = *r3;
    r3 = *(r3 + 0x3c);
    r2 = *0x8f70da58;
    if (r2 == r3) {
            r2 = *0x8f70da58;
            r3 = 0x8f70da40;
            asm{ ldrd       r2, r3, [r3] };
            COND = r10 != 0x0;
            if (!COND) {
                    r2 = *0x8f70da58;
                    r3 = 0x8f70da48;
                    asm{ ldrd       r2, r3, [r3] };
                    COND = r11 == 0x0;
                    if (!COND) {
                            loc_ffffffff8f656968(0x1, "All PIV entries have been validated\n");
                            r0 = 0x2;
                    }
                    else {
                            r0 = 0x1;
                            asm{ ldrd       r4, r5, [sp, #0x48 + var_38] };
                            asm{ ldrd       r2, r3, [r1] };
                            r2 = r2 + r4;
                            asm{ strd       r2, r3, [r1] };
                    }
            }
            else {
                    r0 = 0x1;
                    asm{ ldrd       r4, r5, [sp, #0x48 + var_38] };
                    asm{ ldrd       r2, r3, [r1] };
                    r2 = r2 + r4;
                    asm{ strd       r2, r3, [r1] };
            }
    }
    else {
            r0 = 0x1;
            asm{ ldrd       r4, r5, [sp, #0x48 + var_38] };
            asm{ ldrd       r2, r3, [r1] };
            r2 = r2 + r4;
            asm{ strd       r2, r3, [r1] };
    }
    goto loc_8f65aeb4;

loc_8f65ac60:
    loc_ffffffff8f656968(0x2, "Sikp piv_validate\n");
    r0 = 0x1;
    asm{ ldrd       r4, r5, [sp, #0x48 + var_38] };
    asm{ ldrd       r2, r3, [r1] };
    r2 = r2 + r4;
    asm{ strd       r2, r3, [r1] };
    goto loc_8f65aeb4;

