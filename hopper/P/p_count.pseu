    r2 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    COND = r4 != 0x0;
    r3 = 0x8f7112f4;
    r7 = r3;
    stack[2041] = *r3;
    if (!COND) {
            r2 = "lib/regex/regcomp.c";
            r3 = 0x2e2;
            loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", r2, r3, "p != ((void *)0)");
    }
    r6 = 0x0;
    r5 = r6;
    do {
            asm{ ldm        r4, {r2, r3} };
            if (r2 >= r3) {
                break;
            }
            if (loc_ffffffff8f64a0c8(*r2) == 0x0) {
                break;
            }
            if (r5 > 0xff) {
                break;
            }
            r2 = *r4;
            r6 = r6 + 0x1;
            *r4 = r2 + 0x1;
            r3 = *r2;
            r3 = r3 - 0x30;
            r5 = r3 + 0xa * r5;
    } while (true);
    if (r5 > 0xff) {
            r3 = 0x0;
    }
    if (CPU_FLAGS & LE) {
            r3 = 0x1;
    }
    if (r6 <= 0x0) {
            r3 = 0x0;
    }
    if (r3 == 0x0) {
            loc_ffffffff8f65b358(r4, 0xa);
    }
    r0 = r5;
    if (stack[2041] != *r7) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

