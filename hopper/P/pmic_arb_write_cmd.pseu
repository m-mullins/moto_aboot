    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r4 = r0;
    r5 = arg1;
    stack[2041] = *0x8f7112f4;
    if (*0x8f6b8afc >= 0x2000ffff) {
            *0x8f6b8b04 = *(*0x8f6b8b08 + (*(r0 + 0x3) | *(r0 + 0x2) * 0x100));
    }
    r6 = *0x8f6b8b04;
    r6 = (r6 << r6 * 0x8000) + 0x2400000;
    *(r6 + 0x4) = 0x0;
    if (r4 == 0x0) {
            loc_ffffffff8f656968(0x0 ^ 0xffffffff, "PMIC arbiter error, no command provided\n");
            r0 = 0x1;
    }
    else {
            r0 = *r5;
            loc_ffffffff8f6118d4(r0);
            if (0x0 < *(r5 + 0x4)) {
                    r0 = *r5;
                    loc_ffffffff8f6118d4(r0, 0x1);
            }
            r3 = *(r5 + 0x4);
            *r4 = 0x0;
            r2 = *(r4 + 0x1);
            r1 = *(r4 + 0x4);
            *(r4 + 0x5) = zero_extend_32(r3 - 0x1);
            *r6 = r2 << r2 * 0x4000000 | r1 * 0x10 | zero_extend_32(r3 - 0x1);
            do {
                    r5 = *(r6 + 0x8);
            } while (r5 == 0x0);
            r5 = r5 ^ 0x1;
            COND = r5 == 0x0;
            if (!COND) {
                    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "SPMI write command failure: \t\t\tcmd_id = %u, error = %u\n", *r4, r5);
            }
            r0 = r5;
    }
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

