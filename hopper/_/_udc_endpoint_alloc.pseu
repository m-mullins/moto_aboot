    r2 = arg2;
    stack[2042] = r5;
    stack[2043] = r6;
    stack[2045] = r8;
    stack[2046] = r10;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r8 = arg3;
    r5 = arg0;
    s0 = arg1;
    r10 = lr;
    r3 = *0x8f7112f4;
    r6 = r2;
    stack[2040] = r3;
    r0 = loc_ffffffff8f64ab04(0x40, 0x40, r2, r3, arg0, arg1, r2, stack[2040], r4, stack[2042], stack[2043], 0x8f7112f4, stack[2045], stack[2046], lr);
    COND = r4 != 0x0;
    if (!COND) {
            r2 = "platform/msm_shared/hsusb.c";
            loc_ffffffff8f6484ac(r10, "ASSERT FAILED at (%s:%d): %s\n", r2, 0x9f, 0x8f67d2dc);
    }
    COND = r1 != 0x0;
    r3 = 0x0;
    r2 = r2 << r6 * 0x10000;
    *(r4 + 0xc) = r3;
    if (COND) {
            r1 = 0x1;
    }
    r8 = r8 + 0x0;
    COND = r8 != 0x0;
    *(r4 + 0x14) = r6;
    r2 = r2 | 0x20000000;
    if (COND) {
            r8 = 0x1;
    }
    COND = r1 != r3;
    *(r4 + 0x10) = r5;
    r3 = zero_extend_32(r5);
    *(r4 + 0x11) = r1;
    r0 = 0x1;
    *(r4 + 0x12) = r8;
    if (COND) {
            r3 = r3 + 0x10;
    }
    if (CPU_FLAGS & NE) {
            r0 = r0 << r3;
    }
    if (CPU_FLAGS & NE) {
            *(r4 + 0x4) = r0;
    }
    if (!CPU_FLAGS & NE) {
            r3 = r0 << r3;
            *(r4 + 0x4) = r3;
    }
    r2 = *0x8f6b7934;
    r0 = r4;
    r3 = *0x8f6b7930;
    *(r4 + 0x8) = r3 + (r1 + r5 * 0x2) * 0x40;
    *(r3 + (r1 + r5 * 0x2) * 0x40) = r2;
    r2 = *0x8f6b7934;
    *0x8f6b7934 = r4;
    *r4 = r2;
    if (stack[2040] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

