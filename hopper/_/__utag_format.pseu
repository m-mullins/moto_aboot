    r6 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r11 = lr;
    r5 = arg0;
    r4 = arg1;
    r7 = arg2;
    r3 = *arg0;
    stack[2037] = r3;
    r10 = loc_ffffffff8f6788e4(arg0, arg1, arg2, r3, stack[2030]);
    if (loc_ffffffff8f67a53c(r5, r4) == 0x0) {
            r6 = 0x2;
    }
    if (CPU_FLAGS & E) goto loc_8f67ab38;

loc_8f67a7d4:
    r3 = *0x8f6ac0f0;
    *0x8f6ac0f0 = r3 + 0x1;
    if (r3 == 0x0) {
            loc_ffffffff8f619448();
    }
    r3 = *(r10 + 0x3c);
    r10 = r10 + 0x38;
    goto loc_8f67a7f8;

loc_8f67a7f8:
    if (r3 == r10) goto loc_8f67a84c;

loc_8f67a800:
    r0 = loc_ffffffff8f678804(r3 + 0x8, r4);
    r3 = r3;
    if (r0 == 0x0) goto loc_8f67a844;

loc_8f67a81c:
    r12 = *(r3 + 0x22c);
    if (r12 == 0x0) goto loc_8f67a844;

loc_8f67a828:
    r6 = (r12)(r4, r7, r6, *(r3 + 0x230));
    goto loc_8f67ab20;

loc_8f67ab20:
    r3 = *0x8f6ac0f0;
    *0x8f6ac0f0 = r3 - 0x1;
    if (r3 == 0x1) {
            loc_ffffffff8f619438();
    }
    goto loc_8f67ab38;

loc_8f67ab38:
    r0 = r6;
    if (stack[2037] != *r0) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f67a844:
    r3 = *(r3 + 0x4);
    goto loc_8f67a7f8;

loc_8f67a84c:
    if (loc_ffffffff8f6791d0(r5, r4) == 0x0) {
            loc_ffffffff8f6484ac(r11, "ASSERT FAILED at (%s:%d): %s\n", "lib/utags/utags.c", 0x4fe, 0x8f686137);
    }
    if (loc_ffffffff8f67a63c(r5, r4) < 0x7) {
            loc_8f67a894();
    }
    r6 = 0x1;
    goto loc_8f67ab20;

