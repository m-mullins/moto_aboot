    COND = r4 != 0x0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r5 = lr;
    if (!COND) {
            loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x450, "p != ((void *)0)");
    }
    s0 = *r4;
    r8 = *(r4 + 0x4);
    *r4 = sp + 0x8;
    *(r4 + 0x4) = sp + 0xb;
    r0 = loc_ffffffff8f65bb34(r4);
    if (*r4 != sp + 0xb) {
            r0 = loc_ffffffff8f6484ac(r5, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x45c, "p->next == bracket+3");
    }
    r3 = *0x8f7112f4;
    *r4 = s0;
    *(r4 + 0x4) = r8;
    if (0x0 != r3) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

