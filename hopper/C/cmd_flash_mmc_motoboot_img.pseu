    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x54;
    r3 = *0x8f7112f4;
    r8 = arg0;
    stack[2037] = r3;
    stack[2033] = loc_ffffffff8f600d34(arg0, arg1, arg2, r3, stack[2018]);
    loc_ffffffff8f656968(0x2, "start flashing motoboot image\n");
    r0 = loc_ffffffff8f64b0ac(r8 + 0x284, "MBOOTV1");
    if (r0 != 0x0) {
            loc_ffffffff8f656968(0x1, "Legacy motoboot detected");
            r0 = 0x1;
    }
    r5 = 0x0;
    r6 = r8 + 0x400;
    r7 = r5;
    stack[2032] = r0;
    goto loc_8f622930;

loc_8f622930:
    if (r7 >= *r8) goto loc_8f622d74;

loc_8f62293c:
    r6 = r6 + r5;
    r4 = 0x4 + r8 + r7 * 0x20;
    r5 = *(0x20 + r8 + r7 * 0x20);
    r5 = r5 + 0x1 - *(0x1c + r8 + r7 * 0x20);
    r5 = *(*0x8f7125ec + 0x8) * r5;
    if (stack[2032] != 0x0) goto loc_8f6229b4;

loc_8f622970:
    r10 = 0x290 + r8 + 0xc * r7;
    if ((loc_ffffffff8f64b0ac(r10, "HABSIG") == 0x0) || (loc_ffffffff8f64b6a0(stack[2033], r10) != 0x0)) goto loc_8f6229b4;

loc_8f6229a4:
    loc_ffffffff8f656968(0x1, "Image/MSM ID mismatch - Skip flashing");
    goto loc_8f622d68;

loc_8f622d68:
    r7 = zero_extend_32(r7 + 0x1);
    goto loc_8f622930;

loc_8f6229b4:
    loc_ffffffff8f656968(0x2, "Handling motoboot image: %s...\n", r4);
    r10 = loc_ffffffff8f64b354(0x8f682073);
    if (loc_ffffffff8f64af40(r4, 0x8f682073, r10) != 0x0) goto loc_8f622a94;

loc_8f6229e8:
    r0 = r4 + r10;
    if ((*(r4 + r10) == 0x0) || (loc_ffffffff8f649d24(r0 + 0x1) == *(*0x8f7125ec + 0x28))) goto loc_8f622a34;

loc_8f622a14:
    loc_ffffffff8f656968(0x1, "Found incorrect gpt for hardware, ignoring...\n");
    loc_ffffffff8f62192c(0x8f683451, "skipping %s (eMMC size mismatch)", r4);
    goto loc_8f622d68;

loc_8f622a34:
    loc_ffffffff8f62192c(0x8f683451, "flashing %s ...", r4);
    loc_ffffffff8f62192c(0x8f683451, "This may take a few seconds if a");
    loc_ffffffff8f62192c(0x8f683451, "different partition table is being");
    loc_ffffffff8f62192c(0x8f683451, "flashed since we need to backup");
    loc_ffffffff8f62192c(0x8f683451, "and restore a few partitions");
    if (loc_ffffffff8f653bc8(r5, r6) != 0x0) goto loc_8f622d3c;

loc_8f622a88:
    loc_ffffffff8f679f54();
    loc_ffffffff8f6359f4();
    goto loc_8f622d68;

loc_8f622d3c:
    loc_ffffffff8f62192c();
    goto loc_8f622d44;

loc_8f622d44:
    r0 = 0x3;
    goto loc_8f622d7c;

loc_8f622d7c:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f622a94:
    r1 = "flashing %s ...";
    loc_ffffffff8f62192c(0x8f683451, r1, r4);
    if (loc_ffffffff8f6764b0(r6) != 0x0) goto loc_8f622adc;

loc_8f622ab8:
    if (loc_ffffffff8f6225bc() != -0x1) goto loc_8f622d68;
    goto loc_8f622d3c;

loc_8f622adc:
    r10 = loc_ffffffff8f65385c();
    loc_ffffffff8f6539b0(r4);
    r0 = loc_ffffffff8f653b20();
    COND = r3 != 0x0;
    asm{ strd       r0, r1, [sp, #0x78 + var_48] };
    if (COND) goto loc_8f622b18;

loc_8f622afc:
    loc_ffffffff8f656968(0x0, "Unable to find partition \"%s\"\n", r4);
    goto loc_8f622d3c;

loc_8f622b18:
    r0 = loc_ffffffff8f676500(r6, r5);
    *r0 = r0;
    if (r0 != 0x0) goto loc_8f622b4c;

loc_8f622b30:
    loc_ffffffff8f656968(0x5, "Invalid sparse image %s", r4);
    goto loc_8f622d3c;

loc_8f622b4c:
    r0 = (*(r0 + 0x8))();
    stack[2029] = r0;
    if (r0 != 0x0) goto loc_8f622b7c;

loc_8f622b60:
    loc_ffffffff8f656968(0x5, "Malformed parsed sparse image %s", r4);
    goto loc_8f622d3c;

loc_8f622b7c:
    r0 = *r0;
    r0 = (*(r0 + 0x4))(r0);
    r3 = r0;
    r0 = *r0;
    r0 = (*r0)(r0);
    r1 = *(r10 + 0x28);
    r0 = r3 * r0;
    r0 = *(r10 + 0x29);
    asm{ strd       r2, r3, [sp, #0x78 + var_38] };
    r2 = r1 | r0 * 0x100 | *(r10 + 0x2a) * 0x10000 | *(r10 + 0x2b) * 0x1000000;
    r2 = r2 + 0x1;
    r3 = *(r10 + 0x2c) | *(r10 + 0x2d) * 0x100 | *(r10 + 0x2e) * 0x10000 | *(r10 + 0x2f) * 0x1000000;
    r3 = r3 + 0x0 + CARRY(FLAGS);
    r0 = *(r10 + 0x25);
    r1 = *(r10 + 0x24);
    r1 = r1 | r0 * 0x100 | *(r10 + 0x26) * 0x10000;
    r0 = *(r10 + 0x27);
    r0 = r1 | r0 * 0x1000000;
    asm{ ldrd       r0, r1, [sp, #0x78 + var_60] };
    r2 = r2 - r0;
    r3 = r3 - r1 + !CARRY(FLAGS);
    r0 = r1 << r3 * 0x200 | r2 / 0x800000;
    r1 = r1 << r3 * 0x200 << r2 * 0x200;
    asm{ ldrd       r2, r3, [sp, #0x78 + var_38] };
    asm{ ldrd       r0, r1, [sp, #0x78 + var_58] };
    if (r3 == r1) {
            CMP(r2, r0);
    }
    if (CPU_FLAGS & B) goto loc_8f622c80;

loc_8f622c64:
    loc_ffffffff8f656968(0x5, "Image is too large %s", r4);
    goto loc_8f622d3c;

loc_8f622c80:
    if (*stack[2029] == 0x2) goto loc_8f622cc4;

loc_8f622c94:
    loc_ffffffff8f656968();
    if (loc_ffffffff8f622518(r4) != -0x1) goto loc_8f622d4c;

loc_8f622cb0:
    loc_ffffffff8f656968(0x0, "Failed to erase partition %s\n", r4);
    goto loc_8f622d44;

loc_8f622d4c:
    r0 = r5;
    asm{ strd       r0, r1, [sp, #0x78 + var_60] };
    goto loc_8f622ce0;

loc_8f622ce0:
    r0 = *r0;
    r0 = (*(r0 + 0xc))(r0);
    r12 = r0;
    r0 = *r0;
    stack[2023] = r12;
    r0 = (*r0)(r0);
    asm{ ldrd       r2, r3, [sp, #0x78 + var_60] };
    r12 = stack[2023];
    asm{ strd       r2, r3, [sp, #0x78 + var_78] };
    COND = r3 < 0x0;
    if (COND) {
            r3 = 0x0;
    }
    asm{ ldrd       r2, r3, [sp, #0x78 + var_48] };
    r0 = loc_ffffffff8f621bb4(stack[2029], r0);
    r12 = stack[2023];
    if (r0 == 0x0) goto loc_8f622cd4;
    goto loc_8f622d3c;

loc_8f622cd4:
    if (r12 == 0x0) goto loc_8f622d5c;

loc_8f622cdc:
    stack[2029] = r12;
    goto loc_8f622ce0;

loc_8f622d5c:
    r0 = *0x8f6c03bc;
    loc_ffffffff8f6769a4(r0);
    goto loc_8f622d68;

loc_8f622cc4:
    loc_ffffffff8f656968();
    goto loc_8f622d4c;

loc_8f622d74:
    loc_ffffffff8f646e70();
    r0 = 0x1;
    goto loc_8f622d7c;

