    stack[2043] = r5;
    stack[2044] = r6;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r5 = arg1;
    r6 = arg2;
    s0 = arg0;
    r3 = *0x8f7112f4;
    stack[2040] = r3;
    r0 = loc_ffffffff8f64b57c(arg0, arg2, arg2, r3, arg0, stack[2040], arg2, r4, stack[2043], stack[2044], r7, 0x8f7112f4, lr);
    r7 = r0;
    if (r6 == 0x0) {
            r0 = loc_ffffffff8f64b354(r5);
    }
    else {
            r0 = s0 + r0;
            r6 = r6 - 0x1;
            for (r4 = 0x0; r4 < r6; r4 = r4 + 0x1) {
                    r3 = *(r5 + r4);
                    if (r3 == 0x0) {
                        break;
                    }
                    *(r0 + r4) = r3;
            }
            *(r0 + r4) = 0x0;
            r0 = loc_ffffffff8f64b354(r5 + r4);
            r0 = r0 + r4;
    }
    r0 = r0 + r7;
    if (stack[2040] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

