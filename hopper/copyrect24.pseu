    r3 = arg3;
    r2 = arg2;
    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r4 = sp + 0x30;
    r8 = 0x8f7112f4;
    r6 = *(r0 + 0x8);
    asm{ ldm        r4, {r4, r5, sb} };
    stack[2038] = *r8;
    r12 = *(r0 + 0x18);
    if (r6 == 0x0) goto loc_8f649140;

loc_8f6490c0:
    r6 = *(r0 + 0x10);
    if (r3 + r1 > r6) goto loc_8f6490f8;

loc_8f6490d0:
    r10 = *(r0 + 0x14);
    if (((r2 + r4 > r10) || (r3 + r5 > r6)) || (s0 + r4 >= r10)) goto loc_8f6490f8;

loc_8f649120:
    r1 = r6 - r1 - r3;
    r2 = r10 - r2 - r4;
    r5 = r6 - r5 - r3;
    s0 = r10 - s0 - r4;
    goto loc_8f649140;

loc_8f649140:
    r1 = r1 + r12 * r2;
    r0 = *r0;
    r10 = r12 - r3;
    r2 = r2 << r3 * 0x2;
    r7 = r0 + r1 + r1 * 0x2;
    r1 = r1 + r1 * 0x2 << r10 * 0x2;
    r6 = r0 + (r5 + r12 * s0) * 0x2 + r5 + r12 * s0;
    if (r6 < r7) {
            r10 = r1 + r10;
            r11 = r2 + r3;
            for (s0 = 0x0; s0 != r4; s0 = s0 + 0x1) {
                    r5 = 0x0;
                    do {
                            r1 = r7 + r5;
                            r0 = r6 + r5;
                            if (r5 == r11) {
                                break;
                            }
                            r5 = r5 + 0x3;
                            loc_ffffffff8f64ac90();
                    } while (true);
                    r6 = r0 + r10;
                    r7 = r1 + r10;
            }
    }
    else {
            r10 = 0x0 - r1 + r10;
            r11 = r2 + r3;
            s0 = 0x0;
            r7 = r7 + (r3 + r12 * r4) * 0x2 + r3 + r12 * r4;
            r6 = r6 + (r3 + r12 * r4) * 0x2 + r3 + r12 * r4;
            while (s0 != r4) {
                    r5 = 0x0;
                    do {
                            r1 = r7 + r5;
                            r0 = r6 + r5;
                            if (r5 == r11) {
                                break;
                            }
                            r5 = r5 + 0x3;
                            loc_ffffffff8f64ac90();
                    } while (true);
                    r6 = r0 + r10;
                    r7 = r1 + r10;
                    s0 = s0 + 0x1;
            }
    }
    if (stack[2038] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f6490f8:
    if (stack[2038] == *0x8f7112f4) {
            r0 = loc_ffffffff8f656968(0x0 ^ 0xffffffff, "%s width/height checking fails in gfx!", "copyrect24");
    }
    else {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

