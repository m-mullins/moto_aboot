    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x64;
    stack[2026] = arg0;
    r3 = *0x8f7112f4;
    r4 = SAR(arg1 + 0x1, (arg1 + 0x1) / 0x2);
    stack[2032] = arg4;
    stack[2019] = arg1;
    stack[2037] = r3;
    stack[2033] = arg5;
    r10 = arg8;
    stack[2034] = arg6;
    r6 = arg11;
    stack[2035] = arg7;
    stack[2020] = arg9;
    stack[2021] = arg10;
    s0 = loc_ffffffff8f663dc4(arg2, r4, arg2, r3, stack[2014]);
    r5 = s0 + 0x1 >> (s0 + 0x1) / 0x2;
    stack[2018] = loc_ffffffff8f663dc4(arg3, r4);
    stack[2027] = loc_ffffffff8f663dc4(stack[2032], r4);
    stack[2028] = loc_ffffffff8f663dc4(stack[2033], r4);
    r7 = stack[2018] + 0x1 >> (stack[2018] + 0x1) / 0x2;
    stack[2029] = arg2 + (r4 - s0);
    stack[2024] = loc_ffffffff8f663dc4(stack[2034], r4);
    loc_ffffffff8f6673fc(arg2 + (r4 - s0), r10, s0, arg2 + (r4 - s0), stack[2014]);
    stack[2030] = arg3 + (r4 - stack[2018]);
    loc_ffffffff8f6673fc(arg3 + (r4 - stack[2018]), stack[2020], stack[2018]);
    stack[2014] = r6;
    loc_ffffffff8f6676cc(r10, r5, stack[2020], r7, stack[2014]);
    stack[2031] = r5 + r7 - r4 << (r5 + r7 - r4) * 0x4;
    loc_ffffffff8f6674b8(r6 + (r5 + r7 - r4 << (r5 + r7 - r4) * 0x4), stack[2021], stack[2019], r5 + r7 - r4 << (r5 + r7 - r4) * 0x4, stack[2014]);
    r0 = loc_ffffffff8f6672a0(stack[2026], stack[2021], stack[2019]);
    if (r0 >= 0x0) {
            r0 = 0x39;
    }
    if (!CPU_FLAGS & GE) {
            r8 = r6 + 0x4;
            stack[2023] = r10 + ((r5 + 0x1 << (r5 + 0x1) * 0x4) - 0x4);
            stack[2025] = stack[2020] + r7 * 0x4;
            loc_ffffffff8f6673fc(stack[2026], r8, stack[2019], r10 + ((r5 + 0x1 << (r5 + 0x1) * 0x4) - 0x4), stack[2014], stack[2015]);
            *r6 = 0x0;
            loc_ffffffff8f665554(r6, r4 + 0x1, r10, r5);
            loc_ffffffff8f6674b8(r6 + (r4 + 0x1 - r5) * 0x4, r8, s0);
            loc_ffffffff8f6658bc(r8, stack[2029], zero_extend_32(s0), stack[2032] + (r4 - stack[2027]), zero_extend_32(stack[2027]), r6 + (r5 + 0x1 << (r5 + 0x1) * 0x4));
            loc_ffffffff8f6673fc(r6 + (r5 + 0x1 << (r5 + 0x1) * 0x4), stack[2023], s0);
            loc_ffffffff8f6673fc(stack[2026], r8, stack[2019]);
            loc_ffffffff8f665554(r6, r4 + 0x1, stack[2020], r7);
            loc_ffffffff8f6674b8(r6 + (r4 + 0x1 - r7) * 0x4, r8, stack[2018]);
            loc_ffffffff8f6658bc(r8, stack[2030], zero_extend_32(stack[2018]), stack[2033] + (r4 - stack[2028]), zero_extend_32(stack[2028]), r6 + (r5 + 0x1 << (r5 + 0x1) * 0x4));
            loc_ffffffff8f6673fc(r6 + (r5 + 0x1 << (r5 + 0x1) * 0x4), stack[2025], stack[2018]);
            if (loc_ffffffff8f667618(stack[2023], r5, stack[2025], r7) != 0x0) {
                    do {
                    } while (loc_ffffffff8f667574(stack[2023], r5, r10, r5) == 0x0);
            }
            loc_ffffffff8f6673fc(stack[2034] + (r4 - stack[2024]), stack[2021], stack[2024]);
            loc_ffffffff8f6676cc(stack[2023], r5, stack[2021], stack[2024] + 0x1 >> (stack[2024] + 0x1) / 0x2, r8);
            loc_ffffffff8f665554(r6, 0x1 + r5 + (stack[2024] + 0x1 >> (stack[2024] + 0x1) / 0x2), r10, r5);
            loc_ffffffff8f6676cc(r6 + ((stack[2024] + 0x1 >> (stack[2024] + 0x1) / 0x2) + 0x1) * 0x4, r5, stack[2020], r7, r10);
            loc_ffffffff8f667574(r10 + stack[2031], r4, stack[2025], r7);
            loc_ffffffff8f6674b8(r10 + stack[2031], stack[2035], stack[2019]);
            loc_ffffffff8f6673b4(r10, r10 + stack[2031] << r4 * 0x4);
            loc_ffffffff8f6673b4(stack[2020], r10 + stack[2031] << r4 * 0x4);
            loc_ffffffff8f6673b4(stack[2021], r10 + stack[2031] << r4 * 0x4 << r4 * 0x2);
            loc_ffffffff8f6673b4(r6, (r10 + stack[2031] << r4 * 0x4) + 0x4);
            r0 = 0xf0;
    }
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

