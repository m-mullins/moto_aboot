    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0xe4;
    r5 = arg0;
    s0 = lr;
    stack[2037] = *0x8f7112f4;
    r0 = loc_ffffffff8f64aacc(0x108);
    COND = r4 != 0x0;
    if (COND) goto loc_8f60999c;

loc_8f60998c:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Error allocating mmc device\n");
    goto loc_8f60a8d4;

loc_8f60a8d4:
    r0 = r4;
    goto loc_8f60a8d8;

loc_8f60a8d8:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f60999c:
    if (r5 == 0x0) {
            loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/mmc_sdhci.c", 0x6bc, 0x8f6a4331);
    }
    r6 = r4 + 0x30;
    loc_ffffffff8f64ac90(r4 + 0xe8, r5, 0x1c);
    r8 = sp + 0x18;
    loc_ffffffff8f64adc8(r6, 0x0, 0xb8);
    loc_ffffffff8f656968(0x2, " Initializing MMC host data structure and clock!\n");
    loc_ffffffff8f61ab4c(r8, 0x0, 0x1);
    r3 = *(r4 + 0xf0);
    *(r4 + 0x14) = r8;
    *r4 = r3;
    *(r4 + 0x27) = *(r4 + 0x100);
    r0 = loc_ffffffff8f64aacc(0x14);
    COND = r5 != 0x0;
    if (!COND) {
            loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/mmc_sdhci.c", 0x442, 0x8f6a4331);
    }
    r3 = *(r4 + 0xf4);
    r0 = *(r4 + 0xe8);
    *(r5 + 0x10) = r8;
    *r5 = r3;
    r3 = *(r4 + 0xec);
    *(r5 + 0xb) = r0;
    *(r4 + 0x28) = r5;
    *(r5 + 0x4) = r3;
    *(r5 + 0xc) = *(r4 + 0x101);
    loc_ffffffff8f6021b4(r0);
    r0 = *(r4 + 0xe8);
    loc_ffffffff8f602254(r0, *(r4 + 0xfc));
    if (*(r4 + 0xe8) == 0x1) {
            loc_ffffffff8f619bb0();
    }
    loc_ffffffff8f60855c(r4, r5);
    loc_ffffffff8f6080d8(r4);
    r5 = zero_extend_32(loc_ffffffff8f6077d4(r4, 0x61a80));
    if (CPU_FLAGS & NE) goto loc_8f60a850;

loc_8f609ac4:
    r8 = sp + 0x98;
    *(r4 + 0x4c) = r5;
    *(r4 + 0x34) = 0x40ff8000;
    loc_ffffffff8f64adc8(r8, r5, 0x40, 0x40ff8000);
    r5 = zero_extend_32(loc_ffffffff8f607a2c(r4, r8));
    if (CPU_FLAGS & NE) goto loc_8f609bb0;

loc_8f609b14:
    loc_ffffffff8f64adc8(r8, r5, 0x40);
    r3 = 0x8;
    stack[2023] = r3;
    goto loc_8f609b40;

loc_8f609b40:
    if (loc_ffffffff8f607a2c(r4, r8) != 0x0) goto loc_8f609bb0;

loc_8f609b54:
    s0 = stack[2023];
    if (s0 < 0x0) goto loc_8f609b74;

loc_8f609b60:
    r5 = r5 + 0x1;
    loc_ffffffff8f60c558(0x1);
    if (r5 != 0x3e8) goto loc_8f609b40;

loc_8f609b74:
    if (s0 >= 0x0) {
            CMP(r5, 0x3e8);
    }
    if (CPU_FLAGS & NE) goto loc_8f609b90;

loc_8f609b80:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Card has busy status set. Init did not complete\n");
    goto loc_8f609bb0;

loc_8f609bb0:
    loc_ffffffff8f656968();
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "MMC card failed to respond, try for SD card\n");
    r0 = loc_ffffffff8f609664(r4, r6);
    COND = r5 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f60a838;

loc_8f609bdc:
    loc_ffffffff8f64adc8(r8, 0x0, 0x40);
    r0 = loc_ffffffff8f607a2c(r4, r8);
    if (r0 != 0x0) goto loc_8f609df8;

loc_8f609c1c:
    r3 = *(r4 + 0x48);
    r2 = stack[2026];
    stack[2004] = r3 >> r2 / 0x1000000;
    if (r3 <= 0x1) {
            r3 = 0x60;
            r0 = sp + 0x5f;
            asm{ ubfx       r3, r2, #0x8, #0x10 };
            stack[2005] = r3;
            r3 = 0x60;
            do {
                    lr = lr >> r3 / 0x20;
                    r12 = r3 & 0x1f;
                    r5 = r3 + 0x7;
                    r3 = r3 - 0x8;
                    r1 = *(0xffffffffffffffc4 + lr * 0x4 + sp + 0xe0);
                    r1 = r1 >> r12;
                    if (lr < r5 / 0x20) {
                            r12 = 0x20 - r12;
                    }
                    if (CPU_FLAGS & S) {
                            r1 = r1 |     r2;
    r12;
;
                    }
                    r0 = r0 + 0x1;
                    *r0 = r1;
            } while (r3 != 0x38);
            stack[2008] = 0x0 >> stack[2024] / 0x1000000;
            r3 = 0x4;
            r2 = stack[2024] << stack[2024] * 0x100 | r3 / 0x1000000;
            stack[2009] = r2;
            asm{ ubfx       r2, r3, #0x8, #0x4 };
            asm{ ubfx       r3, r3, #0xc, #0x8 };
            stack[2010] = r2;
    }
    else {
            r1 = sp + 0x5f;
            r3 = 0x60;
            asm{ ubfx       r2, r2, #0x8, #0x10 };
            stack[2005] = r2;
            do {
                    lr = lr >> r3 / 0x20;
                    r5 = sp + 0xe0;
                    r0 = r3 & 0x1f;
                    r12 = r3 + 0x7 >> (r3 + 0x7) / 0x20;
                    r2 = r5 + lr * 0x4;
                    r3 = r3 - 0x8;
                    if (r12 > lr) {
                            r12 = r5 + r12 * 0x4;
                    }
                    r2 = *(r2 + 0xffffffffffffffc4);
                    if (CPU_FLAGS & A) {
                            r12 = *(r12 + 0xffffffffffffffc4);
                    }
                    r2 = r2 >> r0;
                    if (CPU_FLAGS & A) {
                            r0 = 0x20 - r0;
                    }
                    if (CPU_FLAGS & A) {
                            r2 = r2 |     r0;
    r12;
;
                    }
                    r1 = r1 + 0x1;
                    *r1 = r2;
            } while (r3 != 0x30);
            stack[2023] = 0x4;
            r2 = stack[2024];
            r3 = 0x0;
            asm{ ubfx       r3, r2, #0x10, #0x8 };
            stack[2008] = r3;
            r3 = stack[2023];
            r2 = r2 << r2 * 0x10000 | r3 / 0x10000;
            stack[2009] = r2;
            asm{ ubfx       r2, r3, #0x8, #0x4 };
            asm{ ubfx       r3, r3, #0xc, #0x4 };
            stack[2010] = r2;
    }
    loc_ffffffff8f64ac90(r4 + 0x6c, sp + 0x58, 0x20);
    loc_ffffffff8f656968(0x2, "Decoded CID fields:\n");
    loc_ffffffff8f656968(0x2, "Manufacturer ID: %x\n", stack[2004]);
    loc_ffffffff8f656968(0x2, "OEM ID: 0x%x\n", stack[2005]);
    loc_ffffffff8f656968(0x2, "Product Name: %s\n", sp + 0x60);
    loc_ffffffff8f656968(0x2, "Product revision: %d.%d\n", sp + 0x60 >> stack[2008] / 0x10, stack[2008] & 0xf);
    loc_ffffffff8f656968(0x2, "Product serial number: %X\n", stack[2009]);
    loc_ffffffff8f656968(0x2, "Manufacturing date: %d %d\n", stack[2010], 0x3);
    loc_ffffffff8f64adc8(r8, 0x0, 0x40);
    r3 = 0x3;
    if (*(r4 + 0x48) > 0x1) goto loc_8f609e3c;

loc_8f609e08:
    r5 = 0x0;
    r3 = 0x40;
    r0 = loc_ffffffff8f607a2c(r4, r8);
    if (r0 == 0x0) {
            r3 = stack[2024];
    }
    if (CPU_FLAGS & E) {
            *(r4 + 0x30) = r3;
    }
    if (CPU_FLAGS & E) goto loc_8f609e7c;

loc_8f609e68:
    r5 = r0;
    if (CPU_FLAGS & NE) goto loc_8f60a838;

loc_8f609e7c:
    loc_ffffffff8f64adc8(r8, 0x0, 0x40);
    r3 = *(r4 + 0x30);
    r0 = loc_ffffffff8f607a2c(r4, r8, 0x9, 0x4, 0x8f6a4331, stack[1983]);
    COND = s0 != 0x0;
    if (COND) goto loc_8f609f84;

loc_8f609ec0:
    loc_ffffffff8f64ac90(r4 + 0x54, r8 + 0xc, 0x10);
    loc_ffffffff8f64adc8(r8, s0, 0x40);
    r3 = *(r4 + 0x30);
    r2 = 0x7;
    if (!CPU_FLAGS & E) {
            r3 = *(r4 + 0x48);
            if (r3 < 0x1) {
                    r3 = 0x2;
            }
            if (CPU_FLAGS & A) {
                    r3 = 0x1;
            }
    }
    r0 = loc_ffffffff8f607a2c(r4, r8);
    COND = s0 == 0x0;
    if (COND) goto loc_8f609f54;

loc_8f609f44:
    loc_ffffffff8f656968();
    goto loc_8f609f4c;

loc_8f609f4c:
    r5 = s0;
    goto loc_8f60a83c;

loc_8f60a83c:
    if ((r5 & 0xff) == 0x0) goto loc_8f60a85c;

loc_8f60a850:
    loc_ffffffff8f656968();
    r0 = 0x0;
    goto loc_8f60a8d8;

loc_8f60a85c:
    loc_ffffffff8f656968(0x1, "Done initialization of the card\n");
    loc_ffffffff8f656968(0x2, "erase_grpsize: %d\n", *(r4 + 0xbc));
    loc_ffffffff8f656968(0x2, "erase_grpmult: %d\n", *(r4 + 0xc0));
    loc_ffffffff8f656968(0x2, "wp_grpsize: %d\n", *(r4 + 0xc4));
    loc_ffffffff8f656968(0x2, "wp_grpen: %d\n", *(r4 + 0xc8) & 0x1);
    r2 = *(r4 + 0xc8);
    r0 = 0x2;
    r1 = "perm_wp: %d\n";
    asm{ ubfx       r2, r2, #0x1, #0x1 };
    loc_ffffffff8f656968(r0, r1, r2);
    r2 = *(r4 + 0xc8);
    r0 = 0x2;
    r1 = "temp_wp: %d\n";
    asm{ ubfx       r2, r2, #0x2, #0x1 };
    loc_ffffffff8f656968(r0, r1, r2);
    goto loc_8f60a8d4;

loc_8f609f54:
    *(r4 + 0x4c) = 0x1;
    if (*(r4 + 0x48) > 0x1) goto loc_8f609f8c;

loc_8f609f70:
    r0 = loc_ffffffff8f6098b4();
    COND = s0 == 0x0;
    if (COND) goto loc_8f609fa0;

loc_8f609f84:
    loc_ffffffff8f656968();
    goto loc_8f609f4c;

loc_8f609fa0:
    r3 = *(r4 + 0x48);
    r3 = r3 - 0x3;
    if (r3 > 0x1) goto loc_8f609fd0;

loc_8f609fb0:
    r1 = r4 + 0x50;
    r0 = loc_ffffffff8f609518(r4, r1);
    COND = r8 != 0x0;
    if (COND) {
            r0 = 0x0 ^ 0xffffffff;
    }
    if (CPU_FLAGS & NE) {
            r1 = "Failure getting card's ExtCSD information!\n";
    }
    if (CPU_FLAGS & E) goto loc_8f60a188;

loc_8f60a7ec:
    loc_ffffffff8f656968();
    goto loc_8f60a7f0;

loc_8f60a7f0:
    r5 = r8;
    goto loc_8f60a83c;

loc_8f60a188:
    r2 = *(r4 + 0x48);
    s0 = *(r4 + 0x60);
    r8 = *(r4 + 0x5c);
    r3 = r3 >> s0 / 0x40000000;
    stack[1988] = r3;
    if (r2 > 0x1) goto loc_8f60a3c8;

loc_8f60a1a4:
    COND = r3 != 0x1;
    r11 = *(r4 + 0x58);
    r3 = r3 >> r8 / 0x100000;
    r12 = r12 >> s0 / 0x100;
    stack[1990] = r3;
    if (COND) goto loc_8f60a28c;

loc_8f60a1bc:
    stack[1982] = 0x8f6a4331;
    r12 = zero_extend_32(r12);
    r3 = 0x200;
    stack[1991] = r3;
    asm{ ubfx       r2, sb, #0x10, #0x3 };
    stack[1992] = r3;
    stack[1993] = 0x2;
    r12 = 0x64 * r12;
    r3 = 0x8f67dc14;
    asm{ ubfx       r1, sb, #0x13, #0x4 };
    r11 = r8 << r8 * 0x10000 | r11 / 0x10000;
    r10 = 0x0;
    r3 = *(r3 + r2 * 0x4);
    asm{ ubfx       fp, fp, #0x0, #0x16 };
    r2 = 0x8f67dbd4;
    stack[1996] = r11;
    r11 = r11 + 0x1;
    stack[1997] = r12;
    r0 = *(r2 + r1 * 0x4);
    stack[1995] = r10;
    r0 = loc_ffffffff8f67b3c0(r0 * r3, 0xa, r2, r3, stack[1982], stack[1983], stack[1984]);
    r3 = 0x8f67eaa8;
    asm{ ubfx       r2, sb, #0x3, #0x4 };
    r3 = *(r3 + r2 * 0x4);
    stack[1998] = r0;
    r0 = *(0x8f67ea70 + r0 * 0x4);
    r0 = loc_ffffffff8f67b3c0(r0 * r3, 0xa, 0x8f67ea70, r3, stack[1982]);
    r3 = (stack[2003] | 0x8) & 0xf & 0xe;
    asm{ ubfx       r1, r2, #0xd, #0x1 };
    asm{ ubfx       r2, r2, #0xc, #0x1 };
    asm{ bfi        r3, r1, #0x1, #0x1 };
    asm{ bfi        r3, r2, #0x2, #0x1 };
    stack[2003] = r3;
    *(r4 + 0x44) = r3 >> r11 / 0x2000;
    *(r4 + 0x40) = r11 << r11 * 0x80000;
    stack[1999] = r0;
    goto loc_8f60a534;

loc_8f60a534:
    r1 = sp + 0x18;
    loc_ffffffff8f64ac90(r4 + 0x8c, r1, 0x40);
    r3 = *(r4 + 0x50);
    r2 = *(r3 + 0xaf);
    if (r2 == 0x0) {
            r2 = *(r4 + 0xc4);
    }
    if (CPU_FLAGS & E) {
            r1 = *(r4 + 0xbc);
    }
    if (CPU_FLAGS & E) {
            r2 = r2 + 0x1;
    }
    if (CPU_FLAGS & E) {
            r3 = *(r4 + 0xc0);
    }
    if (CPU_FLAGS & NE) {
            r3 = *(r3 + 0xe0);
    }
    if (CPU_FLAGS & E) {
            r3 = r3 + 0x1;
    }
    if (CPU_FLAGS & NE) {
            r3 = r3 << r3 * 0x400;
    }
    if (CPU_FLAGS & E) {
            r1 = r1 + 0x1;
    }
    if (CPU_FLAGS & E) {
            r2 = r2 * r1;
    }
    if (CPU_FLAGS & E) {
            r3 = r3 * r2;
    }
    *(r4 + 0x3c) = r3;
    loc_ffffffff8f656968();
    loc_ffffffff8f656968(0x2, "cmmc_structure: %u\n", stack[1988]);
    loc_ffffffff8f656968(0x2, "card_cmd_class: %x\n", stack[1990]);
    loc_ffffffff8f656968(0x2, "write_blk_len: %u\n", stack[1991]);
    loc_ffffffff8f656968(0x2, "read_blk_len: %u\n", stack[1992]);
    loc_ffffffff8f656968(0x2, "r2w_factor: %u\n", stack[1993]);
    loc_ffffffff8f656968(0x2, "sector_size: %u\n", stack[1994]);
    loc_ffffffff8f656968(0x2, "c_size_mult:%u\n", stack[1995]);
    loc_ffffffff8f656968(0x2, "c_size: %u\n", stack[1996]);
    loc_ffffffff8f656968(0x2, "nsac_clk_cycle: %u\n", stack[1997]);
    loc_ffffffff8f656968(0x2, "taac_ns: %u\n", stack[1998]);
    loc_ffffffff8f656968(0x2, "tran_speed: %u kbps\n", stack[1999]);
    r2 = stack[2003];
    r0 = 0x2;
    r1 = "erase_blk_len: %u\n";
    asm{ ubfx       r2, r2, #0x3, #0x1 };
    loc_ffffffff8f656968(r0, r1, r2);
    r2 = stack[2003];
    r0 = 0x2;
    r1 = "read_blk_misalign: %u\n";
    asm{ ubfx       r2, r2, #0x4, #0x1 };
    loc_ffffffff8f656968(r0, r1, r2);
    r2 = stack[2003];
    r0 = 0x2;
    r1 = "write_blk_misalign: %u\n";
    asm{ ubfx       r2, r2, #0x5, #0x1 };
    loc_ffffffff8f656968(r0, r1, r2);
    r2 = stack[2003];
    r0 = 0x2;
    r1 = "read_blk_partial: %u\n";
    asm{ ubfx       r2, r2, #0x6, #0x1 };
    loc_ffffffff8f656968(r0, r1, r2);
    loc_ffffffff8f656968(0x2, "write_blk_partial: %u\n", stack[2003] >> stack[2003] / 0x80);
    loc_ffffffff8f656968(0x2, "wp_grp_size: %u\n", *(r4 + 0x3c));
    asm{ ldrd       r2, r3, [r4, #0x40] };
    loc_ffffffff8f656968(0x2, "Card Capacity: %llu Bytes\n");
    if (*(r4 + 0x48) > 0x4) goto loc_8f60a7a8;

loc_8f60a6cc:
    r8 = *(r4 + 0xf8);
    if (r8 == 0x2) {
            if (*(r4 + 0x20) == 0x0) {
                    r8 = 0x0;
            }
    }
    else {
            if (r8 != 0x1) {
                    r8 = 0x0;
            }
    }
    if (loc_ffffffff8f6079a0(r4, r8) == 0x0) goto loc_8f60a71c;

loc_8f60a710:
    loc_ffffffff8f656968();
    r5 = 0x1;
    goto loc_8f60a83c;

loc_8f60a71c:
    if ((*(r4 + 0x26) == 0x0) || ((*(*(r4 + 0x50) + 0xc4) & 0x30) == 0x0)) goto loc_8f60a738;

loc_8f60a8ec:
    loc_ffffffff8f656968(0x1, "SDHC Running in HS200 mode\n");
    r0 = loc_ffffffff8f6093d4(r4, r6, r8);
    COND = r8 == 0x0;
    if (COND) goto loc_8f60a7f8;

loc_8f60a79c:
    loc_ffffffff8f656968();
    goto loc_8f60a7f0;

loc_8f60a7f8:
    *(r4 + 0x38) = 0x200;
    if (*(*(r4 + 0x50) + 0xa2) == 0x0) {
            r0 = loc_ffffffff8f608f6c(r4, r6, 0x1, 0xa2, 0x1);
            COND = r5 == 0x0;
            if (!COND) {
                    loc_ffffffff8f656968();
            }
    }
    goto loc_8f60a83c;

loc_8f60a738:
    if ((*(r4 + 0x24) == 0x0) || ((*(*(r4 + 0x50) + 0xc4) & 0xc) == 0x0)) goto loc_8f60a754;

loc_8f60a91c:
    loc_ffffffff8f656968(0x1, "SDHC Running in DDR mode\n");
    r0 = loc_ffffffff8f60935c(r4, r6);
    COND = r8 == 0x0;
    if (COND) goto loc_8f60a7f8;
    goto loc_8f60a79c;

loc_8f60a754:
    loc_ffffffff8f656968(0x1, "SDHC Running in High Speed mode\n");
    r0 = loc_ffffffff8f6092dc(r4, r6);
    COND = s0 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f609f44;

loc_8f60a77c:
    r0 = loc_ffffffff8f609084(r4, r6, r8);
    COND = r8 == 0x0;
    if (COND) goto loc_8f60a7f8;
    goto loc_8f60a79c;

loc_8f60a7a8:
    r8 = *(r4 + 0xcc);
    r0 = r4;
    r1 = r6;
    asm{ ubfx       r8, r8, #0x2, #0x1 };
    r0 = loc_ffffffff8f609800(r0, r1, r8);
    COND = s0 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f609f84;

loc_8f60a7d0:
    r0 = loc_ffffffff8f6079a0(r4, r8);
    COND = r8 == 0x0;
    if (COND) goto loc_8f60a7f8;
    goto loc_8f60a7ec;

loc_8f60a28c:
    r10 = *(r4 + 0x54);
    asm{ ubfx       r1, sb, #0x10, #0x3 };
    asm{ ubfx       r0, sb, #0x13, #0x4 };
    stack[1986] = r12;
    asm{ ubfx       r3, sl, #0x16, #0x4 };
    r2 = r3 - 0x9;
    if (r2 < 0x2) {
            r2 = 0x1;
    }
    if (CPU_FLAGS & A) {
            r3 = 0x200;
    }
    if (CPU_FLAGS & B) {
            r3 = r2 << r3;
    }
    stack[1991] = r3;
    asm{ ubfx       r3, r8, #0x10, #0x4 };
    r2 = r3 - 0x9;
    if (r2 < 0x2) {
            r2 = 0x1;
    }
    if (CPU_FLAGS & A) {
            r3 = 0x200;
    }
    if (CPU_FLAGS & B) {
            r3 = r2 << r3;
    }
    stack[1992] = r3;
    stack[1985] = r3;
    r2 = *(0x8f67dc14 + r1 * 0x4);
    r0 = *(0x8f67dbd4 + r0 * 0x4);
    r1 = 0xa;
    r0 = loc_ffffffff8f67b3c0(r0 * r2, r1, r2);
    r2 = 0x8f67eaa8;
    asm{ ubfx       r1, sb, #0x3, #0x4 };
    r2 = *(r2 + r1 * 0x4);
    stack[1998] = r0;
    r0 = *(0x8f67ea70 + r0 * 0x4);
    r1 = 0xa;
    r0 = loc_ffffffff8f67b3c0(r0 * r2, r1, r2);
    r12 = stack[1986];
    r2 = 0x64;
    asm{ ubfx       r1, fp, #0xf, #0x3 };
    stack[1995] = r1;
    r1 = r1 + 0x2;
    r12 = r2 * zero_extend_32(r12);
    asm{ ubfx       r2, sl, #0x1a, #0x3 };
    stack[1993] = r2;
    asm{ ubfx       r2, fp, #0x7, #0x7 };
    r2 = r2 + 0x1;
    stack[1994] = r2;
    asm{ ubfx       r2, fp, #0xe, #0x1 };
    stack[1997] = r12;
    stack[1999] = r0;
    r0 = stack[2003];
    asm{ bfi        r0, r2, #0x3, #0x1 };
    asm{ ubfx       r2, r8, #0xd, #0x1 };
    asm{ bfi        r0, r2, #0x4, #0x1 };
    asm{ ubfx       r2, r8, #0xe, #0x1 };
    asm{ bfi        r0, r2, #0x5, #0x1 };
    asm{ ubfx       r2, r8, #0xf, #0x1 };
    asm{ bfi        r0, r2, #0x6, #0x1 };
    asm{ ubfx       r2, sl, #0x15, #0x1 };
    asm{ bfi        r0, r2, #0x7, #0x1 };
    r2 = r2 << r8 * 0x4 | r11 / 0x40000000;
    asm{ bfi        r0, ip, #0x0, #0x1 };
    asm{ ubfx       r2, r2, #0x0, #0xc };
    stack[1996] = r2;
    r2 = r2 + 0x1;
    asm{ ubfx       ip, sl, #0xd, #0x1 };
    asm{ bfi        r0, ip, #0x1, #0x1 };
    asm{ ubfx       sl, sl, #0xc, #0x1 };
    r11 = r11 & 0x7f;
    asm{ bfi        r0, sl, #0x2, #0x1 };
    stack[2003] = r0;
    asm{ umull      r2, r3, r3, r2 };
    goto loc_8f60a4f0;

loc_8f60a4f0:
    asm{ strd       r2, r3, [r4, #0x40] };
    goto loc_8f60a534;

loc_8f60a3c8:
    r1 = 0xfff;
    stack[1982] = 0x8f6a4331;
    asm{ ubfx       r1, sb, #0x8, #0x8 };
    r0 = 0x64;
    r10 = *(r4 + 0x54);
    asm{ ubfx       r3, sb, #0x1a, #0x4 };
    r1 = r0 * r1;
    asm{ ubfx       r0, sb, #0x10, #0x3 };
    asm{ ubfx       sb, sb, #0x13, #0x4 };
    r11 = *(r4 + 0x58);
    asm{ ubfx       r2, sl, #0x16, #0x4 };
    stack[1990] = r3 >> r8 / 0x100000;
    r3 = 0x1;
    asm{ ubfx       ip, fp, #0xf, #0x3 };
    stack[1997] = r1;
    r2 = r3 << r2;
    r1 = 0x8f67dc14;
    stack[1991] = r2;
    asm{ ubfx       r2, r8, #0x10, #0x4 };
    r2 = r3 << r2;
    asm{ ubfx       r3, sl, #0x1a, #0x3 };
    r1 = *(r1 + r0 * 0x4);
    stack[1993] = r3;
    r3 = r3 << r8 * 0x4 | r11 / 0x40000000;
    stack[1992] = r2;
    r0 = *(0x8f67dbd4 + 0x8f67dbd4 * 0x4);
    asm{ ubfx       r3, r3, #0x0, #0xc };
    stack[1995] = r12;
    stack[1996] = r3;
    r0 = loc_ffffffff8f67b3c0(r0 * r1, 0xa, r2, r3, stack[1982], stack[1983], stack[1984]);
    r1 = stack[2003];
    r3 = r3;
    r2 = r2;
    r12 = r12;
    stack[1998] = r0;
    asm{ ubfx       r0, r8, #0xd, #0x1 };
    asm{ bfi        r1, r0, #0x4, #0x1 };
    asm{ ubfx       r0, r8, #0xe, #0x1 };
    asm{ bfi        r1, r0, #0x5, #0x1 };
    asm{ ubfx       r8, r8, #0xf, #0x1 };
    asm{ ubfx       r0, sl, #0x15, #0x1 };
    asm{ bfi        r1, r8, #0x6, #0x1 };
    asm{ bfi        r1, r0, #0x7, #0x1 };
    r0 = 0x0;
    stack[1999] = r0;
    asm{ ubfx       r0, fp, #0xa, #0x5 };
    asm{ ubfx       r0, fp, #0x5, #0x5 };
    asm{ bfi        r1, r0, #0x0, #0x1 };
    asm{ ubfx       r0, sl, #0xd, #0x1 };
    asm{ bfi        r1, r0, #0x1, #0x1 };
    asm{ ubfx       sl, sl, #0xc, #0x1 };
    asm{ bfi        r1, sl, #0x2, #0x1 };
    stack[2003] = r1;
    r1 = 0xfff;
    if (r3 == r1) goto loc_8f60a4f8;

loc_8f60a4d8:
    r3 = r3 + 0x1;
    r1 = SAR(r1, r2 / 0x80000000);
    r12 = r3 << r12 + 0x2;
    asm{ umull      r2, r3, ip, r2 };
    goto loc_8f60a4f0;

loc_8f60a4f8:
    r3 = *(r4 + 0x50);
    r1 = *(r3 + 0xd6);
    r1 = r1 << r1 * 0x10000 | *(r3 + 0xd7) * 0x1000000;
    r2 = *(r3 + 0xd4);
    r3 = *(r3 + 0xd5);
    *(r4 + 0x44) = SAR(r3, (r1 | r2 | r3 * 0x100) / 0x80000000) << (SAR(r3, (r1 | r2 | r3 * 0x100) / 0x80000000)) * 0x200 | (r1 | r2 | r3 * 0x100) / 0x800000;
    *(r4 + 0x40) = (r1 | r2 | r3 * 0x100) << (r1 | r2 | r3 * 0x100) * 0x200;
    goto loc_8f60a534;

loc_8f609fd0:
    loc_ffffffff8f64adc8(r8, 0x0, 0x40);
    r0 = loc_ffffffff8f6090e4(r4, *(r4 + 0x30));
    if (r0 == 0x0) goto loc_8f60a004;

loc_8f609ff4:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Failed sending App command\n");
    goto loc_8f60a710;

loc_8f60a004:
    s0 = 0x1;
    stack[2033] = 0x8;
    r0 = loc_ffffffff8f607a2c(r4, r8);
    r3 = 0x8f6b7c80;
    COND = r11 != 0x0;
    if (COND) goto loc_8f60a710;

loc_8f60a054:
    r10 = 0x40;
    loc_ffffffff8f64ac90(sp + 0x58, r3, 0x40);
    r3 = stack[2004];
    r2 = stack[2005];
    r1 = r11;
    asm{ rev        r3, r3 };
    r0 = sp + 0x58;
    *(r4 + 0x64) = r3;
    asm{ rev        r2, r2 };
    *(r4 + 0x68) = r2;
    asm{ ubfx       r2, r3, #0x10, #0x4 };
    *(r4 + 0xcc) = r2;
    r2 = r3 & 0x2;
    *(r4 + 0xd8) = r2;
    asm{ ubfx       r2, r3, #0x18, #0x4 };
    asm{ ubfx       r3, r3, #0xf, #0x1 };
    *(r4 + 0xd0) = r2;
    *(r4 + 0xd4) = r3;
    loc_ffffffff8f64adc8(r0, r1, r10, r3);
    r0 = loc_ffffffff8f6090e4(r4, *(r4 + 0x30));
    if (r0 == 0x0) goto loc_8f60a0e0;

loc_8f60a0c4:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Failed sending App command\n");
    goto loc_8f60a710;

loc_8f60a0e0:
    r0 = loc_ffffffff8f607a2c(r4, sp + 0x58);
    COND = s0 != 0x0;
    if (COND) goto loc_8f60a710;

loc_8f60a120:
    loc_ffffffff8f64ac90(r8, 0x8f6b7d00, 0x40);
    r3 = r8 + 0x40;
    r0 = s0;
    do {
            r2 = *(r8 + r0);
            r0 = r0 + 0x4;
            COND = r0 != 0x40;
            asm{ rev        r2, r2 };
            r3 = r3 + 0xfffffffffffffffc;
            *r3 = r2;
    } while (COND);
    r3 = stack[2033];
    r1 = 0x1;
    asm{ ubfx       r2, r3, #0xc, #0x4 };
    *(r4 + 0xdc) = r1 << r2 + 0x4;
    r3 = zero_extend_32(stack[2033] | r3 * 0x100);
    *(r4 + 0xe0) = r3;
    goto loc_8f60a188;

loc_8f609f8c:
    r0 = loc_ffffffff8f6092dc();
    COND = s0 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f609f84;
    goto loc_8f609fa0;

loc_8f60a838:
    loc_ffffffff8f656968();
    goto loc_8f60a83c;

loc_8f609e3c:
    *(r4 + 0x30) = 0x2;
    r0 = loc_ffffffff8f607a2c(r4, r8);
    goto loc_8f609e68;

loc_8f609df8:
    r5 = r0;
    goto loc_8f60a838;

loc_8f609b90:
    *(r4 + 0x34) = s0;
    if ((s0 & 0x40000000) != 0x0) {
            r3 = 0x3;
    }
    if (CPU_FLAGS & E) {
            r3 = 0x4;
    }
    *(r4 + 0x48) = r3;
    goto loc_8f609bdc;

