    r0 = arg0;
    r6 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r4 = r0;
    r5 = arg1;
    stack[2037] = *0x8f7112f4;
    if (*(r0 + 0x4c) != 0x0) goto loc_8f612b40;

loc_8f61250c:
    r3 = *(r0 + 0x28);
    if (r3 == 0x0) {
            r0 = *(r0 + 0x30);
            r0 = loc_ffffffff8f67b488(r0, *(r4 + 0x2c));
            *(r4 + 0x28) = zero_extend_32((SAR(r3, (r0 + r0 / 0x80000000) / 0x2)) - 0x3) | 0x300;
            r3 = *(r4 + 0x4);
            r3 = *(r3 + 0x8);
            COND = r2 != 0x0;
            asm{ ubfx       ip, r3, #0x2, #0x3 };
            if (COND) {
                    r2 = r2 << r2 * 0x10;
            }
            r1 = 0x2;
            r12 = r1 << r12;
            if (CPU_FLAGS & E) {
                    r2 = 0x10;
            }
            *(r4 + 0x40) = r2;
            COND = r2 != 0x0;
            r0 = *(r4 + 0x40);
            if (COND) {
                    r2 = r2 >> r2 / 0x2;
            }
            asm{ ubfx       r3, r3, #0x7, #0x3 };
            if (CPU_FLAGS & E) {
                    r2 = 0x10;
            }
            *(r4 + 0x44) = r2;
            r2 = *(r4 + 0x44);
            *(r4 + 0x40) = SAR(r0 + r0 / 0x80000000, (r0 + r0 / 0x80000000) / 0x2);
            *(r4 + 0x44) = SAR(r2 + r2 / 0x80000000, (r2 + r2 / 0x80000000) / 0x2);
            *(r4 + 0x38) = r12 * (SAR(r0 + r0 / 0x80000000, (r0 + r0 / 0x80000000) / 0x2));
            *(r4 + 0x3c) = (r1 << r3) * (SAR(r2 + r2 / 0x80000000, (r2 + r2 / 0x80000000) / 0x2));
    }
    r0 = *(r4 + 0xc);
    loc_ffffffff8f60caac(r0);
    r8 = r4 + 0x4;
    *(*r8 + 0xc) = 0x1;
    r0 = loc_ffffffff8f6123e4(r8, 0x0);
    COND = s0 == 0x0;
    if (COND) goto loc_8f6125e8;

loc_8f6125d4:
    loc_ffffffff8f656968(0x1, "QUP Busy:Trying to recover\n");
    r6 = s0;
    goto loc_8f612b1c;

loc_8f612b1c:
    r0 = *(r4 + 0xc);
    *(r4 + 0x14) = 0x0;
    *(r4 + 0x18) = 0x0;
    *(r4 + 0x20) = 0x0;
    *(r4 + 0x1c) = 0x0;
    loc_ffffffff8f60ca78(r0);
    r0 = r6;
    goto loc_8f612b44;

loc_8f612b44:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f6125e8:
    r7 = r6;
    **(r4 + 0x4) = s0;
    *(*(r4 + 0x4) + 0x18) = 0xff0;
    *(*(r4 + 0x4) + 0x20) = 0x7c;
    **(r4 + 0x4) = 0x20f;
    r2 = 0xfffffc;
    *(*(r4 + 0x4) + 0x400) = s0;
    *(*(r4 + 0x4) + 0x404) = r2;
    r3 = *(r5 + 0x4);
    *(r4 + 0x18) = s0;
    *(r4 + 0x14) = r5;
    *(r4 + 0x1c) = r3;
    goto loc_8f61263c;

loc_8f61263c:
    if (r7 == 0x0) goto loc_8f612b1c;

loc_8f612644:
    r3 = *(r4 + 0x38);
    *(r4 + 0x20) = 0x0;
    *(r4 + 0x48) = r3;
    if (loc_ffffffff8f6123e4(r8, 0x10) != 0x0) goto loc_8f612b08;

loc_8f612668:
    r11 = *(r4 + 0x14);
    r10 = *(r11 + 0x2);
    r10 = r10 & 0x1;
    COND = r10 == 0x0;
    if (COND) goto loc_8f612694;

loc_8f612678:
    r0 = loc_ffffffff8f61234c(r4, *(r4 + 0x1c));
    if (r0 != 0x0) goto loc_8f612b18;

loc_8f61268c:
    r10 = r0;
    goto loc_8f612774;

loc_8f612774:
    r0 = loc_ffffffff8f61246c(r4, 0x1);
    if (r0 < 0x0) goto loc_8f612b18;

loc_8f612788:
    r3 = *(r4 + 0x4);
    *(r3 + 0x400) = *(r4 + 0x28);
    goto loc_8f612794;

loc_8f612794:
    r0 = loc_ffffffff8f61246c(r4, 0x3);
    if (r0 < 0x0) goto loc_8f612b18;

loc_8f6127a8:
    r12 = 0x0;
    r2 = r12;
    if (r10 == r12) {
            do {
                    r3 = *(r5 + 0x2);
                    r1 = *(r4 + 0x1c);
                    if ((r3 & 0x1) != 0x0) {
                            if (r1 == *(r5 + 0x4)) {
                                    r0 = *r5;
                                    r3 = *(r4 + 0x4);
                                    if (r1 != 0x100) {
                                            r1 = zero_extend_32(r1);
                                    }
                                    if (CPU_FLAGS & E) {
                                            r1 = 0x0;
                                    }
                                    COND = (r2 & 0x3) != 0x0;
                                    r1 = r1 | 0x400;
                                    r0 = r0 << r0 * 0x2 | 0x1;
                                    r2 = r2 + 0x4;
                                    if (COND) {
                                            r1 = zero_extend_32(r1);
                                    }
                                    r0 = zero_extend_32(r0) | 0x100;
                                    if (CPU_FLAGS & E) {
                                            r1 = r0 | r1 * 0x10000;
                                    }
                                    if (CPU_FLAGS & NE) {
                                            r0 = r12 | r0 * 0x10000;
                                    }
                                    if (CPU_FLAGS & NE) {
                                            *(r3 + 0x110) = r0;
                                    }
                                    if (CPU_FLAGS & NE) {
                                            r3 = *(r4 + 0x4);
                                    }
                                    *(r3 + 0x110) = r1;
                            }
                    }
                    else {
                            r10 = *(r4 + 0x18);
                            r3 = r2 + 0x2;
                            r0 = *(r4 + 0x48);
                            lr = *r5;
                            if (r10 != 0x0) {
                                    r1 = r1 + 0x1;
                            }
                            r0 = r0 - r2 / 0x2;
                            if (CPU_FLAGS & NE) {
                                    r2 = 0x1;
                            }
                            if (!CPU_FLAGS & NE) {
                                    COND = (r2 & 0x3) != 0x0;
                                    r1 = r1 + 0x1;
                                    r11 = zero_extend_32(r11 << lr * 0x2);
                                    r2 = r11 | 0x100;
                                    if (COND) {
                                            r11 = *(r4 + 0x4);
                                    }
                                    if (CPU_FLAGS & E) {
                                            r2 = zero_extend_32(r2);
                                    }
                                    if (CPU_FLAGS & NE) {
                                            r2 = r12 | r2 * 0x10000;
                                    }
                                    if (CPU_FLAGS & NE) {
                                            *(r11 + 0x110) = r2;
                                    }
                                    if (CPU_FLAGS & NE) {
                                            r2 = r10;
                                    }
                            }
                            if (r1 >= r0) {
                                    r1 = r0;
                            }
                            r0 = 0x1;
                            r1 = r1 - 0x1;
                            while (r0 < r1) {
                                    r10 = *(r4 + 0x18);
                                    COND = (r3 & 0x3) != 0x0;
                                    r11 = *(r5 + 0x8);
                                    r3 = r3 + 0x2;
                                    r0 = r0 + 0x1;
                                    if (CPU_FLAGS & NE) {
                                            r10 = *(r11 + r10);
                                    }
                                    if (CPU_FLAGS & E) {
                                            r2 = *(r11 + r10);
                                    }
                                    if (CPU_FLAGS & NE) {
                                            r10 = r10 | 0x200;
                                    }
                                    if (CPU_FLAGS & E) {
                                            r2 = r2 | 0x200;
                                    }
                                    if (CPU_FLAGS & NE) {
                                            r10 = r2 | r10 * 0x10000;
                                    }
                                    if (CPU_FLAGS & NE) {
                                            *(r0 + 0x110) = r10;
                                    }
                                    *(r4 + 0x18) = *(r4 + 0x18) + 0x1;
                            }
                            r10 = *(r5 + 0x4);
                            r0 = *(r4 + 0x18);
                            r1 = r10 - 0x1;
                            if (r0 < r1) {
                                    r1 = 0x200;
                            }
                            if (!CPU_FLAGS & L) {
                                    if (r7 <= 0x1) {
                                            r1 = 0x300;
                                    }
                                    if (CPU_FLAGS & G) {
                                            r1 = 0x200;
                                    }
                            }
                            r11 = *(r5 + 0x8);
                            if ((r3 & 0x3) == 0x0) {
                                    if (r7 > 0x1) {
                                            if (((*(r5 + 0xc) == lr) && ((*(r5 + 0xe) & 0x1) != 0x0)) && (r3 == (*(r4 + 0x48) - 0x2) * 0x2)) {
                                                    r3 = r3 + 0x2;
                                                    *(*(r4 + 0x4) + 0x110) = *(r11 + r0) | 0x10000 | r1;
                                            }
                                            else {
                                                    r12 = *(r11 + r0);
                                                    r12 = r1 | r12;
                                            }
                                    }
                                    else {
                                            *(*(r4 + 0x4) + 0x110) = r1 | *(r11 + r0);
                                    }
                            }
                            else {
                                    *(*(r4 + 0x4) + 0x110) = r2 | (r1 | *(r11 + r0)) * 0x10000;
                            }
                            r2 = r3 + 0x2;
                            r3 = *(r4 + 0x18);
                            *(r4 + 0x18) = r3 + 0x1;
                            *(r4 + 0x1c) = r10 - r3 + 0x1;
                    }
                    r3 = *(r4 + 0x48);
                    if (r2 >= r3 * 0x2) {
                        break;
                    }
                    r3 = *(r5 + 0x2);
                    r3 = r3 & 0x1;
                    COND = r3 != 0x0;
                    if ((((COND) || (r7 <= 0x1)) || (*(r5 + 0xc) != *r5)) || (*(r5 + 0xe) == 0x0)) {
                        break;
                    }
                    *(r4 + 0x18) = r3;
                    r3 = *(r5 + 0x10);
                    r7 = r7 - 0x1;
                    *(r4 + 0x14) = r5 + 0xc;
                    r5 = r5 + 0xc;
                    *(r4 + 0x1c) = r3;
            } while (true);
            r10 = 0x1;
    }
    r0 = loc_ffffffff8f61246c(r4, 0x1);
    if (r0 < 0x0) goto loc_8f612b18;

loc_8f6129c4:
    r2 = *(r4 + 0x20);
    if (r2 == 0x0) goto loc_8f6129f8;

loc_8f6129d0:
    if ((r2 & 0x8) != 0x0) {
            r3 = *(r4 + 0x14);
    }
    loc_ffffffff8f656968();
    r6 = *(r4 + 0x20);
    goto loc_8f612b1c;

loc_8f6129f8:
    r3 = *(r4 + 0x14);
    r3 = *(r3 + 0x2);
    r3 = r3 & 0x1;
    COND = r3 != 0x0;
    if (COND) {
            r3 = r2;
    }
    if (CPU_FLAGS & E) goto loc_8f612a78;

loc_8f612a0c:
    r0 = *(r4 + 0x14);
    r1 = *(r4 + 0x18);
    if (r1 >= *(r0 + 0x4)) goto loc_8f612a38;

loc_8f612a20:
    r12 = *(r4 + 0x4);
    lr = *(r12 + 0x18);
    if ((r3 & 0x1) != 0x0) goto loc_8f612a58;

loc_8f612a30:
    if ((lr & 0x20) != 0x0) goto loc_8f612a48;

loc_8f612a38:
    *(r4 + 0x1c) = *(r4 + 0x1c) - r3;
    goto loc_8f612a7c;

loc_8f612a7c:
    r3 = *(r4 + 0x1c);
    if (r3 > 0x0) goto loc_8f612794;

loc_8f612a88:
    r2 = r5;
    if (!CPU_FLAGS & NE) {
            r7 = r7 - 0x1;
            COND = r7 != 0x0;
            if (COND) {
                    *(r4 + 0x18) = r3;
            }
            r5 = r5 + 0xc;
            if (CPU_FLAGS & NE) {
                    r3 = *(r2 + 0x10);
            }
            if (CPU_FLAGS & NE) {
                    *(r4 + 0x14) = r5;
            }
            if (CPU_FLAGS & NE) {
                    *(r4 + 0x1c) = r3;
            }
    }
    r10 = 0x0;
    goto loc_8f612aac;

loc_8f612aac:
    r3 = *(r4 + 0x4);
    r3 = *(r3 + 0x404);
    if ((r3 & 0x1) != 0x0) goto loc_8f612acc;

loc_8f612abc:
    if ((r3 & 0x100) == 0x0) goto loc_8f61263c;

loc_8f612ac4:
    r0 = *(r4 + 0x34);
    loc_ffffffff8f60c5a0(r0);
    goto loc_8f612acc;

loc_8f612acc:
    r3 = r10 + 0x1;
    if (r10 != 0x3e8) goto loc_8f612aec;

loc_8f612ad8:
    loc_ffffffff8f60c5a0(0x64);
    r3 = 0x3e9;
    goto loc_8f612ae4;

loc_8f612ae4:
    r10 = r3;
    goto loc_8f612aac;

loc_8f612aec:
    if (r3 != 0x7d0) goto loc_8f612ae4;

loc_8f612af4:
    loc_ffffffff8f656968(0x1, "Error waiting for write ready\n");
    r6 = 0x6d ^ 0xffffffff;
    goto loc_8f612b1c;

loc_8f612a48:
    *(*(r0 + 0x8) + r1) = *(r12 + 0x218);
    goto loc_8f612a64;

loc_8f612a64:
    r3 = r3 + 0x1;
    *(r4 + 0x18) = *(r4 + 0x18) + 0x1;
    goto loc_8f612a0c;

loc_8f612a58:
    r0 = *(r0 + 0x8);
    asm{ ubfx       ip, r2, #0x10, #0x8 };
    *(r0 + r1) = r12;
    goto loc_8f612a64;

loc_8f612a78:
    r10 = r3;
    goto loc_8f612a7c;

loc_8f612b18:
    r6 = r0;
    goto loc_8f612b1c;

loc_8f612694:
    r3 = *(r4 + 0x38);
    r0 = *(r11 + 0x4);
    COND = r0 < r3 - 0x1;
    r3 = *(r4 + 0x4);
    if (COND) {
            r2 = 0xc000;
    }
    if (CPU_FLAGS & L) {
            *(r3 + 0x8) = r2;
    }
    if (!CPU_FLAGS & L) {
            r1 = *(r4 + 0x40);
            r10 = r0 + 0x1;
            r0 = loc_ffffffff8f67b488();
            *(r3 + 0x8) = 0xc400;
            *(r4 + 0x48) = *(r4 + 0x40);
            r10 = r10 + r0;
    }
    if (((r7 > 0x1) && (*(r11 + 0xc) == *r11)) && (*(r11 + 0xe) == 0x1)) {
            r0 = loc_ffffffff8f61234c(r4, *(r11 + 0x10));
            r3 = *(r4 + 0x40);
            r11 = r0;
            loc_ffffffff8f67b564(r10, r3);
            if (r3 == r3 - 0x1) {
                    r10 = r10 + 0x3;
            }
            if (CPU_FLAGS & NE) {
                    r10 = r10 + 0x2;
            }
    }
    else {
            r11 = 0x0;
    }
    r3 = *(r4 + 0x40);
    if (*(r4 + 0x48) == r3) {
            r3 = *(r4 + 0x4);
    }
    if (CPU_FLAGS & E) {
            *(r3 + 0x100) = r10;
    }
    if (r11 != 0x0) goto loc_8f612b10;

loc_8f612760:
    r10 = *(r4 + 0x48);
    r3 = *(r4 + 0x40);
    r3 = r10 - r3;
    r10 = 0x0 - r3;
    r10 = r10 + r3 + CARRY(FLAGS);
    goto loc_8f612774;

loc_8f612b10:
    r6 = r11;
    goto loc_8f612b1c;

loc_8f612b08:
    r6 = 0x4 ^ 0xffffffff;
    goto loc_8f612b1c;

loc_8f612b40:
    r0 = 0x4 ^ 0xffffffff;
    goto loc_8f612b44;

