    r2 = arg2;
    r1 = arg1;
    r0 = arg0;
    if (r2 != 0x0) {
            CMP(r1, 0x0);
    }
    r6 = r0;
    r0 = *0x8f7112f4;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r4 = r1;
    if (CPU_FLAGS & NE) {
            r5 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r5 = 0x1;
    }
    stack[2037] = r0;
    if (CPU_FLAGS & E) {
            r0 = 0x3;
    }
    if (!CPU_FLAGS & E) {
            r3 = r5;
            do {
                    r1 = *(r4 + r3);
                    r3 = r3 + 0x1;
                    if (r1 == 0xa) {
                            r5 = r5 + 0x1;
                    }
                    r5 = r5 + 0x1;
            } while (r3 != r2);
            stack[2034] = r6 + 0xa4;
            if ((*(r6 + 0xa4) & 0x8) == 0x0) {
                    while ((*(r6 + 0xb4) & 0x80) == 0x0) {
                            loc_ffffffff8f60c5a0(0x1);
                    }
            }
            r3 = *0x8f6ac0f0;
            *0x8f6ac0f0 = r3 + 0x1;
            if (r3 == 0x0) {
                    loc_ffffffff8f619448();
            }
            r11 = r11 >> r5 / 0x4;
            if ((r5 & 0x3) != 0x0) {
                    r11 = r11 + 0x1;
            }
            s0 = r5 - 0x4;
            r8 = 0x0;
            *(r6 + 0x40) = r5;
            *(r6 + 0xa8) = 0x300;
            while (r8 < r11) {
                    stack[2035] = 0x0;
                    r5 = 0x0;
                    r12 = 0x7f ^ 0xffffffff;
                    r3 = r5;
                    r7 = r5;
                    while (r3 < stack[2035]) {
                            r0 = *(r4 + r7);
                            r2 = r2 << r3 * 0x8;
                            r1 = r4 + r7;
                            if (r0 == 0xa) {
                                    *(r4 + r7) = r12;
                            }
                            if (CPU_FLAGS & E) {
                                    r0 = 0xd;
                            }
                            if (CPU_FLAGS & E) {
                                    r5 = r5 |     r0;
    r2;
;
                            }
                            if (!CPU_FLAGS & E) {
                                    r7 = r7 + 0x1;
                                    if (r0 == 0x80) {
                                            r0 = 0xa;
                                    }
                                    if (CPU_FLAGS & E) {
                                            *r1 = r0;
                                    }
                                    r7 = zero_extend_32(r7);
                                    r5 = r5 |     *r1;
    r2;
;
                            }
                            r3 = r3 + 0x1;
                    }
                    do {
                            r2 = stack[2034];
                            if ((*r2 & 0x4) != 0x0) {
                                break;
                            }
                            loc_ffffffff8f60c5a0(0x1);
                    } while (true);
                    *(r6 + 0x100) = r5;
                    r4 = r4 + r7;
                    r5 = s0;
                    r8 = r8 + 0x1;
                    s0 = s0 - 0x4;
            }
            r4 = *0x8f6ac0f0;
            *0x8f6ac0f0 = r4 - 0x1;
            if (r4 == 0x1) {
                    loc_ffffffff8f619438();
            }
            r0 = 0x0;
    }
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

