    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r4 = r0;
    r1 = *(r0 + 0x74);
    stack[2043] = *0x8f7112f4;
    r2 = *r0;
    if (r1 != 0x0) {
            r3 = *(r0 + 0xff);
            r1 = *(r4 + 0x84);
            COND = r3 != 0x0;
            r3 = *(r0 + 0x7c);
            if (COND) {
                    r2 = r2 >> r2 / 0x2;
            }
            r5 = *(r4 + 0x88);
            r12 = r12 << 0x2 * 0x80;
            asm{ stm        sp, {r0, r1} };
            r12 = r12 | r3 * 0x100 | 0x1 | r1 * 0x10;
            r12 = r12 | r5 * 0x8 | *(r4 + 0x8c) * 0x4;
            r12 = r12 | *(r4 + 0x90) * 0x2;
            r5 = *(r4 + 0x78);
            r5 = r5 - 0x2;
            COND = r5 != 0x0;
            if (COND) {
                    r5 = 0x1;
            }
            r5 = r12 | r5 * 0x200 | r2 * 0x10000;
            loc_ffffffff8f656968();
            loc_ffffffff8f656968(0x2, "pat_enable %d, vlc_enable = %d, bflc_enable = %d\n", *(r4 + 0x88), *(r4 + 0x8c), *(r4 + 0x90));
            r1 = *(r4 + 0x98);
            r3 = *(r4 + 0x94);
            r2 = *(r4 + 0xa4);
            r1 = r1 << r1 * 0x100 | r3 * 0x1000 | *(r4 + 0x9c);
            r2 = r2 << r2 * 0x100 | *(r4 + 0xa0) * 0x10000;
            r2 = r2 | *(r4 + 0xac);
            r2 = r2 | *(r4 + 0xa8) * 0x10;
            *(0x1a71000 + 0x34) = r5;
            *(0x1a71000 + 0x38) = r1;
            *(0x1a71000 + 0x3c) = r2;
            if (*(r4 + 0xff) != 0x0) {
                    *(0x1a71000 + 0x834) = r5;
            }
            if (CPU_FLAGS & NE) {
                    *(0x1a71000 + 0x838) = r1;
            }
            if (CPU_FLAGS & NE) {
                    *(0x1a71000 + 0x83c) = r2;
            }
    }
    if (stack[2043] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

