    r2 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x34;
    r3 = *0x8f7112f4;
    r4 = arg0;
    stack[2030] = arg1;
    r1 = *(arg0 + 0x10);
    stack[2037] = r3;
    r3 = *(arg0 + 0x4);
    stack[2027] = r1;
    r7 = r3 - 0x1;
    stack[2029] = r3;
    r3 = 0x0;
    r5 = r5 << r7 * 0x2;
    r0 = r3;
    r1 = r5 + 0x3;
    stack[2028] = r5;
    do {
            r6 = stack[2027];
            *(r6 + r3 * 0x4) = r0;
            r3 = r3 + 0x1;
    } while (r3 < r1);
    r11 = r2 - 0x4;
    r0 = 0x0;
    r3 = r6 + 0x4;
    stack[2026] = r6 + 0x4;
    stack[2035] = stack[2029] - 0x2;
    while (r0 < stack[2035]) {
            r11 = r11 + 0x4;
            r8 = *r11;
            r1 = 0x0;
            lr = lr >> r8 / 0x10000;
            r8 = zero_extend_32(r8);
            stack[2031] = lr;
            lr = r3 - 0x4;
            stack[2034] = stack[2035] - r0;
            r12 = r1;
            stack[2033] = r11;
            do {
                    r5 = stack[2034];
                    if (r12 >= r5) {
                        break;
                    }
                    r12 = r12 + 0x1;
                    r10 = *(stack[2033] + 0x4);
                    stack[2033] = stack[2033] + 0x4;
                    r6 = (r10 >> r10 / 0x10000) * stack[2031];
                    r5 = (r10 >> r10 / 0x10000) * r8 + zero_extend_32(r10) * stack[2031];
                    COND = r5 < (r10 >> r10 / 0x10000) * r8;
                    r10 = zero_extend_32(r10) * r8;
                    if (COND) {
                            r6 = r6 + 0x10000;
                    }
                    r6 = r6 + r5 / 0x10000;
                    r5 = (r5 << r5 * 0x10000) + r10;
                    COND = r5 >= 0x0;
                    r10 = *(lr + 0x4);
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    r5 = r10 + r5;
                    COND = r5 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    r5 = r5 + r1;
                    COND = r5 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    lr = lr + 0x4;
                    *lr = r5;
                    r1 = r6;
            } while (true);
            r12 = r5 & !(r5 / 0x80000000);
            lr = *(r3 + r12 * 0x4);
            r5 = r3 + r12 * 0x4;
            lr = r1 + lr;
            *(r3 + r12 * 0x4) = lr;
            if (lr < r1) {
                    do {
                            r12 = *(r5 + 0x4);
                            r1 = r5 + 0x4;
                            if (r12 == -0x1) {
                                    r6 = 0x0;
                            }
                            if (CPU_FLAGS & E) {
                                    *(r5 + 0x4) = r6;
                            }
                            if (CPU_FLAGS & E) {
                                    r5 = r1;
                            }
                    } while (CPU_FLAGS & E);
                    *r1 = r12 + 0x1;
            }
            r0 = r0 + 0x1;
            r3 = r3 + 0x8;
    }
    r1 = stack[2027];
    r0 = 0x0;
    r3 = r0;
    while (r3 < stack[2028]) {
            r12 = *r1;
            r3 = r3 + 0x1;
            *r1 = r0 | r12 * 0x2;
            r1 = r1 + 0x4;
            r0 = (r0 | r12 * 0x2) >> r12 / 0x80000000;
    }
    r1 = stack[2026];
    r12 = 0x0;
    r0 = r12;
    while (r0 < r7) {
            r3 = *(r2 + r0 * 0x4);
            r0 = r0 + 0x1;
            r5 = r5 << 0x20000 * zero_extend_32(r3) * (r3 >> r3 / 0x10000);
            r6 = zero_extend_32(r3) * (r3 >> r3 / 0x10000) >> zero_extend_32(r3) * (r3 >> r3 / 0x10000) / 0x8000;
            lr = r5 + zero_extend_32(r3) * zero_extend_32(r3);
            r3 = r6 + (r3 >> r3 / 0x10000) * (r3 >> r3 / 0x10000);
            COND = lr < r5;
            r5 = *(r1 + 0xfffffffffffffffc);
            if (COND) {
                    r3 = r3 + 0x1;
            }
            lr = lr + r5;
            COND = lr >= 0x0;
            if (COND) {
                    r3 = r3 + 0x1;
            }
            lr = lr + r12;
            COND = lr >= 0x0;
            r12 = *r1;
            if (COND) {
                    r3 = r3 + 0x1;
            }
            *(r1 + 0xfffffffffffffffc) = lr;
            r3 = r3 + r12;
            COND = r3 < 0x0;
            *r1 = r3;
            r1 = r1 + 0x8;
            if (COND) {
                    r12 = 0x0;
            }
            if (CPU_FLAGS & NS) {
                    r12 = 0x1;
            }
    }
    r3 = 0x0;
    lr = stack[2027] - 0x4;
    r12 = stack[2029] - 0xc0000001;
    if (r7 <= 0x0) {
            r12 = 0x4;
    }
    if (CPU_FLAGS & G) {
            r12 = r12 << r12 * 0x4;
    }
    while (r3 < r7) {
            r1 = *(lr + 0x4);
            r2 = lr + 0x4;
            r8 = *(r4 + 0x18);
            r11 = *r4;
            r8 = r8 * r1;
            r1 = 0x0;
            r0 = r1;
            r5 = r5 >> r8 / 0x10000;
            r8 = zero_extend_32(r8);
            stack[2028] = r5;
            do {
                    r10 = *(r11 + r0 * 0x4);
                    r0 = r0 + 0x1;
                    r6 = stack[2028] * (r10 >> r10 / 0x10000);
                    r5 = r8 * (r10 >> r10 / 0x10000) + stack[2028] * zero_extend_32(r10);
                    COND = r5 < r8 * (r10 >> r10 / 0x10000);
                    r10 = r8 * zero_extend_32(r10);
                    if (COND) {
                            r6 = r6 + 0x10000;
                    }
                    r6 = r6 + r5 / 0x10000;
                    COND = s0 >= 0x0;
                    r5 = *(lr + 0x4);
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    s0 = s0 + r5;
                    COND = s0 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    s0 = s0 + r1;
                    COND = s0 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    lr = lr + 0x4;
                    *lr = s0;
                    if (r0 < r7) {
                            r1 = r6;
                    }
            } while (CPU_FLAGS & L);
            r1 = *(r2 + r12);
            r1 = r6 + r1;
            *(r2 + r12) = r1;
            if (r1 < r6) {
                    r1 = r2 + r12;
            }
            if (!CPU_FLAGS & NB) {
                    do {
                            lr = *(r1 + 0x4);
                            r0 = r1 + 0x4;
                            if (lr == -0x1) {
                                    lr = 0x0;
                            }
                            if (CPU_FLAGS & E) {
                                    *(r1 + 0x4) = lr;
                            }
                            if (CPU_FLAGS & E) {
                                    r1 = r0;
                            }
                    } while (CPU_FLAGS & E);
                    *r0 = lr + 0x1;
            }
            r3 = r3 + 0x1;
            lr = r2;
    }
    r1 = stack[2027] + stack[2029] * 0x4;
    r2 = 0x3 ^ 0xffffffff;
    for (r3 = 0x0; r3 <= r7; r3 = r3 + 0x1) {
            r0 = *(r1 + r2);
            r2 = r2 + 0x4;
            r5 = stack[2030];
            *(r5 + r3 * 0x4) = r0;
    }
    r0 = loc_ffffffff8f670e70(r4, stack[2030], *r4);
    r2 = stack[2037];
    if (r0 != -0x1) {
            if (r2 == *0x8f7112f4) {
                    r0 = r4;
                    r1 = stack[2030];
                    r2 = *r4;
                    sp = sp + 0x38;
                    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
                    r1 = r1 - 0x4;
                    r6 = *(r0 + 0x4);
                    COND = r0 != 0x0;
                    r3 = 0x0;
                    if (COND) {
                            r0 = 0x1;
                    }
                    stack[2041] = *0x8f7112f4;
                    while (r6 != zero_extend_32(r3)) {
                            r4 = *(r1 + 0x4);
                            r12 = *(r2 + r3 * 0x4);
                            if (r0 != 0x0) {
                                    r5 = r4 - 0x1 - r12;
                                    if (r4 > r12) {
                                            r0 = 0x0;
                                    }
                                    if (CPU_FLAGS & B) {
                                            r0 = 0x1;
                                    }
                            }
                            else {
                                    r5 = r4 - r12;
                                    if (r4 >= r12) {
                                            r0 = 0x0;
                                    }
                                    if (CPU_FLAGS & S) {
                                            r0 = 0x1;
                                    }
                            }
                            r1 = r1 + 0x4;
                            *r1 = r5;
                            r3 = r3 + 0x1;
                    }
                    if (stack[2041] != *0x8f7112f4) {
                            r0 = loc_ffffffff8f648514();
                    }
            }
            else {
                    r0 = loc_ffffffff8f648514();
            }
    }
    else {
            if (r2 != *0x8f7112f4) {
                    r0 = loc_ffffffff8f648514();
            }
    }
    return r0;

