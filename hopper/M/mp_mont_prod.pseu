    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r4 = arg0;
    r11 = *(arg0 + 0x10);
    stack[2035] = arg3;
    r0 = *(arg0 + 0x4);
    stack[2034] = arg2;
    r2 = r0 - 0x1;
    stack[2032] = arg1;
    stack[2031] = r0;
    stack[2037] = *0x8f7112f4;
    r1 = (arg1 << r2 * 0x2) + 0x3;
    r3 = 0x0;
    r0 = r3;
    do {
            *(r11 + r3 * 0x4) = r0;
            r3 = r3 + 0x1;
    } while (r3 < r1);
    stack[2030] = r11 - 0x4;
    r3 = stack[2031] - 0xc0000001;
    if (r2 <= 0x0) {
            r3 = 0x4;
    }
    r1 = 0x0;
    if (CPU_FLAGS & G) {
            r3 = r3 << r3 * 0x4;
    }
    r3 = r11 + r3;
    while (r1 < r2) {
            r0 = 0x0;
            stack[2033] = r12 << r1 * 0x4;
            r12 = r0;
            r8 = *(stack[2034] + r1 * 0x4);
            lr = stack[2030];
            r7 = r7 >> r8 / 0x10000;
            r8 = zero_extend_32(r8);
            do {
                    r10 = *(stack[2035] + r12 * 0x4);
                    r12 = r12 + 0x1;
                    r6 = r7 * (r10 >> r10 / 0x10000);
                    s0 = r8 * zero_extend_32(r10);
                    r5 = r8 * (r10 >> r10 / 0x10000) + r7 * zero_extend_32(r10);
                    if (r5 < r8 * (r10 >> r10 / 0x10000)) {
                            r6 = r6 + 0x10000;
                    }
                    r6 = r6 + r5 / 0x10000;
                    s0 = (r5 << r5 * 0x10000) + s0;
                    COND = s0 >= 0x0;
                    r5 = *(lr + 0x4);
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    s0 = s0 + r5;
                    COND = s0 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    s0 = s0 + r0;
                    COND = s0 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    lr = lr + 0x4;
                    *lr = s0;
                    if (r12 < r2) {
                            r0 = r6;
                    }
            } while (CPU_FLAGS & L);
            r0 = *r3;
            r0 = r6 + r0;
            *r3 = r0;
            if (r0 < r6) {
                    r0 = r3;
            }
            if (!CPU_FLAGS & NB) {
                    do {
                            lr = *(r0 + 0x4);
                            r12 = r0 + 0x4;
                            if (lr == -0x1) {
                                    lr = 0x0;
                            }
                            if (CPU_FLAGS & E) {
                                    *(r0 + 0x4) = lr;
                            }
                            if (CPU_FLAGS & E) {
                                    r0 = r12;
                            }
                    } while (CPU_FLAGS & E);
                    *r12 = lr + 0x1;
            }
            r8 = *(r4 + 0x18);
            r12 = *r4;
            r0 = *(r11 + stack[2033]);
            lr = stack[2030];
            stack[2033] = r12;
            r8 = r8 * r0;
            r0 = 0x0;
            r12 = r0;
            r7 = r7 >> r8 / 0x10000;
            r8 = zero_extend_32(r8);
            do {
                    r10 = *(stack[2033] + r12 * 0x4);
                    r12 = r12 + 0x1;
                    r6 = r7 * (r10 >> r10 / 0x10000);
                    s0 = r8 * zero_extend_32(r10);
                    r5 = r8 * (r10 >> r10 / 0x10000) + r7 * zero_extend_32(r10);
                    if (r5 < r8 * (r10 >> r10 / 0x10000)) {
                            r6 = r6 + 0x10000;
                    }
                    r6 = r6 + r5 / 0x10000;
                    s0 = (r5 << r5 * 0x10000) + s0;
                    COND = s0 >= 0x0;
                    r5 = *(lr + 0x4);
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    s0 = s0 + r5;
                    COND = s0 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    s0 = s0 + r0;
                    COND = s0 >= 0x0;
                    if (COND) {
                            r6 = r6 + 0x1;
                    }
                    lr = lr + 0x4;
                    *lr = s0;
                    if (r12 < r2) {
                            r0 = r6;
                    }
            } while (CPU_FLAGS & L);
            r0 = *r3;
            r0 = r6 + r0;
            *r3 = r0;
            if (r0 < r6) {
                    r0 = r3;
            }
            if (!CPU_FLAGS & NB) {
                    do {
                            lr = *(r0 + 0x4);
                            r12 = r0 + 0x4;
                            if (lr == -0x1) {
                                    lr = 0x0;
                            }
                            if (CPU_FLAGS & E) {
                                    *(r0 + 0x4) = lr;
                            }
                            if (CPU_FLAGS & E) {
                                    r0 = r12;
                            }
                    } while (CPU_FLAGS & E);
                    *r12 = lr + 0x1;
            }
            r1 = r1 + 0x1;
            r3 = r3 + 0x4;
            stack[2030] = stack[2030] + 0x4;
    }
    r3 = 0x0;
    r0 = r11 + stack[2031] * 0x4;
    r1 = 0x3 ^ 0xffffffff;
    while (r3 <= r2) {
            r12 = *(r0 + r1);
            r1 = r1 + 0x4;
            *(stack[2032] + r3 * 0x4) = r12;
            r3 = r3 + 0x1;
    }
    r0 = loc_ffffffff8f670e70(r4, stack[2032], *r4);
    r2 = stack[2037];
    if (r0 != -0x1) {
            if (r2 == *0x8f7112f4) {
                    r0 = loc_ffffffff8f670ef8(r4, stack[2032], *r4, 0x0, stack[2048]);
            }
            else {
                    r0 = loc_ffffffff8f648514();
            }
    }
    else {
            if (r2 != *0x8f7112f4) {
                    r0 = loc_ffffffff8f648514();
            }
    }
    return r0;

