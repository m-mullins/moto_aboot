    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r6 = arg1;
    stack[2034] = arg2;
    r4 = arg0;
    r3 = *0x8f7112f4;
    stack[2037] = r3;
    loc_ffffffff8f667304(arg0, 0x0, 0x88, r3, stack[2030]);
    r5 = stack[2034];
    if (r5 != 0x0) {
            CMP(r6, 0x0);
    }
    if (CPU_FLAGS & NE) {
            r5 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r5 = 0x1;
    }
    if (CPU_FLAGS & E) {
            s0 = 0x5;
    }
    if (CPU_FLAGS & E) goto loc_8f66c178;

loc_8f66b8bc:
    *r4 = r5;
    r0 = loc_ffffffff8f64aacc(0xc);
    *(r4 + 0x18) = r0;
    if (r0 == 0x0) goto loc_8f66c194;

loc_8f66b8d4:
    *(r0 + 0x4) = r4;
    *r0 = 0x2;
    *(r0 + 0x2) = 0x2;
    *(r0 + 0x8) = r5;
    r0 = loc_ffffffff8f64aacc(0x30);
    *(r4 + 0x1c) = r0;
    if (r0 == 0x0) goto loc_8f66c194;

loc_8f66b8fc:
    r3 = 0x18;
    r0 = 0x18;
    do {
            r2 = 0xc * r3;
            r1 = *(r4 + 0x1c);
            *(0x2 + r1 + r2) = r0;
            *(0x4 + r1 + r2) = r0;
            r12 = r3 & !0x2;
            r3 = r3 + 0x1;
            if (zero_extend_32(r12) == 0x0) {
                    *(r1 + r2) = 0x17;
            }
            if (CPU_FLAGS & NE) {
                    *(r1 + r2) = 0x18;
            }
            if (CPU_FLAGS & E) {
                    r1 = *(r4 + 0x1c);
            }
            if (CPU_FLAGS & NE) {
                    r1 = *(r4 + 0x1c);
            }
            if (CPU_FLAGS & E) {
                    r2 = r1 + r2;
            }
            if (CPU_FLAGS & NE) {
                    r2 = r1 + r2;
            }
            if (CPU_FLAGS & E) {
                    *(r2 + 0x8) = 0x1;
            }
            if (CPU_FLAGS & NE) {
                    *(r2 + 0x8) = 0x11;
            }
    } while (r3 != 0x4);
    r3 = *(r4 + 0x1c);
    *(r4 + 0x28) = r3 + 0xc;
    *(r4 + 0x24) = r3;
    *(r4 + 0x2c) = r3 + 0x18;
    *(r4 + 0x30) = r3 + 0x24;
    r0 = loc_ffffffff8f64aacc(0x18);
    *(r4 + 0x20) = r0;
    if (r0 == 0x0) goto loc_8f66c194;

loc_8f66b994:
    *(r0 + 0x2) = 0x0;
    *(r0 + 0x4) = 0x0;
    *(r0 + 0xe) = 0x0;
    *(r0 + 0x10) = 0x0;
    *r0 = 0x30;
    *(r0 + 0x8) = 0x1;
    *(r0 + 0xc) = 0x3;
    *(r0 + 0x14) = 0x1;
    *(r4 + 0x5c) = r0;
    *(r4 + 0x34) = r0 + 0xc;
    r0 = loc_ffffffff8f64aacc(0x18);
    *(r4 + 0x10) = r0;
    if (r0 == 0x0) goto loc_8f66c194;

loc_8f66b9e4:
    r0 = loc_ffffffff8f64aacc(0xc);
    *(r4 + 0x8) = r0;
    if (r0 == 0x0) goto loc_8f66c194;

loc_8f66b9f8:
    *r0 = 0x30;
    s0 = 0x2;
    r3 = *(r4 + 0x10);
    *(r0 + 0x2) = s0;
    *(r0 + 0x8) = 0x0;
    *(r0 + 0x4) = r3;
    *r3 = s0;
    r3 = *(r4 + 0x10);
    *(r3 + 0x2) = 0x0;
    *(r3 + 0x4) = 0x0;
    *(r3 + 0x8) = 0x1;
    *(r3 + 0xc) = s0;
    r3 = *(r4 + 0x10);
    *(r3 + 0xe) = 0x0;
    *(r3 + 0x10) = 0x0;
    *(r3 + 0x14) = 0x1;
    *(r4 + 0x60) = r3;
    *(r4 + 0x64) = r3 + 0xc;
    r0 = loc_ffffffff8f64aacc(0x78);
    *(r4 + 0x14) = r0;
    if (r0 == 0x0) goto loc_8f66c198;

loc_8f66ba58:
    r5 = 0x0;
    r2 = r5;
    do {
            r3 = r0 + r5;
            r5 = r5 + 0xc;
            *(r3 + 0x2) = r2;
            *(r3 + 0x4) = r2;
    } while (r5 != 0x78);
    *r0 = 0x5f ^ 0xffffffff;
    r3 = *(r4 + 0x14);
    r2 = *(r4 + 0x18);
    s0 = 0x2;
    *(r3 + 0xc) = s0;
    *(r3 + 0x4) = r2;
    *(r3 + 0x2) = 0x1;
    *(r3 + 0x8) = 0xa0;
    r3 = *(r4 + 0x14);
    *(r3 + 0x18) = 0x30;
    *(r3 + 0x14) = 0x1;
    r3 = *(r4 + 0x14);
    *(r3 + 0x24) = 0x30;
    *(r3 + 0x20) = 0x1;
    r3 = *(r4 + 0x14);
    *(r3 + 0x30) = 0x30;
    *(r3 + 0x2c) = 0x5;
    r3 = *(r4 + 0x14);
    *(r3 + 0x32) = 0x4;
    r1 = *(r4 + 0x1c);
    *(r3 + 0x3c) = 0x30;
    *(r3 + 0x38) = 0x0;
    *(r3 + 0x34) = r1;
    r3 = *(r4 + 0x14);
    *(r3 + 0x48) = 0x30;
    *(r3 + 0x44) = 0x5;
    r3 = *(r4 + 0x14);
    r2 = *(r4 + 0x20);
    *(r3 + 0x4a) = s0;
    *(r3 + 0x4c) = r2;
    *(r3 + 0x50) = 0x0;
    *(r3 + 0x54) = 0x7e ^ 0xffffffff;
    r3 = *(r4 + 0x14);
    *(r3 + 0x5c) = 0x4b;
    *(r3 + 0x60) = 0x7d ^ 0xffffffff;
    r3 = *(r4 + 0x14);
    *(r3 + 0x68) = 0x4b;
    *(r3 + 0x6c) = 0x5c ^ 0xffffffff;
    r3 = *(r4 + 0x14);
    *(r3 + 0x74) = 0x89;
    *(r4 + 0x3c) = r3 + 0xc;
    *(r4 + 0x40) = r3 + 0x18;
    *(r4 + 0x44) = r3 + 0x24;
    *(r4 + 0x48) = r3 + 0x30;
    *(r4 + 0x4c) = r3 + 0x3c;
    *(r4 + 0x54) = r3 + 0x48;
    *(r4 + 0x58) = r3 + 0x6c;
    r0 = loc_ffffffff8f64aacc(0x24, 0x7d ^ 0xffffffff, r3 + 0x48, r3 + 0x6c);
    *(r4 + 0xc) = r0;
    if (r0 != 0x0) {
            *r0 = 0x30;
            *(r0 + 0x2) = 0xa;
            r3 = *(r4 + 0x14);
            *(0xfffffffffffffffc + r0 + 0x18) = s0;
            s0 = 0x0;
            *(0xfffffffffffffff0 + r0 + 0x18) = 0x0;
            *(0xffffffffffffffec + r0 + 0x18) = r3;
            *(0xfffffffffffffff4 + r0 + 0x18) = 0x30;
            *(0xfffffffffffffff6 + r0 + 0x18) = 0x0;
            *(0xfffffffffffffff8 + r0 + 0x18) = 0x0;
            *(r0 + 0x18) = 0x3;
            *(0x2 + r0 + 0x18) = 0x0;
            *(0x4 + r0 + 0x18) = 0x0;
            *(0x8 + r0 + 0x18) = 0x1;
            *(r4 + 0x50) = r0 + 0x18;
            *(r4 + 0x4) = loc_ffffffff8f64aacc(0xc);
    }
    r3 = *(r4 + 0x4);
    if (r3 == 0x0) goto loc_8f66c194;

loc_8f66bbf0:
    *r3 = 0x30;
    r2 = *(r4 + 0x4);
    *(r2 + 0x2) = 0x3;
    *(r2 + 0x4) = *(r4 + 0xc);
    *(r2 + 0x8) = 0x0;
    if (s0 != 0x0) goto loc_8f66c198;

loc_8f66bc1c:
    r0 = loc_ffffffff8f665364(r6, sp + 0xe);
    COND = s0 != 0x0;
    if (COND) goto loc_8f66c198;

loc_8f66bc34:
    r3 = *(r4 + 0xc);
    r5 = *(r4 + 0x3c);
    *(r3 + 0x2) = 0xa;
    *(*(r4 + 0x18) + 0x2) = 0x2;
    *(*(r4 + 0x48) + 0x2) = 0x4;
    *(*(r4 + 0x54) + 0x2) = 0x2;
    r0 = *(r5 + 0x2);
    if (r0 == 0x0) {
            r0 = s0;
    }
    if (!CPU_FLAGS & E) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x40);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x44);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x4c);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x5c);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x34);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x50);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x58);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    r3 = *(r4 + 0x3c);
    *(r5 + 0x4) = r0;
    if (((((((*(r3 + 0x4) != 0x0) && (*(*(r4 + 0x44) + 0x4) != 0x0)) && (*(*(r4 + 0x34) + 0x4) != 0x0)) && (*(*(r4 + 0x50) + 0x4) != 0x0)) && (*(*(r4 + 0x4c) + 0x4) != 0x0)) && (*(*(r4 + 0x40) + 0x4) != 0x0)) && (*(*(r4 + 0x5c) + 0x4) != 0x0)) {
            r3 = *(r4 + 0x58);
            if (*(r3 + 0x2) != 0x0) {
                    s0 = *(r3 + 0x4);
                    if (s0 == 0x0) {
                            s0 = 0x2;
                    }
                    if (CPU_FLAGS & NE) {
                            s0 = 0x0;
                    }
            }
    }
    else {
            s0 = 0x2;
    }
    r5 = *(r4 + 0x24);
    if ((*(r5 + 0x8) & 0x2) != 0x0) {
            r5 = *(r4 + 0x28);
            r0 = *(r5 + 0x2);
            if (r0 != 0x0) {
                    r0 = loc_ffffffff8f64aacc();
            }
            r3 = *(r4 + 0x24);
            *(r5 + 0x4) = r0;
            *(r3 + 0x8) = *(r3 + 0x8) & !0x2;
            r3 = *(r4 + 0x28);
    }
    else {
            r0 = *(r5 + 0x2);
            if (r0 != 0x0) {
                    r0 = loc_ffffffff8f64aacc();
            }
            r3 = *(r4 + 0x28);
            *(r5 + 0x4) = r0;
            *(r3 + 0x8) = *(r3 + 0x8) & !0x2;
            r3 = *(r4 + 0x24);
    }
    r5 = *(r4 + 0x2c);
    COND = *(r3 + 0x4) == 0x0;
    r3 = *(r5 + 0x8);
    if (COND) {
            s0 = 0x2;
    }
    if ((r3 & 0x2) != 0x0) {
            r5 = *(r4 + 0x30);
            r0 = *(r5 + 0x2);
            if (r0 != 0x0) {
                    r0 = loc_ffffffff8f64aacc();
            }
            r3 = *(r4 + 0x2c);
            *(r5 + 0x4) = r0;
            *(r3 + 0x8) = *(r3 + 0x8) & !0x2;
            r3 = *(r4 + 0x30);
    }
    else {
            r0 = *(r5 + 0x2);
            if (r0 != 0x0) {
                    r0 = loc_ffffffff8f64aacc();
            }
            r3 = *(r4 + 0x30);
            *(r5 + 0x4) = r0;
            *(r3 + 0x8) = *(r3 + 0x8) & !0x2;
            r3 = *(r4 + 0x2c);
    }
    if (*(r3 + 0x4) == 0x0) {
            s0 = 0x2;
    }
    if ((CPU_FLAGS & E) || (s0 != 0x0)) goto loc_8f66bffc;

loc_8f66beb8:
    r0 = loc_ffffffff8f665364(r6, sp + 0xe, *(r4 + 0x4), sp + 0x16);
    COND = s0 != 0x0;
    if (COND) goto loc_8f66bffc;

loc_8f66bed4:
    r3 = *(r4 + 0x44);
    r0 = *(r3 + 0x4);
    r0 = loc_ffffffff8f66af0c(r0, *(r3 + 0x2), r4 + 0x74, r4 + 0x80);
    COND = s0 != 0x0;
    if (COND) goto loc_8f66bffc;

loc_8f66bef4:
    r3 = *(r4 + 0x4c);
    r0 = *(r3 + 0x4);
    r0 = loc_ffffffff8f66af0c(r0, *(r3 + 0x2), r4 + 0x78, r4 + 0x82);
    COND = s0 != 0x0;
    if (COND) goto loc_8f66bffc;

loc_8f66bf14:
    r3 = *(r4 + 0x58);
    r7 = *(r3 + 0x2);
    if (r7 == 0x0) {
            *(r4 + 0x7c) = s0;
    }
    if (CPU_FLAGS & E) {
            *(r4 + 0x84) = s0;
    }
    if (CPU_FLAGS & E) goto loc_8f66bf98;

loc_8f66bf2c:
    r8 = *(r3 + 0x4);
    r11 = sp + 0x18;
    r5 = s0;
    do {
            stack[2030] = r11;
            stack[2037] = r7;
            r10 = zero_extend_32(r5 + 0x1);
            r0 = loc_ffffffff8f664f8c(r8, sp + 0x1a, 0x6, 0x2, stack[2030]);
            if (r0 != 0x0) {
                break;
            }
            r5 = r10;
    } while (true);
    if (r5 == 0x0) goto loc_8f66c3a0;

loc_8f66c1b4:
    r0 = sign_extend_32(r5) + sign_extend_32(r5) * 0x8 << (sign_extend_32(r5) + sign_extend_32(r5) * 0x8) * 0x4;
    COND = r0 == 0x0;
    if (!COND) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r4 + 0x7c) = r0;
    if (r0 == 0x0) goto loc_8f66c3a8;

loc_8f66c1d4:
    r12 = 0x0;
    r2 = r12;
    while (zero_extend_32(r12) < r5) {
            r3 = 0x24 * r12;
            r12 = r12 + 0x1;
            *(*(r4 + 0x7c) + r3) = 0x6;
            r0 = *(r4 + 0x7c);
            *(0x4 + r0 + r3) = r2;
            *(0x2 + r0 + r3) = r2;
            r0 = *(r4 + 0x7c);
            *(0xc + r0 + r3) = 0x1;
            *(0x8 + r0 + r3) = 0x1;
            r0 = *(r4 + 0x7c);
            *(0x10 + r0 + r3) = r2;
            *(0xe + r0 + r3) = r2;
            r0 = *(r4 + 0x7c);
            *(0x18 + r0 + r3) = 0x4;
            *(0x14 + r0 + r3) = 0x22;
            r0 = *(r4 + 0x7c);
            *(0x1a + r0 + r3) = r2;
            *(0x1c + r0 + r3) = r2;
            *(0x20 + *(r4 + 0x7c) + r3) = 0x1;
    }
    r0 = loc_ffffffff8f66ac2c(r8, r7, *(r4 + 0x7c), r5);
    COND = s0 == 0x0;
    if (COND) goto loc_8f66c2ac;

loc_8f66bf8c:
    *(r4 + 0x84) = r5;
    if (s0 == 0x0) {
            r0 = *(r4 + 0x50);
            r0 = loc_ffffffff8f66ae28(r0);
            COND = s0 != 0x0;
            if (!COND) {
                    r0 = *(r4 + 0x34);
                    r0 = loc_ffffffff8f66ae28(r0);
                    COND = s0 != 0x0;
                    if (!COND) {
                            r3 = *(r4 + 0x5c);
                            r0 = *(r3 + 0x4);
                            r0 = loc_ffffffff8f66ad00(r0, *(r3 + 0x2), r4 + 0x38, r3);
                            COND = s0 != 0x0;
                            if (!COND) {
                                    r3 = *(r4 + 0x38);
                                    if (*(r3 + 0x2) != 0x9) {
                                            s0 = 0x1;
                                    }
                                    if (!CPU_FLAGS & NE) {
                                            r0 = *(r3 + 0x4);
                                            r0 = loc_ffffffff8f6672a0(r0, 0x8f6a6a2b);
                                            COND = s0 != 0x0;
                                            if (COND) {
                                                    s0 = 0x1;
                                            }
                                    }
                            }
                    }
            }
    }
    goto loc_8f66bffc;

loc_8f66bffc:
    r3 = *(r4 + 0x38);
    if (r3 != 0x0) {
            if (*(r3 + 0x4) != 0x0) {
                    loc_ffffffff8f64ab9c();
            }
            *(*(r4 + 0x38) + 0x4) = 0x0;
    }
    if (*(r4 + 0x38) != 0x0) {
            loc_ffffffff8f64ab9c();
    }
    *(r4 + 0x38) = 0x0;
    if (s0 != 0x0) goto loc_8f66c198;

loc_8f66c044:
    r1 = *(r4 + 0x34);
    r2 = *(r4 + 0x8);
    r0 = *(0x2 + r1 + 0x2);
    r0 = loc_ffffffff8f665364(r0, r1 + 0x2, r2, sp + 0x16, stack[2030]);
    COND = s0 != 0x0;
    if (COND) goto loc_8f66c198;

loc_8f66c06c:
    r5 = *(r4 + 0x60);
    r0 = *(r5 + 0x2);
    if (r0 == 0x0) {
            r0 = s0;
    }
    if (!CPU_FLAGS & E) {
            r0 = loc_ffffffff8f64aacc();
    }
    *(r5 + 0x4) = r0;
    r5 = *(r4 + 0x64);
    r0 = *(r5 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
    }
    r3 = *(r4 + 0x60);
    *(r5 + 0x4) = r0;
    if ((*(r3 + 0x4) == 0x0) || (*(*(r4 + 0x64) + 0x4) == 0x0)) goto loc_8f66c194;

loc_8f66c0c0:
    r1 = *(r4 + 0x34);
    r2 = *(r4 + 0x8);
    r0 = *(0x2 + r1 + 0x2);
    r0 = loc_ffffffff8f665364(r0, r1 + 0x2, r2, sp + 0x16);
    COND = s0 != 0x0;
    if (!COND) {
            r3 = *(r4 + 0x40);
            r0 = *(r3 + 0x4);
            r0 = loc_ffffffff8f66ad00(r0, *(r3 + 0x2), r4 + 0x70, r3);
            COND = s0 != 0x0;
            if (!COND) {
                    r5 = sp + 0x15;
                    r0 = loc_ffffffff8f664f8c(r6, sp + 0x18, 0x30, 0x1, r5);
                    COND = s0 != 0x0;
                    if (!COND) {
                            stack[2037] = stack[2034];
                            r0 = loc_ffffffff8f664f8c(r6, sp + 0x1a, 0x30, 0x1, r5);
                            COND = s0 != 0x0;
                            if (!COND) {
                                    *(r4 + 0x68) = r6 + 0x3;
                                    *(r4 + 0x6c) = stack[2037] - 0x3;
                            }
                            else {
                                    loc_ffffffff8f66b394(r4);
                                    if (s0 == 0x3) {
                                            s0 = 0x1;
                                    }
                            }
                    }
                    else {
                            loc_ffffffff8f66b394(r4);
                            if (s0 == 0x3) {
                                    s0 = 0x1;
                            }
                    }
            }
            else {
                    loc_ffffffff8f66b394(r4);
                    if (s0 == 0x3) {
                            s0 = 0x1;
                    }
            }
    }
    else {
            loc_ffffffff8f66b394(r4);
            if (s0 == 0x3) {
                    s0 = 0x1;
            }
    }
    goto loc_8f66c178;

loc_8f66c178:
    r0 = s0;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f66c194:
    s0 = 0x2;
    goto loc_8f66c198;

loc_8f66c198:
    loc_ffffffff8f66b394(r4);
    if (s0 == 0x3) {
            s0 = 0x1;
    }
    goto loc_8f66c178;

loc_8f66c2ac:
    r10 = zero_extend_32(s0);
    if (r10 >= r5) goto loc_8f66c38c;

loc_8f66c2b8:
    r3 = *(r4 + 0x7c);
    r11 = 0x24 * s0;
    r3 = r3 + r11;
    r0 = *(r3 + 0x2);
    if (r0 != 0x0) {
            r0 = loc_ffffffff8f64aacc();
            r3 = r3;
    }
    *(r3 + 0x4) = r0;
    r3 = *(r4 + 0x7c);
    r3 = r3 + r11;
    if (*(r3 + 0x4) == 0x0) {
            r3 = 0x2;
    }
    else {
            r0 = *(r3 + 0x1a);
            if (r0 != 0x0) {
                    r0 = loc_ffffffff8f64aacc();
            }
            *(0x0 + 0x1c) = r0;
            r3 = 0x0;
    }
    if (*(0x1c + *(r4 + 0x7c) + r11) == 0x0) goto loc_8f66c300;

loc_8f66c2a0:
    s0 = s0 + 0x1;
    if (r3 != 0x0) goto loc_8f66c300;
    goto loc_8f66c2ac;

loc_8f66c300:
    r7 = 0x0;
    r8 = r7;
    do {
            r11 = 0x24 * r7;
            if (*(0x4 + *(r4 + 0x7c) + r11) != 0x0) {
                    loc_ffffffff8f64ab9c();
            }
            if (*(0x1c + *(r4 + 0x7c) + r11) != 0x0) {
                    loc_ffffffff8f64ab9c();
            }
            r7 = zero_extend_32(r7 + 0x1);
            *(0x4 + *(r4 + 0x7c) + r11) = r8;
            *(0x1c + *(r4 + 0x7c) + r11) = r8;
            if (r7 > r10) {
                break;
            }
            else {
                continue;
            }
    } while (true);
    if (*(r4 + 0x7c) != 0x0) {
            loc_ffffffff8f64ab9c();
    }
    *(r4 + 0x7c) = 0x0;
    goto loc_8f66c3a8;

loc_8f66c3a8:
    s0 = 0x2;
    goto loc_8f66bf8c;

loc_8f66c38c:
    r0 = loc_ffffffff8f66ac2c(r8, r7, *(r4 + 0x7c), r5);
    goto loc_8f66c3a0;

loc_8f66c3a0:
    s0 = r0;
    goto loc_8f66bf8c;

loc_8f66bf98:
    r0 = *(r4 + 0x50);
    r0 = loc_ffffffff8f66ae28(r0);
    COND = s0 != 0x0;
    if (!COND) {
            r0 = *(r4 + 0x34);
            r0 = loc_ffffffff8f66ae28(r0);
            COND = s0 != 0x0;
            if (!COND) {
                    r3 = *(r4 + 0x5c);
                    r0 = *(r3 + 0x4);
                    r0 = loc_ffffffff8f66ad00(r0, *(r3 + 0x2), r4 + 0x38, r3);
                    COND = s0 != 0x0;
                    if (!COND) {
                            r3 = *(r4 + 0x38);
                            if (*(r3 + 0x2) != 0x9) {
                                    s0 = 0x1;
                            }
                            if (!CPU_FLAGS & NE) {
                                    r0 = *(r3 + 0x4);
                                    r0 = loc_ffffffff8f6672a0(r0, 0x8f6a6a2b);
                                    COND = s0 != 0x0;
                                    if (COND) {
                                            s0 = 0x1;
                                    }
                            }
                    }
            }
    }
    goto loc_8f66bffc;

