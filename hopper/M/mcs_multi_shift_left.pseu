    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    stack[2041] = *0x8f7112f4;
    r12 = arg2 & 0xf;
    r2 = arg2 >> arg2 / 0x10;
    COND = r2 != 0x0;
    if (COND) {
            r8 = r8 << r2 * 0x4;
            r7 = r1 - r2;
            r5 = r0;
            r4 = 0x0;
            do {
                    r3 = r7;
                    if (r4 < r7) {
                            r3 = *(r5 + r8);
                    }
                    if (CPU_FLAGS & S) {
                            r4 = r4 + 0x1;
                    }
                    if (CPU_FLAGS & S) {
                            *r5 = r3;
                            r5 = r5 + 0x4;
                    }
            } while (CPU_FLAGS & B);
            while (r3 < r1) {
                    *(r0 + r3 * 0x4) = 0x0;
                    r3 = r3 + 0x1;
            }
    }
    if (r12 != 0x0) {
            r3 = r0 + 0x4;
            r4 = 0x0;
            r1 = r1 - 0x1 - r2;
            r5 = 0x10 - r12;
            while (r4 < r1) {
                    r2 = r3;
                    r3 = r3 + 0x4;
                    asm{ ldmda      r2, {r2, r7} };
                    r4 = r4 + 0x1;
                    *(r3 + 0xfffffffffffffff8) = zero_extend_32(r2 << r12 |     r5;
    r7;
);
            }
            *(r0 + r1 * 0x4) = zero_extend_32(*(r0 + r1 * 0x4) << r12);
    }
    if (stack[2041] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

