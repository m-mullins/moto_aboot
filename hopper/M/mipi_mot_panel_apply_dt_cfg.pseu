    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r12 = r0 + 0x4d;
    r3 = *0x8f7112f4;
    r2 = *(r0 + 0x1f4);
    stack[2043] = r3;
    r3 = *(r0 + 0x2c);
    if (r3 != 0x0) {
            *(r1 + 0xb8) = *(r0 + 0x30);
            *(r2 + 0x4) = *(r0 + 0x4c);
            *(*(r0 + 0x1f4) + 0x5) = *(r0 + 0x4d);
            r2 = *(*(r0 + 0x1f4) + 0xc);
            r3 = 0x0;
            do {
                    r12 = r12 + 0x1;
                    r3 = r3 + 0x1;
                    r2 = r2 + 0x4;
                    *(r2 + 0x18) = *r12;
            } while (r3 != 0xc);
            *(r1 + 0x48) = *(r0 + 0x34);
            *(r1 + 0x44) = *(r0 + 0x38);
            *(r1 + 0x4c) = *(r0 + 0x3c);
            *(r1 + 0x54) = *(r0 + 0x40);
            *(r1 + 0x50) = *(r0 + 0x44);
            *(r1 + 0x58) = *(r0 + 0x48);
    }
    else {
            *(r0 + 0x30) = *(r1 + 0xb8);
            *(r0 + 0x4c) = *(r2 + 0x4);
            *(r0 + 0x4d) = *(r2 + 0x5);
            r2 = r12;
            do {
                    r12 = *(r0 + 0x1f4);
                    r12 = *(r12 + 0xc);
                    r12 = r12 + r3 * 0x4;
                    r3 = r3 + 0x1;
                    r2 = r2 + 0x1;
                    *r2 = *(r12 + 0x1c);
            } while (r3 != 0xc);
            *(r0 + 0x34) = *(r1 + 0x48);
            *(r0 + 0x38) = *(r1 + 0x44);
            *(r0 + 0x3c) = *(r1 + 0x4c);
            *(r0 + 0x40) = *(r1 + 0x54);
            *(r0 + 0x44) = *(r1 + 0x50);
            *(r0 + 0x48) = *(r1 + 0x58);
    }
    if (stack[2043] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

