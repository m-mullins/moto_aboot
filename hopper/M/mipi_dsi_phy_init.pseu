    stack[2046] = r6;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r6 = arg0;
    r3 = *0x8f7112f4;
    stack[2043] = r3;
    r0 = loc_ffffffff8f60e610(arg0, arg1, arg2, r3, arg0, stack[2043], r4, 0x8f7112f4, stack[2046], lr);
    r3 = 0x1a98000;
    r2 = 0x1;
    r4 = *(r6 + 0x8);
    if (r0 != 0x4) {
            CMP(r0, 0x9);
    }
    if (CPU_FLAGS & NE) {
            r0 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r0 = 0x1;
    }
    if (!CPU_FLAGS & NE) {
            *(r3 + 0x12c) = r2;
            *(r3 + 0x12c) = 0x0;
            r3 = r3 + 0x260;
            *(r3 + 0x6c) = *r4;
            *(r3 + 0x70) = *(r4 + 0x4);
            *(r3 + 0x74) = *(r4 + 0x8);
            *(r3 + 0x78) = *(r4 + 0xc);
            do {
                    *r3 = *(0xfe567db4 + r4 + r3);
                    r3 = r3 + 0x4;
            } while (r3 != 0x1a9828c);
            *(0x1a98000 + 0xc4) = 0xa1e;
            *(0x1a98000 + 0x290) = *(r4 + 0x44);
            *(0x1a98000 + 0x294) = *(r4 + 0x48);
            *(0x1a98000 + 0x298) = *(r4 + 0x4c);
            *(0x1a98000 + 0x29c) = *(r4 + 0x50);
            *(0x1a98000 + 0x2a0) = *(r4 + 0x54);
            *(0x1a98000 + 0x2a4) = *(r4 + 0x58);
            *(0x1a98000 + 0x2a8) = *(r4 + 0x5c);
            *(0x1a98000 + 0x2ac) = *(r4 + 0x60);
            r3 = *(r6 + 0x1);
            if (r3 == 0x1) {
                    r3 = *(r4 + 0x8c);
            }
            if (CPU_FLAGS & E) {
                    r3 = r3 | 0x8;
            }
            if (CPU_FLAGS & E) {
                    *(r4 + 0x8c) = r3;
            }
            r3 = 0x1a98204;
            do {
                    *r3 = *(0xfe567e64 + r4 + r3);
                    r3 = r3 + 0x4;
            } while (r3 != 0x1a98254);
            *(0x1a98000 + 0x200) = *(r4 + 0x64);
            *(0x1a98000 + 0x200) = *(r4 + 0x64) | 0x1;
            r2 = *(r6 + 0x2);
            if (r2 != 0x0) {
                    *(0x1a98000 + 0xac) = r2;
            }
    }
    else {
            *(0x1a98204 + 0x128) = r2;
            *(0x1a98204 + 0x128) = r0;
            *(0x1a98204 + 0x500) = 0x3;
            *(0x1a98204 + 0x504) = r2;
            *(0x1a98204 + 0x508) = r2;
            *(0x1a98204 + 0x50c) = r0;
            *(0x1a98204 + 0x510) = 0x100;
            *(0x1a98204 + 0x480) = *(r4 + 0x54);
            *(0x1a98204 + 0x484) = *(r4 + 0x58);
            *(0x1a98204 + 0x488) = *(r4 + 0x5c);
            *(0x1a98204 + 0x470) = *(r4 + 0x44);
            *(0x1a98204 + 0x474) = *(r4 + 0x48);
            *(0x1a98204 + 0x478) = *(r4 + 0x4c);
            *(0x1a98204 + 0x47c) = *(r4 + 0x50);
            *(0x1a98204 + 0x500) = *r4;
            *(0x1a98204 + 0x504) = *(r4 + 0x4);
            *(0x1a98204 + 0x508) = *(r4 + 0x8);
            *(0x1a98204 + 0x50c) = *(r4 + 0xc);
            *(0x1a98204 + 0x510) = *(r4 + 0x10);
            loc_ffffffff8f610d60();
            r3 = 0x1a98204;
            do {
                    *r3 = *(0xfe567e64 + r4 + r3);
                    r3 = r3 + 0x4;
            } while (r3 != 0x1a98250);
            *(0x1a98000 + 0x200) = *(r4 + 0x64);
            *(0x1a98000 + 0x200) = *(r4 + 0x64) | 0x1;
            while ((*(0x1a98000 + 0x284) & 0x1) == 0x0) {
                    loc_ffffffff8f60c5a0(0x1);
            }
            r3 = 0x1a98440;
            *(r3 + 0xfffffffffffffc84) = 0x202d;
            do {
                    *r3 = *(0xfe567bd4 + r4 + r3);
                    r3 = r3 + 0x4;
            } while (r3 != 0x1a98470);
    }
    r0 = 0x0;
    if (stack[2043] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

