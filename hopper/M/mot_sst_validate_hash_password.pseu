    COND = r6 == 0x0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x2c;
    r7 = 0x10;
    r11 = arg0;
    stack[2032] = r7;
    stack[2037] = *arg0;
    if (COND) goto loc_8f6722c0;

loc_8f672008:
    loc_ffffffff8f672c38(sp + 0x14);
    r0 = loc_ffffffff8f64aacc(0x24);
    COND = r5 != 0x0;
    if (COND) goto loc_8f67203c;

loc_8f672020:
    loc_ffffffff8f656968(0x1, "%s: temp buffer malloc failure!\n", "mot_sst_validate_hash_password");
    *r6 = 0x1;
    goto loc_8f6722c0;

loc_8f6722c0:
    r0 = 0xff;
    goto loc_8f6722c4;

loc_8f6722c4:
    if (stack[2037] != *r0) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f67203c:
    r0 = loc_ffffffff8f64aacc(0xa46);
    COND = r4 != 0x0;
    if (COND) goto loc_8f672064;

loc_8f67204c:
    loc_ffffffff8f656968(0x1, "cid_get_cid_data: malloc failure\n");
    *r6 = 0x1;
    goto loc_8f672258;

loc_8f672258:
    loc_ffffffff8f64ab9c();
    goto loc_8f6722c0;

loc_8f672064:
    loc_ffffffff8f64ac90(r5, sp + 0x14, r7);
    r0 = loc_ffffffff8f64aacc(stack[2032]);
    COND = r7 != 0x0;
    if (COND) goto loc_8f6720ac;

loc_8f672084:
    loc_ffffffff8f656968(0x1, "%s: hash_ptr malloc failure!\n", "mot_sst_validate_hash_password");
    *r6 = 0x1;
    loc_ffffffff8f64ab9c(r4);
    goto loc_8f672258;

loc_8f6720ac:
    r10 = 0xffffffffffffffe8 + sp + 0x28;
    *r10 = 0x14;
    if ((CPU_FLAGS & NE) || (loc_ffffffff8f6629d0(r5, 0x24, r7, r10, stack[2028]) != 0xf)) goto loc_8f672100;

loc_8f672110:
    if (loc_ffffffff8f66c3f4(r4, 0xa46) != 0x0) goto loc_8f67213c;

loc_8f672124:
    loc_ffffffff8f656968(0x1, "read datablock error: %x\n", 0xff);
    r3 = 0x3;
    goto loc_8f672240;

loc_8f672240:
    *r6 = r3;
    loc_ffffffff8f64ab9c(r4);
    loc_ffffffff8f64ab9c(r5);
    goto loc_8f672258;

loc_8f67213c:
    if ((*(r4 + 0x2) == 0x0) && (*(r4 + 0x3) == 0x1)) {
            r8 = 0x36;
            loc_ffffffff8f656968();
    }
    else {
            loc_ffffffff8f656968(0x1, "cid_get_cid_data: Version 0 datablock\n");
            r8 = 0x0;
    }
    if (loc_ffffffff8f663924(r4, 0xf0, sp + 0xf) == 0xf) goto loc_8f6721a4;

loc_8f67218c:
    loc_ffffffff8f656968(0x1, "validate header error: %x\n", 0xff);
    r3 = 0x4;
    goto loc_8f672240;

loc_8f6721a4:
    r10 = r4 + r8 + 0xac;
    if (loc_ffffffff8f662690(r10, 0x0, 0x0) == 0xf) goto loc_8f6721dc;

loc_8f6721c4:
    loc_ffffffff8f656968(0x1, "validate cert chain error: %x\n", 0xff);
    r3 = 0x5;
    goto loc_8f672240;

loc_8f6721dc:
    if (loc_ffffffff8f6627f8(r4, r8 + 0x2c, r4 + r8 + 0x2c, 0x80, r10) == 0xf) goto loc_8f672214;

loc_8f6721fc:
    loc_ffffffff8f656968(0x1, "validate signature error: %x\n", 0xff);
    r3 = 0x6;
    goto loc_8f672240;

loc_8f672214:
    r2 = r4 + 0x4d;
    r8 = 0x0;
    goto loc_8f67221c;

loc_8f67221c:
    r2 = r2 + 0x1;
    if (*r2 == *(r7 + r8)) goto loc_8f672260;

loc_8f67222c:
    loc_ffffffff8f656968(0x1, "hash at offset i: %02d : %02x does not match\n", r8);
    r3 = 0x7;
    goto loc_8f672240;

loc_8f672260:
    r8 = r8 + 0x1;
    if (r8 != 0x14) goto loc_8f67221c;

loc_8f67226c:
    loc_ffffffff8f66c840(r5, 0x0, 0x10);
    loc_ffffffff8f64ab9c(r5);
    loc_ffffffff8f66c840(r7, 0x0, r8);
    loc_ffffffff8f64ab9c(r7);
    loc_ffffffff8f66c840(r4, 0x0, 0xa46);
    loc_ffffffff8f64ab9c(r4);
    r0 = 0x0;
    *r6 = r0;
    goto loc_8f6722c4;

loc_8f672100:
    loc_ffffffff8f656968();
    r3 = 0x2;
    goto loc_8f672240;

