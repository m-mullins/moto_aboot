    r2 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r4 = arg0;
    stack[2032] = arg1;
    stack[2037] = *0x8f7112f4;
    r3 = *(arg0 + 0x4) - 0x1;
    r6 = *arg0;
    r1 = *(arg0 + 0x10);
    r5 = (r5 << r3 * 0x2) + 0x3;
    r0 = 0x0;
    do {
            if (r0 < r3) {
                    lr = *(r2 + r0 * 0x4);
            }
            if (CPU_FLAGS & L) {
                    *(r1 + r0 * 0x4) = lr;
            }
            if (CPU_FLAGS & L) {
                    r0 = r0 + 0x1;
            }
    } while (CPU_FLAGS & L);
    r7 = (0x3 ^ 0xffffffff) * 0x0;
    r2 = 0x0 - 0xc0000001 << (0x0 - 0xc0000001) * 0x4;
    lr = r1 + r2;
    r0 = r3;
    stack[2034] = 0x0 << 0x0 * 0x4;
    while (r0 < r5) {
            lr = lr + 0x4;
            r0 = r0 + 0x1;
            *(0xfffffffffffffffc + stack[2034] + r7 + lr) = 0x0;
    }
    r7 = r1 - 0x4;
    r0 = 0x0;
    if (r3 <= 0x0) {
            r2 = 0x4;
    }
    while (r0 < r3) {
            lr = *(r7 + 0x4);
            r12 = r7 + 0x4;
            r8 = *(r4 + 0x18);
            r8 = r8 * lr;
            lr = 0x0;
            r5 = lr;
            stack[2033] = r10 >> r8 / 0x10000;
            stack[2035] = zero_extend_32(r8);
            do {
                    r11 = *(r6 + r5 * 0x4);
                    r5 = r5 + 0x1;
                    s0 = stack[2033] * (r11 >> r11 / 0x10000);
                    r8 = stack[2035] * (r11 >> r11 / 0x10000) + stack[2033] * zero_extend_32(r11);
                    COND = r8 < stack[2035] * (r11 >> r11 / 0x10000);
                    r11 = stack[2035] * zero_extend_32(r11);
                    if (COND) {
                            s0 = s0 + 0x10000;
                    }
                    s0 = s0 + r8 / 0x10000;
                    COND = r10 >= 0x0;
                    r8 = *(r7 + 0x4);
                    if (COND) {
                            s0 = s0 + 0x1;
                    }
                    r10 = r10 + r8;
                    COND = r10 >= 0x0;
                    if (COND) {
                            s0 = s0 + 0x1;
                    }
                    r10 = r10 + lr;
                    COND = r10 >= 0x0;
                    if (COND) {
                            s0 = s0 + 0x1;
                    }
                    r7 = r7 + 0x4;
                    *r7 = r10;
                    if (r5 < r3) {
                            lr = s0;
                    }
            } while (CPU_FLAGS & L);
            lr = *(r12 + r2);
            lr = s0 + lr;
            *(r12 + r2) = lr;
            if (lr < s0) {
                    lr = r12 + r2;
            }
            if (!CPU_FLAGS & NB) {
                    do {
                            r7 = *(lr + 0x4);
                            r5 = lr + 0x4;
                            if (r7 == -0x1) {
                                    r7 = 0x0;
                            }
                            if (CPU_FLAGS & E) {
                                    *(lr + 0x4) = r7;
                            }
                            if (CPU_FLAGS & E) {
                                    lr = r5;
                            }
                    } while (CPU_FLAGS & E);
                    *r5 = r7 + 0x1;
            }
            r0 = r0 + 0x1;
            r7 = r12;
    }
    r0 = 0x3 ^ 0xffffffff;
    r2 = 0x0;
    r1 = r1 + stack[2034];
    while (r2 <= r3) {
            r12 = *(r1 + r0);
            r0 = r0 + 0x4;
            *(stack[2032] + r2 * 0x4) = r12;
            r2 = r2 + 0x1;
    }
    r0 = loc_ffffffff8f66a9c0(r4, stack[2032], r6);
    r2 = stack[2037];
    if (r0 != -0x1) {
            if (r2 == *0x8f7112f4) {
                    r0 = loc_ffffffff8f66aa48(r4, stack[2032], r6, 0x0, stack[2048]);
            }
            else {
                    r0 = loc_ffffffff8f648514();
            }
    }
    else {
            if (r2 != *0x8f7112f4) {
                    r0 = loc_ffffffff8f648514();
            }
    }
    return r0;

