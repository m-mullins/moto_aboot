    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r6 = arg0;
    stack[2037] = *arg0;
    r0 = loc_ffffffff8f64f1d4(arg0);
    r8 = r0;
    if (r0 != -0x1) goto loc_8f6396d0;

.l2:
    if (!CPU_FLAGS & E) {
            loc_ffffffff8f648514();
    }
    else {
            loc_ffffffff8f656968();
    }
    return;

loc_8f6396d0:
    if ((r6 != 0x0) || (*0x8f6e08f8 == 0x0)) goto loc_8f6397fc;

loc_8f6396e8:
    r7 = 0x8f711580;
    if ((((*(0x8f711580 + 0x12) | *(0x8f711580 + 0x14) * 0x10000) > loc_ffffffff8f64f2c4()) || ((*(0x8f711580 + 0x16) | *(0x8f711580 + 0x18) * 0x10000) > loc_ffffffff8f64f330())) || (*(0x8f711580 + 0x1c) != loc_ffffffff8f64f27c())) goto loc_8f639804;

loc_8f639730:
    r10 = *(0x8f711580 + 0x14);
    r3 = *(0x8f711580 + 0x12);
    r1 = *(0x8f711580 + 0x18);
    r10 = r3 | r10 * 0x10000;
    r3 = *(0x8f711580 + 0x1c);
    r8 = 0x3f + r8 + (*(0x8f711580 + 0x16) | r1 * 0x10000) * (r10 * (r3 >> r3 / 0x8) + 0x3 & !0x3) & !0x3f;
    if (r10 != loc_ffffffff8f64f2c4()) goto loc_8f6397c0;

loc_8f639774:
    r10 = *(0x8f711580 + 0x18);
    r3 = *(0x8f711580 + 0x16);
    r0 = loc_ffffffff8f64f330();
    if ((r3 | r10 * 0x10000) != r0) goto loc_8f6397c0;

loc_8f63978c:
    if (stack[2037] != *r0) goto loc_8f639b9c;

loc_8f63979c:
    r12 = *(0x8f711580 + 0x14);
    r0 = r8;
    r2 = *(0x8f711580 + 0x18);
    r3 = *(0x8f711580 + 0x16);
    r1 = *(0x8f711580 + 0x12);
    goto loc_8f6397f0;

loc_8f6397f0:
    loc_ffffffff8f64de4c();
    return;

loc_8f639b9c:
    loc_ffffffff8f648514();
    return;

loc_8f6397c0:
    if (stack[2037] != *0x8f7112f4) goto loc_8f639b9c;

loc_8f6397d0:
    r12 = *(r7 + 0x14);
    r0 = r8;
    r1 = *(r7 + 0x12);
    r2 = *(r7 + 0x18);
    goto loc_8f6397f0;

loc_8f639804:
    s0 = loc_ffffffff8f64f20c();
    r0 = loc_ffffffff8f6539b0(0x8f6848d7);
    if (r0 != -0x1) {
            CMP(s0, 0x0);
    }
    r5 = r0;
    if (CPU_FLAGS & NE) goto loc_8f639840;

loc_8f639824:
    if (stack[2037] == *0x8f7112f4) {
            r0 = 0x0 ^ 0xffffffff;
    }
    if (!CPU_FLAGS & E) {
            loc_ffffffff8f648514();
    }
    else {
            loc_ffffffff8f656968();
    }
    return;

loc_8f639840:
    r0 = loc_ffffffff8f65360c();
    if (r0 != 0x0) goto loc_8f639874;

loc_8f63984c:
    if (stack[2037] == *0x8f7112f4) {
            r0 = 0x0 ^ 0xffffffff;
    }
    if (!CPU_FLAGS & NE) {
            loc_ffffffff8f656968();
    }
    else {
            loc_ffffffff8f648514();
    }
    return;

loc_8f639874:
    loc_ffffffff8f653b20(r5);
    asm{ strd       r0, r1, [sp, #0x48 + var_38] };
    if (loc_ffffffff8f6507a4() == 0x0) goto loc_8f6398c8;

loc_8f63989c:
    if (stack[2037] == *0x8f7112f4) {
            loc_ffffffff8f656968(0x0 ^ 0xffffffff, "%s: failed in reading %s image header\n", "display_logo", 0x8f6848d7, stack[2048]);
    }
    else {
            loc_ffffffff8f648514();
    }
    return;

loc_8f6398c8:
    loc_ffffffff8f64ac90(0x8f711588, 0x8f711589, 0xff7);
    *(0x8f711580 + 0x8) = *(0x8f711580 + 0x8) - 0x1;
    r0 = loc_ffffffff8f64b354("MotoLogo");
    r0 = loc_ffffffff8f64b470(0x8f711580, "MotoLogo", r0);
    if (r0 != 0x0) goto loc_8f639918;

loc_8f639904:
    s0 = r6;
    r5 = r0;
    if (r6 != 0x0) {
            if (r6 != 0x2) {
                    if (r6 != 0x1) {
                            if (r6 != 0x3) {
                                    r3 = "logo_charge";
                                    if (s0 == 0x4) {
                                            r5 = r3;
                                    }
                            }
                            else {
                                    r5 = "logo_lowpower";
                            }
                    }
                    else {
                            r5 = "logo_unlocked";
                    }
            }
            else {
                    r5 = "logo_battery";
            }
    }
    else {
            r5 = 0x8f685036;
    }
    goto loc_8f639980;

loc_8f639980:
    r3 = *(0x8f711580 + 0x8);
    r10 = 0xc;
    r11 = 0x0;
    goto loc_8f63998c;

loc_8f63998c:
    r0 = 0x8f711580 + r10;
    if (r10 >= r3) goto loc_8f639b44;

loc_8f639998:
    r0 = loc_ffffffff8f64b470();
    r11 = r11 + 0x1;
    r3 = r3;
    if (r0 != 0x0) goto loc_8f639a78;

loc_8f6399b8:
    r11 = 0x8f711580 + r11 * 0x20;
    r5 = *(r11 + 0x4);
    r1 = *(*0x8f7125ec + 0x8);
    r0 = loc_ffffffff8f67b468(r5, r1);
    if (r1 != 0x0) {
            r0 = loc_ffffffff8f656968(0x1, "the start address not sector alignment\n");
            if (stack[2037] == *0x8f7112f4) {
                    r0 = 0x1;
            }
            if (!CPU_FLAGS & NE) {
                    loc_ffffffff8f656968();
            }
            else {
                    loc_ffffffff8f648514();
            }
    }
    else {
            asm{ ldrd       r0, r1, [sp, #0x48 + var_38] };
            r0 = r0 + r5;
            r0 = loc_ffffffff8f6507a4(r0, r1 + 0x0 + CARRY(FLAGS), *(r11 + 0x8), 0x0, r8);
            COND = r5 == 0x0;
            if (!COND) {
                    if (stack[2037] == *0x8f7112f4) {
                            r0 = 0x2;
                    }
                    if (!CPU_FLAGS & E) {
                            loc_ffffffff8f648514();
                    }
                    else {
                            loc_ffffffff8f656968();
                    }
            }
            else {
                    loc_ffffffff8f64de4c(r8, *(*(loc_ffffffff8f633874() + 0x1f8) + 0x4), *(*(loc_ffffffff8f633874() + 0x1f8) + 0x4), r5);
                    if (((loc_ffffffff8f662564() == 0xde) && (r6 == 0x1)) && (*0x8f6e08d4 != 0x0)) {
                            if (stack[2037] == *0x8f7112f4) {
                                    loc_ffffffff8f63dc10("ic_unlocked_bootloader", *(0x8f712580 + 0x38), *(0x8f712580 + 0x3c), 0x4, stack[2048]);
                            }
                            else {
                                    loc_ffffffff8f648514();
                            }
                    }
                    else {
                            if (stack[2037] != *0x8f7112f4) {
                                    loc_ffffffff8f648514();
                            }
                    }
            }
    }
    return;

loc_8f639a78:
    r10 = r10 + 0x20;
    if (r11 != 0x6) goto loc_8f63998c;

loc_8f639b44:
    if (s0 == 0x0) goto loc_8f639b6c;

loc_8f639b4c:
    if (s0 == 0x3) {
            loc_ffffffff8f656968();
            s0 = 0x4;
            r3 = "logo_charge";
            if (s0 == 0x4) {
                    r5 = r3;
            }
    }
    else {
            loc_ffffffff8f656968();
            s0 = 0x0;
            r5 = 0x8f685036;
    }
    goto loc_8f639980;

loc_8f639b6c:
    if (stack[2037] == *0x8f7112f4) {
            r0 = s0;
    }
    if (!CPU_FLAGS & E) {
            loc_ffffffff8f648514();
    }
    else {
            loc_ffffffff8f656968();
    }
    return;

loc_8f639918:
    r2 = 0x0;
    asm{ strd       r0, r1, [sp, #0x48 + var_48] };
    r0 = loc_ffffffff8f67b018(0x8f6848d7, r8, r2, 0x0);
    COND = r5 == 0x0;
    if (COND) goto loc_8f639a10;

loc_8f639940:
    if (stack[2037] == *0x8f7112f4) {
            r0 = 0x1;
    }
    if (!CPU_FLAGS & E) {
            loc_ffffffff8f648514();
    }
    else {
            loc_ffffffff8f656968();
    }
    return;

loc_8f639a10:
    r6 = *(*(loc_ffffffff8f633874() + 0x1f8) + 0x4);
    r0 = loc_ffffffff8f633874();
    if (stack[2037] != *0x8f7112f4) goto loc_8f639b9c;

loc_8f639a30:
    r3 = *(r0 + 0x1f8);
    r0 = r8;
    goto loc_8f6397f0;

loc_8f6397fc:
    *0x8f6e08f8 = 0x0;
    goto loc_8f639804;

