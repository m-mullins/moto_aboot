    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x6c;
    stack[2037] = *0x8f7112f4;
    if (*0x8f6aff80 != 0x0) goto loc_8f657b78;

loc_8f657928:
    r2 = *(*0x8f6ed830 + 0x1c);
    if (r2 == 0x0) goto loc_8f657b78;

loc_8f657934:
    r1 = 0x1ffe00;
    if (r2 >= r1) {
            r8 = *0x8f6ed830;
            r3 = *0x8f6aff80;
            r1 = 0x1ffe00;
            *(r8 + 0x1c) = r1;
            *(r8 + 0x20) = 0x200;
            *(r8 + 0x18) = r3;
            *(r8 + 0x24) = 0x200000;
    }
    r3 = *(*0x8f6ed830 + 0x18);
    if ((r3 & 0x3) != 0x0) {
            r8 = *0x8f6ed830;
            r0 = *(r8 + 0x20);
            *(r8 + 0x18) = r3 & !0x3;
            *(r8 + 0x20) = r0 + ((r3 & !0x3) - r3);
            r1 = *(r8 + 0x1c);
            *(r8 + 0x1c) = r3 + r1 - (r3 & !0x3);
    }
    r8 = *0x8f6ed830;
    s0 = *(r8 + 0x1c);
    r5 = 0x0;
    r12 = *(r8 + 0x18);
    r2 = s0;
    asm{ strd       r2, r3, [sp, #0x90 + var_80] };
    asm{ ldrd       r2, r3, [sl] };
    r7 = 0x8f6ed820;
    asm{ strd       r2, r3, [sp, #0x90 + var_78] };
    r3 = *(r8 + 0x14);
    asm{ ldrd       r0, r1, [sp, #0x90 + var_78] };
    r4 = r12 + r3;
    asm{ ldrd       r2, r3, [sp, #0x90 + var_78] };
    r5 = r5 + 0x0 + CARRY(FLAGS);
    r4 = r4 + r2;
    r5 = r5 + r3 + CARRY(FLAGS);
    asm{ ldrd       r2, r3, [r7] };
    r0 = r0 + r2;
    r1 = r1 + r3 + CARRY(FLAGS);
    if (r5 == r1) {
            CMP(r4, r0);
    }
    if (!CPU_FLAGS & B) {
            r0 = r4 - r0;
            stack[2015] = r12;
            loc_ffffffff8f67b5cc(r0, r5 - r1 + !CARRY(FLAGS));
            asm{ ldrd       r4, r5, [sp, #0x90 + var_78] };
            r12 = stack[2015];
            r4 = r4 + 0x200;
            r5 = r5 + 0x0 + CARRY(FLAGS);
            r4 = r4 + r2;
            r5 = r5 + r3 + CARRY(FLAGS);
    }
    if (r12 != 0x0) goto loc_8f657a74;

loc_8f657a18:
    r8 = *0x8f6ed830;
    r6 = sp + 0x24;
    loc_ffffffff8f64adc8(r6, r12, 0x40);
    loc_ffffffff8f64a9f0(r6, 0x40, "\nMOTO LOG Sequence: %d\n", *(r8 + 0x10));
    r2 = 0x40;
    if (loc_ffffffff8f650ad0(r4, r5, r2, 0x0, r6) != 0x0) goto loc_8f657b64;

loc_8f657a60:
    r8 = *0x8f6ed830;
    r4 = r4 + 0x40;
    r3 = *(r8 + 0x18);
    r5 = r5 + 0x0 + CARRY(FLAGS);
    r3 = r3 + 0x40;
    *(r8 + 0x18) = r3;
    goto loc_8f657a74;

loc_8f657a74:
    asm{ ldrd       r2, r3, [sl] };
    asm{ ldrd       r6, r7, [r7] };
    r6 = r6 + r2;
    r7 = r7 + r3 + CARRY(FLAGS);
    asm{ ldrd       r2, r3, [sp, #0x90 + var_80] };
    r2 = r2 + r4;
    if (r3 + r5 + CARRY(FLAGS) == r7) {
            CMP(r2, r6);
    }
    if (CPU_FLAGS & B) goto loc_8f657b08;

loc_8f657a9c:
    r6 = r6 - r4;
    r7 = r7 - r5 + !CARRY(FLAGS);
    r1 = r5;
    r2 = r6;
    r0 = loc_ffffffff8f657394(r4, r1, r2, r7);
    if (r0 == -0x1) goto loc_8f657b64;

loc_8f657ac0:
    r8 = *0x8f6ed830;
    asm{ ldrd       r0, r1, [r3] };
    r3 = *(r8 + 0x18);
    r0 = r0 + 0x200;
    r3 = r3 + r6;
    *(r8 + 0x18) = r3;
    asm{ ldrd       r2, r3, [sp, #0x90 + var_80] };
    r1 = r1 + 0x0 + CARRY(FLAGS);
    r2 = r2 - r6;
    if (loc_ffffffff8f657394(r0, r1, r2, r3 - r7 + !CARRY(FLAGS)) == -0x1) goto loc_8f657b64;

loc_8f657af4:
    r8 = *0x8f6ed830;
    *(r8 + 0x18) = s0 + *(r8 + 0x18) - r6;
    goto loc_8f657b2c;

loc_8f657b2c:
    r8 = *0x8f6ed830;
    *(r8 + 0x1c) = *(r8 + 0x1c) - s0;
    *(r8 + 0x30) = 0x0;
    *(r8 + 0x30) = loc_ffffffff8f657598(r8);
    asm{ ldrd       r0, r1, [sl] };
    loc_ffffffff8f650ad0();
    goto loc_8f657b78;

loc_8f657b78:
    if (stack[2037] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

loc_8f657b64:
    r8 = *0x8f6ed830;
    *(r8 + 0x30) = 0x0;
    *(r8 + 0x30) = loc_ffffffff8f657598(r8);
    goto loc_8f657b78;

loc_8f657b08:
    r0 = r4;
    r1 = r5;
    asm{ ldrd       r2, r3, [sp, #0x90 + var_80] };
    if (loc_ffffffff8f657394(r0, r1) == -0x1) goto loc_8f657b64;

loc_8f657b20:
    r8 = *0x8f6ed830;
    *(r8 + 0x18) = *(r8 + 0x18) + s0;
    goto loc_8f657b2c;

