    r8 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x2c;
    stack[2031] = arg1;
    r3 = *0x8f7112f4;
    stack[2032] = arg2;
    stack[2034] = arg0;
    stack[2037] = r3;
    r7 = loc_ffffffff8f64f1d4(arg0, arg1, arg2, r3, stack[2028], stack[2029]);
    r0 = loc_ffffffff8f633874();
    stack[2033] = r0;
    if (r0 == 0x0) goto loc_8f63e064;

loc_8f63dc4c:
    if (r7 != -0x1) goto loc_8f63dc64;

loc_8f63dc54:
    loc_ffffffff8f656968(r7, "display is not initialized, skip displaying logo!\n");
    goto loc_8f63dc9c;

loc_8f63dc9c:
    r6 = 0x0;
    goto loc_8f63e068;

loc_8f63e068:
    r0 = r6;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f63dc64:
    r6 = loc_ffffffff8f64f20c();
    r0 = loc_ffffffff8f6539b0(0x8f6848d7);
    if (r0 != -0x1) {
            CMP(r6, 0x0);
    }
    r4 = r0;
    if (CPU_FLAGS & NE) {
            r6 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r6 = 0x1;
    }
    if (CPU_FLAGS & NE) goto loc_8f63dca4;

loc_8f63dc8c:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "%s: No valid logo\n", "display_image");
    goto loc_8f63dc9c;

loc_8f63dca4:
    r0 = loc_ffffffff8f65360c();
    COND = r5 == 0x0;
    if (CPU_FLAGS & E) goto loc_8f63dcd8;

loc_8f63dcb8:
    r0 = loc_ffffffff8f653a28(r4);
    stack[2035] = r0;
    if (r0 != 0x0) goto loc_8f63dce0;

loc_8f63dcd8:
    loc_ffffffff8f656968();
    goto loc_8f63e068;

loc_8f63dce0:
    loc_ffffffff8f653b20(r4);
    stack[2028] = 0x8f711580;
    if (loc_ffffffff8f6507a4() == 0x0) goto loc_8f63dd1c;

loc_8f63dd04:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "%s: failed in reading %s image header\n", "display_image", 0x8f6848d7);
    goto loc_8f63e068;

loc_8f63dd1c:
    r11 = 0x8f711580;
    loc_ffffffff8f64ac90(r11 + 0x8, r11 + 0x9, 0xff7);
    s0 = *(r11 + 0x9);
    r0 = "MotoLogo";
    s0 = *(r11 + 0x8) | s0 * 0x100;
    s0 = s0 | *(r11 + 0xa) * 0x10000;
    r3 = *(r11 + 0xb);
    s0 = (s0 | r3 * 0x1000000) - 0x1;
    *(r11 + 0x8) = s0;
    asm{ ubfx       r3, sb, #0x8, #0x8 };
    *(r11 + 0x9) = r3;
    asm{ ubfx       r3, sb, #0x10, #0x8 };
    *(r11 + 0xa) = r3;
    *(r11 + 0xb) = r3 >> s0 / 0x1000000;
    r0 = loc_ffffffff8f64b354(r0);
    r0 = loc_ffffffff8f64b470(r11, "MotoLogo", r0);
    if (r0 == 0x0) {
            r0 = r6;
    }
    if (CPU_FLAGS & NE) {
            r0 = 0x0 ^ 0xffffffff;
    }
    if (CPU_FLAGS & NE) goto loc_8f63dcd8;

loc_8f63dd94:
    r3 = r0 + 0x1;
    r10 = 0x8f711580 + r3 * 0x20;
    r4 = *(r10 + 0x5);
    r4 = *(r10 + 0x4) | r4 * 0x100;
    r4 = r4 | *(r10 + 0x6) * 0x10000;
    r4 = r4 | *(r10 + 0x7) * 0x1000000;
    if (r4 - 0x1 > -0x3) goto loc_8f63dcd8;

loc_8f63ddc4:
    r2 = r0 * 0x20 + 0x8f71158c - 0x8f711580;
    if ((r2 >= s0) || (r2 >= stack[2035])) goto loc_8f63dcd8;

loc_8f63dde4:
    r3 = r3;
    if (loc_ffffffff8f64b470() != 0x0) goto loc_8f63ded4;

loc_8f63de00:
    s0 = *(*0x8f7125ec + 0x8);
    loc_ffffffff8f67b468(r4, s0);
    if (s0 == 0x0) goto loc_8f63de38;

loc_8f63de20:
    loc_ffffffff8f656968(0x1, "the start address not sector alignment\n");
    goto loc_8f63df0c;

loc_8f63df0c:
    loc_ffffffff8f656968();
    goto loc_8f63e068;

loc_8f63de38:
    r0 = loc_ffffffff8f67b3c0(r4, s0);
    r2 = *(r5 + 0x20) | *(r5 + 0x21) * 0x100 | *(r5 + 0x22) * 0x10000 | *(r5 + 0x23) * 0x1000000;
    r12 = *(r5 + 0x25);
    r1 = *(r5 + 0x24);
    r1 = r1 | r12 * 0x100 | *(r5 + 0x26) * 0x10000;
    r12 = *(r5 + 0x27);
    r4 = r2 + r0;
    r2 = *(r10 + 0x9);
    r5 = (r1 | r12 * 0x1000000) + 0x0 + CARRY(FLAGS);
    r3 = *(r10 + 0x8);
    r3 = r3 | r2 * 0x100 | *(r10 + 0xa) * 0x10000;
    r2 = *(r10 + 0xb);
    r10 = loc_ffffffff8f67b3c0(r3 | r2 * 0x1000000, s0, r2, r3 | r2 * 0x1000000, stack[2028]);
    loc_ffffffff8f67b468(r3 | r2 * 0x1000000, s0);
    s0 = s0;
    COND = r1 != 0x0;
    if (COND) goto loc_8f63deec;
    goto loc_8f63dcd8;

loc_8f63deec:
    if (loc_ffffffff8f65066c(r4, r10, r7) == 0x0) goto loc_8f63df14;
    goto loc_8f63df0c;

loc_8f63df14:
    if (s0 == 0x0) goto loc_8f63df4c;

loc_8f63df1c:
    if (loc_ffffffff8f65066c(r10 + r4, 0x1, 0x8f711580) != 0x0) goto loc_8f63df0c;

loc_8f63df34:
    r3 = *0x8f7125ec;
    r0 = *(r3 + 0x8);
    loc_ffffffff8f64ac90(r7 + r0 * r10, 0x8f711580, s0, r3);
    goto loc_8f63df4c;

loc_8f63df4c:
    if (*(*(stack[2033] + 0x1f8) + 0x18) != 0x1) goto loc_8f63df70;

loc_8f63df60:
    if (r8 == 0x2) goto loc_8f63dfe0;

loc_8f63df68:
    if (r8 == 0x3) goto loc_8f63dfb0;

loc_8f63df70:
    if (r8 != 0x1) goto loc_8f63dfa8;

loc_8f63df78:
    if (stack[2037] == *0x8f7112f4) {
            r0 = loc_ffffffff8f64e71c(r7, 0x0, 0x0, 0x0, stack[2048]);
    }
    else {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f63dfa8:
    if (r8 == 0x2) {
            r0 = loc_ffffffff8f64e998(r7, 0x0, 0x0, 0x0, stack[2031], stack[2032]);
    }
    else {
            if (r8 == 0x3) {
                    r0 = loc_ffffffff8f64ec18(r7, 0x0, 0x0, 0x0, stack[2031], stack[2032]);
            }
            else {
                    if (r8 == 0x4) {
                            r0 = loc_ffffffff8f64ee80(r7, 0x0, 0x0, 0x0, stack[2031], stack[2032]);
                    }
                    else {
                            r0 = loc_ffffffff8f64e330(r7, 0x0, 0x0, 0x0, stack[2031], stack[2032]);
                    }
            }
    }
    goto loc_8f63e05c;

loc_8f63e05c:
    r6 = r0;
    goto loc_8f63e068;

loc_8f63dfb0:
    r0 = loc_ffffffff8f64e998(r7, 0x0, 0x0, 0x0, stack[2031], stack[2032]);
    goto loc_8f63e05c;

loc_8f63dfe0:
    r0 = loc_ffffffff8f64ec18(r7, 0x0, 0x0, 0x0, stack[2031], stack[2032]);
    goto loc_8f63e05c;

loc_8f63ded4:
    r0 = zero_extend_32(r3);
    goto loc_8f63dd94;

loc_8f63e064:
    r6 = stack[2033];
    goto loc_8f63e068;

