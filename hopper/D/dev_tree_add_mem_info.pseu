    r2 = arg2;
    stack[2037] = arg0;
    stack[2042] = r6;
    stack[2044] = r8;
    stack[2045] = r10;
    stack[2046] = r11;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r11 = arg3;
    r6 = arg0;
    r10 = r2;
    r8 = stack[2049];
    r3 = *0x8f7112f4;
    s0 = stack[2050];
    stack[2038] = r3;
    r0 = loc_ffffffff8f604a54(arg0, arg1, r2, r3, stack[2037], stack[2038], r2, 0x8f6b8bdc, r5, stack[2042], 0x8f7112f4, stack[2044], stack[2045], stack[2046], lr);
    *0x8f6b8bdc = arg1;
    if (r0 == 0x0) goto loc_8f615154;

loc_8f615040:
    r0 = loc_ffffffff8f612f5c(r6, 0x0);
    if (r0 == -0x1) goto loc_8f61513c;

loc_8f615054:
    r2 = "#address-cells";
    r0 = loc_ffffffff8f64c438(r6, *0x8f6ac0c0, r2, sp);
    r3 = stack[2037];
    if (r3 <= 0x0) goto loc_8f615088;

loc_8f61507c:
    if (r0 != 0x0) goto loc_8f6150b4;

loc_8f615114:
    loc_ffffffff8f656968();
    r5 = stack[2037];
    if (r5 >= 0x0) goto loc_8f615164;

loc_8f615140:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Could not find #address-cells and #size-cells properties: ret %d\n", r5);
    goto loc_8f6151e4;

loc_8f6151e4:
    r0 = r5;
    goto loc_8f6151e8;

loc_8f6151e8:
    if (stack[2038] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f615164:
    r4 = 0x8f6b8bdc;
    asm{ ldmib      r4, {r2, r3} };
    r0 = *(r4 + 0xc);
    r1 = r0 + r3 + r2;
    if (r1 < 0xf) goto loc_8f615194;

loc_8f61517c:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Max supported mem info size is %d!\n", 0x10);
    r0 = 0x0 ^ 0xffffffff;
    goto loc_8f6151e8;

loc_8f615194:
    if (0x8f6b8bec == 0x2) {
            r12 = r2 + 0x1;
    }
    if (CPU_FLAGS & E) {
            r1 = 0x8f6b8bdc;
    }
    if (CPU_FLAGS & E) {
            *(0x8f6b8bec + r2 * 0x4) = r11;
    }
    if (CPU_FLAGS & E) {
            *(r1 + 0x4) = r12;
    }
    r2 = *(0x8f6b8bdc + 0x4);
    if (r0 == 0x2) {
            r0 = 0x8f6b8bdc;
    }
    r1 = r2 + 0x1;
    *(0x8f6b8bdc + 0x4) = r1;
    *(0x8f6b8bec + r2 * 0x4) = r10;
    if (CPU_FLAGS & E) {
            r2 = r2 + 0x2;
    }
    if (CPU_FLAGS & E) {
            *(r0 + 0x4) = r2;
    }
    if (CPU_FLAGS & E) {
            r2 = 0x8f6b8bec;
    }
    if (CPU_FLAGS & E) {
            *(r2 + r1 * 0x4) = s0;
    }
    r2 = *(0x8f6b8bdc + 0x4);
    *(0x8f6b8bdc + 0x4) = r2 + 0x1;
    *(0x8f6b8bec + r2 * 0x4) = r8;
    goto loc_8f6151e4;

loc_8f6150b4:
    *(0x8f6b8bdc + 0x8) = loc_ffffffff8f612f08(*r0);
    goto loc_8f6150c0;

loc_8f6150c0:
    r2 = "#size-cells";
    r0 = loc_ffffffff8f64c438(r6, *0x8f6ac0c0, r2, sp);
    r3 = stack[2037];
    if (r3 <= 0x0) goto loc_8f6150ec;

loc_8f6150e0:
    if (r0 != 0x0) goto loc_8f615128;
    goto loc_8f615114;

loc_8f615128:
    *(0x8f6b8bdc + 0xc) = loc_ffffffff8f612f08(*r0);
    goto loc_8f615134;

loc_8f615134:
    r5 = 0x0;
    goto loc_8f615164;

loc_8f6150ec:
    if (r3 != -0x1) goto loc_8f615114;

loc_8f6150f4:
    r2 = 0x1;
    *(0x8f6b8bdc + 0xc) = r2;
    loc_ffffffff8f656968(r3, "Using default #size_cell_size: %u\n", r2);
    goto loc_8f615134;

loc_8f615088:
    if (r3 != -0x1) goto loc_8f615114;

loc_8f615090:
    *(0x8f6b8bdc + 0x8) = 0x2;
    loc_ffffffff8f656968(r3, "Using default #addr_cell_size: %u\n", 0x2);
    goto loc_8f6150c0;

loc_8f61513c:
    r5 = r0;
    goto loc_8f615140;

loc_8f615154:
    r5 = r0;
    r3 = 0x1;
    *(0x8f6b8bdc + 0x8) = r3;
    *(0x8f6b8bdc + 0xc) = r3;
    goto loc_8f615164;

