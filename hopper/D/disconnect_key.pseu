    sp = sp - 0x4 - 0x4 - 0x4 - 0x4;
    r4 = 0x8f7112f4;
    r3 = *r4;
    loc_ffffffff8f61c324(0x8f6e082c, arg1);
    r0 = loc_ffffffff8f6431c0();
    r2 = r3;
    r3 = *r4;
    if (r0 != 0x0) {
            if (r2 == r3) {
                    sp = sp + 0x8;
                    sp = sp - 0x4 - 0x4 - 0x4 - 0x4;
                    r1 = 0x0;
                    r2 = *0x8f7112f4;
                    *0x8f6e0b34 = r1;
                    r3 = *0x8f7112f4;
                    if (r2 != r3) {
                            r0 = loc_ffffffff8f648514();
                    }
                    else {
                            sp = sp + 0xc;
                            if (0x40 == 0x0) {
                                    return 0x8f6e0af4;
                            }
                            r2 = 0x40;
                            r0 = 0x8f6e0af4;
                            r12 = r0;
                            if (r2 >= 0x30) {
                                    r0 = 0x8f6e0af4;
                                    r1 = r1 & 0xff | (r1 & 0xff) * 0x100 | (r1 & 0xff | (r1 & 0xff) * 0x100) * 0x10000;
                                    if ((r0 & 0xf) != 0x0) {
                                            r0 = 0x8f6e0af4;
                                            r3 = 0x0 - (r3 << r0 * 0x10000000);
                                            asm{ msr        apsr_nzcvq, r3 };
                                            if (CPU_FLAGS & O) {
                                                    *r0 = r1;
                                                    r0 = r0 + 0x1;
                                            }
                                            if (CPU_FLAGS & NS) {
                                                    *r0 = r1;
                                                    r0 = r0 + 0x2;
                                            }
                                            if (CPU_FLAGS & E) {
                                                    *r0 = r1;
                                                    r0 = r0 + 0x4;
                                            }
                                            if (CPU_FLAGS & S) {
                                                    *r0 = r1;
                                                    r0 = r0 + 0x4;
                                            }
                                            if (CPU_FLAGS & S) {
                                                    *r0 = r1;
                                                    r0 = r0 + 0x4;
                                            }
                                            r2 = r2 - r3 / 0x10000000;
                                    }
                                    r2 = r2 - 0x20;
                                    do {
                                            asm{ stm        r0!, {r1, r3, r4, r5} };
                                            r2 = r2 - 0x20;
                                            COND = r2 >= 0x0;
                                            asm{ stm        r0!, {r1, r3, r4, r5} };
                                    } while (COND);
                                    r2 = r2 + 0x20;
                                    COND = r2 == 0x0;
                                    if (!COND) {
                                            do {
                                                    r2 = r2 - 0x1;
                                                    COND = r2 > 0x0;
                                                    *r0 = r1;
                                                    r0 = r0 + 0x1;
                                            } while (COND);
                                    }
                            }
                            else {
                                    do {
                                            r2 = r2 - 0x1;
                                            COND = r2 > 0x0;
                                            *r0 = r1;
                                            r0 = r0 + 0x1;
                                    } while (COND);
                            }
                            r0 = r12;
                    }
            }
            else {
                    r0 = loc_ffffffff8f648514();
            }
    }
    else {
            if (r2 != r3) {
                    r0 = loc_ffffffff8f648514();
            }
    }
    return r0;

