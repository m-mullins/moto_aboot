    r1 = arg1;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x1c;
    r5 = arg2;
    r4 = arg0;
    stack[2035] = arg3;
    r6 = r1;
    s0 = arg4;
    r8 = arg5;
    stack[2037] = *0x8f7112f4;
    if (*0x8f6afe0c != 0x0) goto loc_8f64e3b8;

loc_8f64e36c:
    r10 = *0x8f6e0c38;
    if (r10 == 0x0) goto loc_8f64e6c0;

loc_8f64e37c:
    r12 = *(r10 + 0x14);
    if (r5 > r12) goto loc_8f64e3b4;

loc_8f64e388:
    r7 = *(r10 + 0x10);
    if ((r1 > r7) || ((r8 > r12) || (s0 >= r7))) goto loc_8f64e3b4;

loc_8f64e3c0:
    r2 = r1 + s0;
    if ((r5 + r8 > r12) || (r2 > r7)) goto loc_8f64e3b4;

loc_8f64e3d8:
    if (*0x8f6e0c40 != 0x0) goto loc_8f64e670;

loc_8f64e3e8:
    r0 = loc_ffffffff8f64af40();
    r12 = r12;
    if (r0 != 0x0) goto loc_8f64e4a4;

loc_8f64e404:
    r2 = *(r4 + 0xb);
    r5 = *(r4 + 0xa);
    r3 = *(r4 + 0x9);
    r6 = *(r4 + 0x8);
    r5 = r2 | r5 * 0x100;
    COND = r5 != 0x0;
    if (COND) {
            r2 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r2 = 0x1;
    }
    r6 = r3 | r6 * 0x100;
    COND = r6 != 0x0;
    if (COND) {
            r3 = r2;
    }
    if (CPU_FLAGS & E) {
            r3 = r2 | 0x1;
    }
    if (r3 != 0x0) goto loc_8f64e3b8;

loc_8f64e434:
    r2 = *(r10 + 0x1c);
    if (r2 == 0x3) goto loc_8f64e454;

loc_8f64e440:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Invalid logo pixel format %d\n", r2 << r2 * 0x8);
    goto loc_8f64e3b8;

loc_8f64e3b8:
    r0 = 0x0;
    goto loc_8f64e6c4;

loc_8f64e6c4:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f64e454:
    if ((r5 > r12) || (r6 >= r7)) goto loc_8f64e3b4;

loc_8f64e478:
    r2 = r6 + s0;
    if (r5 + r8 > r12) goto loc_8f64e3b4;

loc_8f64e488:
    if (r2 < r7) {
            r4 = r4 + 0xc;
    }
    if (CPU_FLAGS & B) {
            r0 = 0x1;
    }
    if (CPU_FLAGS & B) goto loc_8f64e4a8;

loc_8f64e3b4:
    loc_ffffffff8f656968();
    goto loc_8f64e3b8;

loc_8f64e4a8:
    r2 = *(r10 + 0x1c);
    r1 = *r10;
    if (r0 == 0x0) goto loc_8f64e5b4;

loc_8f64e4b8:
    r7 = r1 + r2 * (s0 + r7 * r8);
    goto loc_8f64e4c0;

loc_8f64e4c0:
    if (r5 == 0x0) goto loc_8f64e680;

loc_8f64e4c8:
    r8 = r6;
    goto loc_8f64e4cc;

loc_8f64e4cc:
    if (r8 == 0x0) goto loc_8f64e598;

loc_8f64e4d4:
    s0 = *r4;
    s0 = *(r4 + 0x1) | s0 * 0x100;
    if ((s0 & 0x8000) == 0x0) goto loc_8f64e548;

loc_8f64e4e8:
    asm{ ubfx       sb, sb, #0x0, #0xf };
    COND = r3 < 0x0;
    if (COND) {
            r3 = 0x0;
    }
    if (s0 > r8) {
            r3 = r3 | 0x1;
    }
    if (r3 != 0x0) goto loc_8f64e3b8;

loc_8f64e504:
    r0 = *(r4 + 0x2);
    r1 = r4 + 0x5;
    r12 = *(r4 + 0x3);
    r8 = r8 - s0;
    r4 = *(r4 + 0x4);
    r3 = r7;
    r2 = s0;
    do {
            r2 = r2 - 0x1;
            COND = r2 >= 0x0;
            if (COND) {
                    *r3 = r0;
            }
            if (CPU_FLAGS & NS) {
                    r3 = r3 + 0x3;
            }
            if (CPU_FLAGS & NS) {
                    *(r3 + 0xfffffffffffffffe) = r12;
            }
            if (CPU_FLAGS & NS) {
                    *(r3 + 0xffffffffffffffff) = r4;
            }
    } while (CPU_FLAGS & NB);
    r4 = r1;
    r7 = r7 + s0 + s0 * 0x2;
    goto loc_8f64e4cc;

loc_8f64e548:
    COND = r3 < 0x0;
    if (COND) {
            r3 = 0x0;
    }
    if (s0 > r8) {
            r3 = r3 | 0x1;
    }
    if (r3 != 0x0) goto loc_8f64e3b8;

loc_8f64e560:
    r3 = *0x8f6e0c38;
    r8 = r8 - s0;
    loc_ffffffff8f64ac90(r7, r4 + 0x2, *(r3 + 0x1c) * s0, r3);
    r3 = *0x8f6e0c38;
    r3 = *(r3 + 0x1c);
    r7 = r7 + r3 * s0;
    r4 = r3 * s0 + r4 + 0x2;
    goto loc_8f64e4cc;

loc_8f64e598:
    r3 = *0x8f6e0c38;
    r5 = r5 - 0x1;
    r7 = r7 + *(r3 + 0x1c) * (*(r3 + 0x10) - r6);
    goto loc_8f64e4c0;

loc_8f64e680:
    loc_ffffffff8f656968(0x2, "flush surface...\n");
    r0 = *0x8f6e0c38;
    loc_ffffffff8f64942c(r0);
    loc_ffffffff8f656968(0x2, "flush surface end\n");
    if (*0x8f6e0c3c != 0x0) {
            loc_ffffffff8f61017c();
    }
    loc_ffffffff8f64d5d8();
    r0 = 0x1;
    goto loc_8f64e6c4;

loc_8f64e5b4:
    r10 = r2 * r6;
    stack[2034] = r7 * r2;
    if (stack[2035] != 0x0) {
            r6 = r0;
            r7 = s0 + r7 * ((r8 - 0x1) + r5);
            r8 = r10 + 0x3 & !0x3;
            r7 = r1 + r2 * r7;
            while (r6 != r5) {
                    r1 = r4;
                    r4 = r4 + r8;
                    loc_ffffffff8f64ac90(r7, r1, r10);
                    r6 = r6 + 0x1;
                    r7 = r7 - stack[2034];
            }
    }
    else {
            if (s0 != 0x0) {
                    r6 = stack[2035];
                    r7 = r1 + r2 * (s0 + r7 * r8);
                    while (r6 != r5) {
                            r1 = r4;
                            r4 = r4 + r10;
                            loc_ffffffff8f64ac90(r7, r1, r10);
                            r6 = r6 + 0x1;
                            r7 = r7 + stack[2034];
                    }
            }
            else {
                    loc_ffffffff8f64ac90(r1 + r6 * r2 * r8, r4, r2 * r5 * r6);
            }
    }
    goto loc_8f64e680;

loc_8f64e4a4:
    r0 = 0x0;
    goto loc_8f64e4a8;

loc_8f64e670:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "%s: unsupported feature!\n", "draw_image_in_landscape");
    goto loc_8f64e680;

loc_8f64e6c0:
    r0 = r10;
    goto loc_8f64e6c4;

