    r8 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r4 = arg0;
    r7 = arg1;
    r10 = arg2;
    r3 = *arg0;
    stack[2037] = r3;
    r0 = loc_ffffffff8f64cbcc(arg0, arg1, arg2, r3, stack[2034]);
    COND = r6 != 0x0;
    if (COND) {
            r0 = r6;
    }
    if (CPU_FLAGS & NE) goto loc_8f64d294;

loc_8f64d188:
    r0 = loc_ffffffff8f64bf9c(r4, r7, r10, r8);
    COND = r5 >= 0x0;
    if (COND) goto loc_8f64d288;

loc_8f64d1a4:
    if (r5 != -0x1) goto loc_8f64d290;

loc_8f64d1ac:
    r0 = loc_ffffffff8f64ba24(r4, r7, sp + 0x8);
    goto loc_8f64d1bc;

loc_8f64d1bc:
    if (r0 == 0x1) {
            r6 = r6 + 0x1;
    }
    if ((!CPU_FLAGS & E) && (r0 == 0x2)) {
            r6 = r6 - 0x1;
    }
    goto loc_8f64d1d4;

loc_8f64d1d4:
    if (r6 == 0x0) goto loc_8f64d208;

loc_8f64d1dc:
    r5 = stack[2036];
    r0 = loc_ffffffff8f64ba24(r4, r5, sp + 0x8);
    r3 = r0 - 0x3;
    if (r0 != 0x1) {
            CMP(r3, 0x1);
    }
    if (CPU_FLAGS & B) goto loc_8f64d1bc;

loc_8f64d200:
    if (r0 == 0x2) goto loc_8f64d1d0;

loc_8f64d208:
    r11 = r8 + 0x4 & !0x3;
    r6 = r5 + loc_ffffffff8f64c774(*(r4 + 0x8));
    r7 = r4 + r6;
    r0 = loc_ffffffff8f64c924(r4, r7, 0x0, r11 + 0x8);
    COND = r1 != 0x0;
    if (COND) {
            r0 = r1;
    }
    if (CPU_FLAGS & NE) goto loc_8f64d294;

loc_8f64d240:
    *(r4 + r6) = loc_ffffffff8f64c774(0x1);
    loc_ffffffff8f64adc8(r7 + 0x4, r1, r11);
    loc_ffffffff8f64ac90(r7 + 0x4, r10, r8);
    *(r7 + r11 + 0x4) = loc_ffffffff8f64c774(0x2);
    goto loc_8f64d290;

loc_8f64d290:
    r0 = r5;
    goto loc_8f64d294;

loc_8f64d294:
    if (stack[2037] != *r0) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f64d1d0:
    r6 = r6 - 0x1;
    goto loc_8f64d1d4;

loc_8f64d288:
    r0 = 0x1 ^ 0xffffffff;
    goto loc_8f64d294;

