    r2 = arg2;
    r1 = arg1;
    r0 = arg0;
    s0 = arg3;
    r5 = 0x8f7112f4;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x34;
    r4 = r0;
    r8 = r2;
    asm{ ldrd       r6, r7, [r4, #0x10] };
    r3 = *r5;
    stack[2033] = r1;
    asm{ ldrd       r0, r1, [sp, #0x58 + ret_addr] };
    stack[2037] = r3;
    asm{ ldrd       r2, r3, [r4, #0x8] };
    asm{ strd       r0, r1, [sp, #0x58 + var_38] };
    r10 = r6 + r2;
    r12 = stack[2050];
    if (r7 + r3 + CARRY(FLAGS) == r1) {
            CMP(r10, r0);
    }
    r11 = 0x8f7112f4;
    if ((CPU_FLAGS & B) || ((r12 != 0x0) && (*r4 == 0x2))) goto loc_8f621c40;

loc_8f621c18:
    asm{ ldrd       r0, r1, [sp, #0x58 + var_38] };
    asm{ strd       r6, r7, [sp, #0x58 + var_58] };
    asm{ strd       r0, r1, [sp, #0x58 + var_50] };
    loc_ffffffff8f656968(0x0, "Sparse data exceeds partition: size=0x%llx, offset=0x%llx, partition_size=0x%llx\n");
    loc_ffffffff8f62192c(0x8f683451, "Invalid sparse image data");
    goto loc_8f621d74;

loc_8f621d74:
    r0 = 0x0 ^ 0xffffffff;
    goto loc_8f621d80;

loc_8f621d80:
    if (stack[2037] != *r11) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f621c40:
    r0 = *r4;
    if (r0 == 0x1) goto loc_8f621cb0;

loc_8f621c4c:
    if (CPU_FLAGS & B) goto loc_8f621c68;

loc_8f621c50:
    if (r0 == 0x2) {
            asm{ strd       r6, r7, [sp, #0x58 + var_58] };
            loc_ffffffff8f656968();
    }
    goto loc_8f621d7c;

loc_8f621d7c:
    r0 = 0x0;
    goto loc_8f621d80;

loc_8f621c68:
    asm{ strd       r6, r7, [sp, #0x58 + var_58] };
    r1 = "Flash sparse raw data: offset=0x%llx, size=0x%llx, data=0x%x\n";
    r0 = loc_ffffffff8f656968(0x2, r1);
    asm{ ldrd       r0, r1, [r4, #0x8] };
    r12 = *(r4 + 0x1c);
    r0 = r0 + r8;
    asm{ ldrd       r2, r3, [r4, #0x10] };
    if (loc_ffffffff8f650ad0(r0, r1 + s0 + CARRY(FLAGS)) == 0x0) goto loc_8f621d7c;

loc_8f621d70:
    loc_ffffffff8f656968();
    goto loc_8f621d74;

loc_8f621cb0:
    asm{ strd       r6, r7, [sp, #0x58 + var_58] };
    loc_ffffffff8f656968(0x2, "Flash sparse fill data: offset=0x%llx, size=0x%llx, fill_value=0x%X\n");
    r10 = *(r4 + 0x1c);
    r3 = *0x8f7125ec;
    r3 = *(r3 + 0x30);
    if (r10 != r3) goto loc_8f621cf0;

loc_8f621ce0:
    loc_ffffffff8f656968(0x2, "filled value equals erase content, skipped\n");
    goto loc_8f621d7c;

loc_8f621cf0:
    asm{ ldrd       r2, r3, [r4, #0x8] };
    asm{ ldrd       r6, r7, [r4, #0x10] };
    r8 = r8 + r2;
    s0 = s0 + r3 + CARRY(FLAGS);
    r4 = stack[2033];
    loc_ffffffff8f67b5cc(r6, r7, stack[2033], 0x0);
    COND = r0 == 0x0;
    if (COND) goto loc_8f621d34;

loc_8f621d24:
    loc_ffffffff8f656968(0x0, "Invaid fill value size\n");
    goto loc_8f621d70;

loc_8f621d34:
    if (loc_ffffffff8f621418(r8, s0, stack[2033], loc_ffffffff8f67b5cc(r6, r7, r4, 0x0), r10) == 0x0) goto loc_8f621d7c;

