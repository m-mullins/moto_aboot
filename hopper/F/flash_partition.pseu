    r1 = arg1;
    r5 = arg3;
    r4 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x1c;
    COND = r11 != 0x0;
    r10 = arg0;
    stack[2037] = *0x8f7112f4;
    if (COND) goto loc_8f6225f4;

loc_8f6225e4:
    loc_ffffffff8f656968(r11, "invalid image!\n");
    goto loc_8f6226e8;

loc_8f6226e8:
    r8 = 0x0 ^ 0xffffffff;
    goto loc_8f6226ec;

loc_8f6226ec:
    r0 = r8;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f6225f4:
    r0 = loc_ffffffff8f6539b0();
    r6 = r0;
    if (r0 != -0x1) goto loc_8f622618;

loc_8f622604:
    loc_ffffffff8f656968(0x0, "Unable to find partition \"%s\"\n", r10);
    goto loc_8f6226e8;

loc_8f622618:
    r8 = loc_ffffffff8f653a28();
    r0 = loc_ffffffff8f653b20(r6);
    if (r5 == r1) {
            CMP(r4, r8);
    }
    r6 = r0;
    r7 = r1;
    if (CPU_FLAGS & B) goto loc_8f622668;

loc_8f622640:
    asm{ strd       r8, sb, [sp, #0x40 + var_40] };
    r0 = 0x0;
    asm{ strd       r4, r5, [sp, #0x40 + var_38] };
    loc_ffffffff8f656968(r0, "image %s size exceeds limit: size=0x%llx, actual=0x%llx\n", r10);
    loc_ffffffff8f62192c(0x8f683451, "image size exceeds limit");
    goto loc_8f6226e8;

loc_8f622668:
    loc_ffffffff8f656968(0x1, "erasing %s\n", r10);
    r0 = loc_ffffffff8f622518(r10);
    r8 = r0;
    if (r0 != -0x1) goto loc_8f6226a0;

loc_8f62268c:
    loc_ffffffff8f656968(0x0, "Failed to erase partition %s\n", r10);
    goto loc_8f6226ec;

loc_8f6226a0:
    r0 = 0x2;
    r1 = "flashing %s: offset=0x%llx, data_size=0x%llx\n";
    r2 = r10;
    asm{ strd       r6, r7, [sp, #0x40 + var_40] };
    asm{ strd       r4, r5, [sp, #0x40 + var_38] };
    loc_ffffffff8f656968(r0, r1, r2);
    r0 = loc_ffffffff8f650ad0(r6, r7, r4, r5, r11);
    COND = r8 == 0x0;
    if (COND) goto loc_8f6226ec;

loc_8f6226d8:
    loc_ffffffff8f62192c(0x8f683451, "Failed to flash partition %s\n", r10);
    goto loc_8f6226e8;

