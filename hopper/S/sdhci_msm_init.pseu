    stack[2044] = r4;
    stack[2045] = r5;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r4 = arg1;
    r5 = arg0;
    stack[2043] = *0x8f7112f4;
    r3 = *arg1;
    *(r3 + 0x78) = *(r3 + 0x78) & !0x1;
    r3 = *arg1;
    r2 = *r3;
    *r3 = r2 | 0x80;
    loc_ffffffff8f60c558(0x1, arg1, r2 | 0x80, r3, arg0, stack[2043], stack[2044], stack[2045], 0x8f7112f4, lr);
    r3 = *r4;
    *(r3 + 0x78) = *(r3 + 0x78) | 0x1;
    r3 = *r4;
    r2 = *(r3 + 0x78);
    r2 = r2 | 0x2000;
    *(r3 + 0x78) = r2;
    loc_ffffffff8f607740(r5, 0x1, r2, r3);
    r3 = *(r4 + 0xc);
    if (r3 != 0x0) {
            r3 = *r5;
    }
    if (CPU_FLAGS & NE) {
            r2 = *(r3 + 0x10c);
    }
    if (CPU_FLAGS & NE) {
            r2 = r2 | 0x18000;
    }
    if (CPU_FLAGS & NE) {
            *(r3 + 0x10c) = r2;
    }
    r3 = *r4;
    r2 = *(r3 + 0xdc);
    *(r3 + 0xe4) = r2;
    r1 = *r4;
    r3 = *(r1 + 0xe8);
    if ((r2 & 0x3) != 0x0) {
            r3 = r3 | 0x1;
    }
    if ((r2 & 0xc) != 0x0) {
            r3 = r3 | 0x4;
    }
    *(r1 + 0xe8) = r3;
    r0 = *(r4 + 0x4);
    loc_ffffffff8f60cae0(r0, 0x8f608218, r4);
    r0 = *(r4 + 0x4);
    r0 = loc_ffffffff8f60caac(r0);
    *(*r4 + 0xe0) = 0xf;
    *(r4 + 0x8) = 0x0;
    *(r4 + 0x9) = 0x0;
    *(r5 + 0xc) = 0x0;
    if (stack[2043] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

