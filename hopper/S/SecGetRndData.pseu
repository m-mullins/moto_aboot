    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r7 = arg0;
    r4 = arg1;
    stack[2041] = *0x8f7112f4;
    if (arg1 >= 0x40) {
            r0 = 0x10;
    }
    else {
            loc_ffffffff8f6029c8(0x1);
            loc_ffffffff8f64adc8(0x8f6b79a0, 0x0, 0x80);
            r2 = r4;
            r0 = loc_ffffffff8f606d48(0x10, 0x8f6b79a0, r2);
            COND = r8 != 0x0;
            if (!COND) {
                    loc_ffffffff8f606ce8(0x8f6b79a0, r4);
                    r3 = r8;
                    do {
                            if (r3 != r4) {
                                    r2 = *(0x8f6b79a0 + r3);
                            }
                            if (CPU_FLAGS & NE) {
                                    *(r7 + r3) = r2;
                            }
                            if (CPU_FLAGS & NE) {
                                    r3 = r3 + 0x1;
                            }
                    } while (CPU_FLAGS & NE);
                    r0 = 0x0;
            }
            else {
                    r0 = 0x10;
            }
    }
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

