    r2 = arg2;
    r5 = arg3;
    r10 = 0x8f7112f4;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0xa4;
    r4 = r2;
    r7 = sp + 0x5b;
    asm{ strd       r0, r1, [sp, #0xc8 + var_C0] };
    r3 = *r10;
    r7 = r7 & !0x3f;
    stack[2037] = r3;
    r0 = loc_ffffffff8f64ab04(0x40, 0x8000, r2, r3, stack[1998]);
    COND = r6 != 0x0;
    if (COND) goto loc_8f625cbc;

loc_8f625ca8:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Error: out of memory!\n");
    r8 = 0x0 ^ 0xffffffff;
    goto loc_8f625dec;

loc_8f625dec:
    r0 = r8;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f625cbc:
    r0 = loc_ffffffff8f64ab04(0x40, 0x8000);
    COND = s0 != 0x0;
    if (COND) goto loc_8f625ce0;

loc_8f625cd0:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Error: out of memory!\n");
    goto loc_8f625dd0;

loc_8f625dd0:
    r8 = 0x0 ^ 0xffffffff;
    goto loc_8f625dd4;

loc_8f625dd4:
    loc_ffffffff8f64ab9c(r6);
    if (s0 != 0x0) {
            loc_ffffffff8f64ab9c(s0);
    }
    goto loc_8f625dec;

loc_8f625ce0:
    r2 = "DATA%016llx";
    r1 = 0x40;
    asm{ strd       r4, r5, [sp, #0xc8 + var_C8] };
    loc_ffffffff8f64a9f0(r7, r1, r2);
    if (loc_ffffffff8f62d948(r7, loc_ffffffff8f64b57c(r7, 0x40)) < 0x0) goto loc_8f625dd0;

loc_8f625d14:
    r7 = r6;
    r8 = 0x0;
    goto loc_8f625d1c;

loc_8f625d1c:
    COND = r3 == 0x0;
    if (COND) goto loc_8f625dbc;

loc_8f625d24:
    if (r5 == 0x0) {
            CMP(r4, 0x8000);
    }
    r10 = r4;
    asm{ ldrd       r0, r1, [sp, #0xc8 + var_C0] };
    r2 = r7;
    if (CPU_FLAGS & A) {
            r10 = 0x8000;
    }
    r11 = r5;
    r3 = r10 + 0x1ff & !0x1fc;
    if (CPU_FLAGS & A) {
            r11 = 0x0;
    }
    r3 = r3 & !0x3;
    stack[2003] = r10;
    if (loc_ffffffff8f60b8ec() != 0x0) goto loc_8f625dd0;

loc_8f625d64:
    if (r8 != 0x0) goto loc_8f625dac;

loc_8f625d6c:
    if (loc_ffffffff8f62da90(r7, stack[2003]) < 0x0) goto loc_8f625dd0;

loc_8f625d80:
    asm{ ldrd       r2, r3, [sp, #0xc8 + var_C0] };
    r4 = r4 - r10;
    r5 = r5 - r11 + !CARRY(FLAGS);
    r8 = 0x1;
    r2 = r2 + r10;
    COND = r7 != r6;
    asm{ strd       r2, r3, [sp, #0xc8 + var_C0] };
    if (COND) {
            r7 = r6;
    }
    if (CPU_FLAGS & E) {
            r7 = s0;
    }
    goto loc_8f625d1c;

loc_8f625dac:
    if (loc_ffffffff8f62db60() >= 0x0) goto loc_8f625d6c;
    goto loc_8f625dd0;

loc_8f625dbc:
    if (r8 != 0x0) {
            r8 = SAR(r8, loc_ffffffff8f62db60() / 0x80000000);
    }
    goto loc_8f625dd4;

