    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r6 = lr;
    r3 = 0x8f7112f4;
    r4 = r3;
    stack[2043] = *r3;
    r2 = *0x200f000;
    *0x8f6b8afc = r2;
    if (r2 < 0x2000ffff) {
            r3 = 0x8f6b8b04;
    }
    if (CPU_FLAGS & B) {
            *r3 = r0;
    }
    if (CPU_FLAGS & B) {
            r3 = 0x8f6b8b00;
    }
    if (CPU_FLAGS & B) {
            *r3 = r1;
    }
    if (!CPU_FLAGS & B) {
            r0 = loc_ffffffff8f64aacc(0x1000);
            *0x8f6b8b08 = r0;
            if (r0 == 0x0) {
                    loc_ffffffff8f6484ac(r6, "ASSERT FAILED at (%s:%d): %s\n", "platform/msm_shared/spmi.c", 0x40, "chnl_tbl");
            }
            r1 = *0x8f6b8b08;
            r3 = 0x0;
            do {
                    r0 = *(r3 + 0x803e00 << (r3 + 0x803e00) * 0x4);
                    r2 = *(r3 + 0x803e00 << (r3 + 0x803e00) * 0x4);
                    asm{ ubfx       r0, r0, #0x10, #0x4 };
                    asm{ ubfx       r2, r2, #0x8, #0x8 };
                    *(r1 + (r2 | r0 * 0x100)) = r3;
                    r3 = r3 + 0x1;
            } while (r3 != 0x80);
    }
    *(0x8f6b8b0c + 0x4) = 0x8f6b8b0c;
    *0x8f6b8b0c = 0x8f6b8b0c;
    if (stack[2043] != *r4) {
            loc_ffffffff8f648514();
    }
    return;

