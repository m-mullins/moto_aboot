    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x34;
    r4 = 0x8f6e0790;
    r0 = 0x2;
    r1 = "%s(): entering, entry_count=%d\n";
    r8 = lr;
    stack[2037] = *0x8f7112f4;
    asm{ strd       r2, r3, [sp, #0x58 + var_50] };
    asm{ strd       r2, r3, [sp, #0x58 + var_48] };
    r3 = *r4;
    *r4 = r3 + 0x1;
    r0 = loc_ffffffff8f656968(r0, r1, "sod_init", r3 + 0x1, stack[2026]);
    r3 = *r4;
    if (r3 > 0x1) goto loc_8f635c70;

loc_8f635a4c:
    if (!CPU_FLAGS & E) {
            r3 = 0x18c;
            loc_ffffffff8f6484ac(r8, "ASSERT FAILED at (%s:%d): %s\n", "app/mbm/sod.c", r3, "entry_count == 1");
    }
    if (CPU_FLAGS & E) goto loc_8f635aa0;

loc_8f635a80:
    r2 = sp + 0x10;
    r0 = loc_ffffffff8f634d98(0x0, sp + 0x8, r2);
    if (r0 != 0x0) goto loc_8f635aac;

loc_8f635aa0:
    loc_ffffffff8f656968();
    goto loc_8f635e20;

loc_8f635e20:
    if (*loc_ffffffff8f656968(0x2, "%s(): Exiting, entry_count=%d\n", "sod_init", *0x8f6e0790) != 0x0) {
            loc_ffffffff8f64ab9c();
            *0x8f6e0794 = 0x0;
    }
    r0 = 0x0;
    *0x8f6e0790 = *0x8f6e0790 - 0x1;
    goto loc_8f635e60;

loc_8f635e60:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f635aac:
    asm{ ldrd       r2, r3, [sp, #0x58 + var_50] };
    COND = r1 == 0x0;
    if (!COND) {
            asm{ ldrd       r2, r3, [sp, #0x58 + var_48] };
            COND = r1 != 0x0;
            if (!COND) {
                    r1 = "ASSERT FAILED at (%s:%d): %s\n";
                    r2 = "app/mbm/sod.c";
                    r3 = 0x198;
                    r0 = loc_ffffffff8f6484ac(r8, r1, r2, r3, "offset && size");
            }
    }
    else {
            r1 = "ASSERT FAILED at (%s:%d): %s\n";
            r2 = "app/mbm/sod.c";
            r3 = 0x198;
            r0 = loc_ffffffff8f6484ac(r8, r1, r2, r3, "offset && size");
    }
    r0 = *r0;
    if (r0 == 0x0) goto loc_8f635b28;

loc_8f635af0:
    asm{ ldrd       r2, r3, [sp, #0x58 + var_50] };
    asm{ ldrd       r6, r7, [sp, #0x58 + var_48] };
    asm{ ldrd       sl, fp, [r0, #0x8] };
    r2 = r2 + r6;
    if (r3 + r7 + CARRY(FLAGS) == r11) {
            CMP(r2, r10);
    }
    if (CPU_FLAGS & E) goto loc_8f635c70;

loc_8f635b10:
    if (loc_ffffffff8f6357c8() != 0x0) goto loc_8f635e20;

loc_8f635c68:
    r0 = loc_ffffffff8f656968();
    goto loc_8f635c70;

loc_8f635c70:
    if (*0x8f6e0790 <= 0x1) goto loc_8f635ca4;

loc_8f635c7c:
    r0 = loc_ffffffff8f656968(0x2, "%s(): Exiting, entry_count=%d\n", "sod_init", *0x8f6e0790);
    r3 = *0x8f6e0790;
    r0 = *r0;
    *0x8f6e0790 = r3 - 0x1;
    goto loc_8f635e60;

loc_8f635ca4:
    r5 = *r0;
    r3 = 0x0;
    asm{ strd       r2, r3, [sp, #0x58 + var_40] };
    COND = r5 == 0x0;
    asm{ strd       r2, r3, [sp, #0x58 + var_38] };
    if (COND) goto loc_8f635c7c;

loc_8f635cc0:
    r2 = sp + 0x20;
    r0 = loc_ffffffff8f634d98(0x0, sp + 0x18, r2);
    if (r0 == 0x0) {
            r2 = "app/mbm/sod.c";
            r3 = 0x160;
            r0 = loc_ffffffff8f6484ac(r8, "ASSERT FAILED at (%s:%d): %s\n", r2, r3, 0x8f69c66f);
    }
    asm{ ldrd       r2, r3, [sp, #0x58 + var_40] };
    COND = r1 == 0x0;
    if (!COND) {
            asm{ ldrd       r2, r3, [sp, #0x58 + var_38] };
            COND = r1 != 0x0;
            if (!COND) {
                    r1 = "ASSERT FAILED at (%s:%d): %s\n";
                    r2 = "app/mbm/sod.c";
                    r0 = loc_ffffffff8f6484ac(r8, r1, r2, 0x162, "ud_offset && ud_size");
            }
    }
    else {
            r1 = "ASSERT FAILED at (%s:%d): %s\n";
            r2 = "app/mbm/sod.c";
            r0 = loc_ffffffff8f6484ac(r8, r1, r2, 0x162, "ud_offset && ud_size");
    }
    r3 = 0x8f7125ec;
    asm{ ldrd       r0, r1, [sp, #0x58 + var_38] };
    r3 = *r3;
    asm{ ldrd       sl, fp, [r3, #0x20] };
    asm{ ldrd       r2, r3, [sp, #0x58 + var_40] };
    r2 = r2 + r0;
    if (r11 == r3 + r1 + CARRY(FLAGS)) {
            CMP(r10, r2);
    }
    if (!CPU_FLAGS & A) {
            r1 = "ASSERT FAILED at (%s:%d): %s\n";
            loc_ffffffff8f6484ac(r8, r1, "app/mbm/sod.c", 0x165, "offset > ud_offset+ud_size");
    }
    r10 = r10 - 0x4200;
    r2 = 0xfffe0000;
    r10 = r10 & r2;
    r11 = r11 - 0x0 + !CARRY(FLAGS) & (0x0 ^ 0xffffffff);
    r0 = loc_ffffffff8f635424();
    r3 = *(r5 + 0x4);
    r7 = 0x0;
    if (r0 != 0x0) {
            r6 = 0x80000;
    }
    if (CPU_FLAGS & E) {
            r6 = 0x2000000;
    }
    r6 = r10 - r6;
    r7 = r11 - r7 + !CARRY(FLAGS);
    if ((r3 & 0x1) != 0x0) {
            r2 = 0xfffe0000;
            asm{ ldrd       r2, r3, [r5, #0x18] };
            r6 = r6 - r2;
            r7 = r7 - r3 + !CARRY(FLAGS);
    }
    asm{ ldrd       r2, r3, [r5, #0x8] };
    if (r3 == r7) {
            r2 = 0xfffe0000;
            CMP(r2, r6);
    }
    if (CPU_FLAGS & NE) goto loc_8f635df8;

loc_8f635dc8:
    asm{ ldrd       r2, r3, [sp, #0x58 + var_40] };
    asm{ ldrd       r0, r1, [sp, #0x58 + var_38] };
    r2 = r2 + r0;
    if (r7 == r3 + r1 + CARRY(FLAGS)) {
            CMP(r6, r2);
    }
    if (CPU_FLAGS & NE) goto loc_8f635df8;

loc_8f635de4:
    loc_ffffffff8f656968(0x2, "%s(): Looks good to me, approved!\n", "sh_review");
    goto loc_8f635c7c;

loc_8f635df8:
    r1 = "Unexpected SOD location!\n";
    loc_ffffffff8f656968(0x0, r1);
    r0 = loc_ffffffff8f634e38(r5);
    asm{ ldrd       r0, r1, [sp, #0x58 + var_40] };
    r0 = r10 - r0;
    loc_ffffffff8f634f04(r0, r11 - r1 + !CARRY(FLAGS), 0x1);
    goto loc_8f635e20;

loc_8f635b28:
    r0 = loc_ffffffff8f64aacc(0xe00);
    *0x8f6e0794 = r0;
    if (r0 == 0x0) {
            r1 = "%s(): ERROR: out of memory!\n";
    }
    if (CPU_FLAGS & E) {
            r0 = 0x0 ^ 0xffffffff;
    }
    if (CPU_FLAGS & E) goto loc_8f635aa0;

loc_8f635b44:
    asm{ ldrd       r2, r3, [sp, #0x58 + var_50] };
    stack[2026] = r0;
    asm{ ldrd       r0, r1, [sp, #0x58 + var_48] };
    r0 = r0 + r2;
    r0 = loc_ffffffff8f6507a4(r0, r1 + r3 + CARRY(FLAGS), 0x200, 0x0, stack[2026]);
    COND = r6 != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f635aa0;

loc_8f635b74:
    if (**0x8f6e0794 != 0x2d83fbe7) goto loc_8f635bc8;

loc_8f635b88:
    r1 = "%s(): Found SOD following USERDATA\n";
    r2 = "sod_init";
    r0 = loc_ffffffff8f656968(0x1, r1, r2);
    r3 = *0x8f6e0794;
    asm{ ldrd       r0, r1, [sp, #0x58 + var_48] };
    stack[2026] = r3;
    asm{ ldrd       r2, r3, [sp, #0x58 + var_50] };
    r0 = r0 + r2;
    r0 = loc_ffffffff8f6507a4(r0, r1 + r3 + CARRY(FLAGS), 0xe00, 0x0, stack[2026]);
    if (r0 == 0x0) goto loc_8f635c70;
    goto loc_8f635e20;

loc_8f635bc8:
    r0 = loc_ffffffff8f6798a8();
    r3 = r0;
    if (r0 != 0x8) goto loc_8f635e20;

loc_8f635bdc:
    r2 = sp + 0x8;
    r0 = loc_ffffffff8f6797bc(r6, "sod.offset", r2);
    if (r0 == 0x0) goto loc_8f635e20;

loc_8f635bf4:
    asm{ ldrd       r2, r3, [sp, #0x58 + var_50] };
    COND = r1 != 0x0;
    if (!COND) {
            r0 = loc_ffffffff8f6484ac(r8, "ASSERT FAILED at (%s:%d): %s\n", "app/mbm/sod.c", 0x1d7, 0x8f6887e5);
    }
    r3 = *r0;
    asm{ ldrd       r0, r1, [sp, #0x58 + var_50] };
    if (((loc_ffffffff8f6507a4() != 0x0) || (**0x8f6e0794 != 0x2d83fbe7)) || (loc_ffffffff8f6357c8() != 0x0)) goto loc_8f635e20;

