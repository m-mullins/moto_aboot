    r3 = arg3;
    r2 = arg2;
    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r6 = r0;
    r5 = r1;
    r4 = r2;
    r7 = r0;
    r8 = r1;
    if (r3 != 0x0) goto loc_8f67bdb4;

loc_8f67bb38:
    if (r2 < r1) goto loc_8f67bc0c;

loc_8f67bb40:
    asm{ clz        r3, r2 };
    if (r3 != 0x0) {
            r8 = 0x20 - r3;
    }
    if (CPU_FLAGS & NE) {
            r8 = r0 >> r8;
    }
    if (CPU_FLAGS & NE) {
            r4 = r2 << r3;
    }
    if (CPU_FLAGS & NE) {
            r8 = r8 |     r1;
    r3;
;
    }
    r5 = r5 >> r4 / 0x10000;
    if (CPU_FLAGS & NE) {
            r7 = r0 << r3;
    }
    r0 = loc_ffffffff8f67b3c0(r8, r5);
    s0 = s0 << r4 * 0x10000 >> (s0 << r4 * 0x10000) / 0x10000;
    r6 = r0;
    r10 = s0 * r0;
    loc_ffffffff8f67b468(r8, r5);
    r1 = r3 >> r7 / 0x10000 | r5 * 0x10000;
    if (r1 >= r10) {
            r8 = r6;
    }
    if (!CPU_FLAGS & NB) {
            r1 = r1 + r4;
            COND = r1 >= 0x0;
            r8 = r6 - 0x1;
            if (!COND) {
                    if (r1 < r10) {
                            r8 = r6 - 0x2;
                    }
                    if (CPU_FLAGS & S) {
                            r1 = r1 + r4;
                    }
            }
    }
    r0 = loc_ffffffff8f67b3c0(r1 - r10, r5);
    r6 = r0;
    s0 = r0 * s0;
    r0 = loc_ffffffff8f67b468(r1 - r10, r5);
    r1 = r7 << r7 * 0x10000 >> (r7 << r7 * 0x10000) / 0x10000 | r5 * 0x10000;
    if (r1 >= s0) {
            r0 = r6;
    }
    if (!CPU_FLAGS & NB) {
            r4 = r1 + r4;
            COND = r4 >= 0x0;
            r0 = r6 - 0x1;
            if ((!COND) && (r4 < s0)) {
                    r0 = r6 - 0x2;
            }
    }
    r0 = r0 | r8 * 0x10000;
    goto loc_8f67bf00;

loc_8f67bf00:
    r5 = 0x0;
    return r0;

.l77:
    return r0;

loc_8f67bc0c:
    if (r2 == 0x0) {
            r4 = loc_ffffffff8f67b3c0(0x1, r2);
    }
    asm{ clz        r3, r4 };
    if (r3 == 0x0) {
            r10 = r5 - r4;
    }
    if (CPU_FLAGS & E) {
            r5 = 0x1;
    }
    if (!CPU_FLAGS & E) {
            r4 = r4 << r3;
            r11 = r5 >> 0x20 - r3;
            r7 = r6 << r3;
            s0 = r6 >> 0x20 - r3;
            r6 = r6 >> r4 / 0x10000;
            s0 = s0 |     r3;
    r5;
;
            r0 = loc_ffffffff8f67b3c0(r11, r6);
            r10 = r10 << r4 * 0x10000 >> (r10 << r4 * 0x10000) / 0x10000;
            r8 = r0;
            r5 = r10 * r0;
            loc_ffffffff8f67b468(r11, r6);
            r3 = r3 >> s0 / 0x10000;
            r1 = r3 | r6 * 0x10000;
            if (r1 >= r5) {
                    r11 = r8;
            }
            if (!CPU_FLAGS & NB) {
                    r1 = r1 + r4;
                    COND = r1 >= 0x0;
                    r11 = r8 - 0x1;
                    if (!COND) {
                            if (r1 < r5) {
                                    r11 = r8 - 0x2;
                            }
                            if (CPU_FLAGS & S) {
                                    r1 = r1 + r4;
                            }
                    }
            }
            r5 = r1 - r5;
            r0 = loc_ffffffff8f67b3c0(r5, r6);
            s0 = s0 << s0 * 0x10000 >> (s0 << s0 * 0x10000) / 0x10000;
            r8 = r0;
            r10 = r0 * r10;
            loc_ffffffff8f67b468(r5, r6);
            r1 = s0 | r6 * 0x10000;
            if (r1 >= r10) {
                    r5 = r8;
            }
            if (!CPU_FLAGS & NB) {
                    r1 = r1 + r4;
                    COND = r1 >= 0x0;
                    r5 = r8 - 0x1;
                    if (!COND) {
                            if (r1 < r10) {
                                    r5 = r8 - 0x2;
                            }
                            if (CPU_FLAGS & S) {
                                    r1 = r1 + r4;
                            }
                    }
            }
            r10 = r1 - r10;
            r5 = r5 | r11 * 0x10000;
    }
    r6 = r6 >> r4 / 0x10000;
    r0 = loc_ffffffff8f67b3c0(r10, r6);
    s0 = s0 << r4 * 0x10000 >> (s0 << r4 * 0x10000) / 0x10000;
    r8 = r0;
    r11 = s0 * r0;
    loc_ffffffff8f67b468(r10, r6);
    r1 = r3 >> r7 / 0x10000 | r6 * 0x10000;
    if (r1 >= r11) {
            r10 = r8;
    }
    if (!CPU_FLAGS & NB) {
            r1 = r1 + r4;
            COND = r1 >= 0x0;
            r10 = r8 - 0x1;
            if (!COND) {
                    if (r1 < r11) {
                            r10 = r8 - 0x2;
                    }
                    if (CPU_FLAGS & S) {
                            r1 = r1 + r4;
                    }
            }
    }
    r0 = loc_ffffffff8f67b3c0(r1 - r11, r6);
    r8 = r0;
    s0 = r0 * s0;
    r0 = loc_ffffffff8f67b468(r1 - r11, r6);
    r1 = r7 << r7 * 0x10000 >> (r7 << r7 * 0x10000) / 0x10000 | r6 * 0x10000;
    if (r1 >= s0) {
            r0 = r8;
    }
    if (!CPU_FLAGS & NB) {
            r4 = r1 + r4;
            COND = r4 >= 0x0;
            r0 = r8 - 0x1;
            if ((!COND) && (r4 < s0)) {
                    r0 = r8 - 0x2;
            }
    }
    r0 = r0 | r10 * 0x10000;
    return r0;

loc_8f67bdb4:
    if (r3 > r1) goto loc_8f67bf08;

loc_8f67bdbc:
    asm{ clz        r8, r3 };
    if (r8 != 0x0) goto loc_8f67bde8;

loc_8f67bdc8:
    if (r1 < r3) {
            CMP(r0, r2);
    }
    if (CPU_FLAGS & S) {
            r5 = 0x0;
    }
    if (CPU_FLAGS & NS) {
            r5 = 0x1;
    }
    if (CPU_FLAGS & NS) {
            r0 = 0x1;
    }
    if (CPU_FLAGS & NS) {
            r5 = r8;
    }
    if (!CPU_FLAGS & NB) {
            r0 = r5;
    }
    return r0;

loc_8f67bde8:
    r4 = r2 >> 0x20 - r8 |     r3;
    r8;
;
    r3 = r5 >> 0x20 - r8;
    s0 = s0 >> r4 / 0x10000;
    r5 = r0 >> 0x20 - r8 |     r5;
    r8;
;
    stack[2037] = r3;
    r0 = loc_ffffffff8f67b3c0(r3, s0);
    r10 = r10 << r4 * 0x10000 >> (r10 << r4 * 0x10000) / 0x10000;
    r11 = r0;
    stack[2038] = r10 * r0;
    loc_ffffffff8f67b468(stack[2037], s0, r10 * r0, stack[2037], stack[2037]);
    r2 = stack[2038];
    r1 = r12 >> r5 / 0x10000 | s0 * 0x10000;
    if (!CPU_FLAGS & NB) {
            r1 = r1 + r4;
            COND = r1 >= 0x0;
            if ((!COND) && (CPU_FLAGS & S)) {
                    r1 = r1 + r4;
            }
    }
    r0 = r1 - r2;
    r1 = s0;
    asm{ stm        sp, {r3, ip} };
    r0 = loc_ffffffff8f67b3c0(r0, r1);
    r5 = r5 << r5 * 0x10000 >> (r5 << r5 * 0x10000) / 0x10000;
    r11 = r0;
    r10 = r0 * r10;
    r0 = loc_ffffffff8f67b468(stack[2038], s0);
    r3 = stack[2037];
    r1 = r5 | s0 * 0x10000;
    if (r1 >= r10) {
            r0 = r11;
    }
    if (!CPU_FLAGS & NB) {
            r1 = r1 + r4;
            COND = r1 >= 0x0;
            r0 = r11 - 0x1;
            if (!COND) {
                    if (r1 < r10) {
                            r0 = r11 - 0x2;
                    }
                    if (CPU_FLAGS & S) {
                            r1 = r1 + r4;
                    }
            }
    }
    r0 = r0 | r3 * 0x10000;
    asm{ umull      r4, r5, r0, r7 };
    if (r5 > r1 - r10) goto loc_8f67befc;

loc_8f67bee0:
    if (CPU_FLAGS & NE) {
            r5 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r5 = 0x1;
    }
    if (r4 <     r6;
    r8;
) {
            r5 = 0x0;
    }
    if (CPU_FLAGS & A) {
            r5 = r5 & 0x1;
    }
    if (r5 == 0x0) goto .l77;

loc_8f67befc:
    r0 = r0 - 0x1;
    goto loc_8f67bf00;

loc_8f67bf08:
    r5 = 0x0;
    r0 = r5;
    return r0;

