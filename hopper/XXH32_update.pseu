    r2 = arg2;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r8 = r0;
    r3 = *0x8f7112f4;
    s0 = arg1;
    r11 = r2;
    r10 = arg1 + r2;
    r5 = SAR(r5, r2 / 0x80000000);
    asm{ ldrd       r6, r7, [r0] };
    stack[2038] = r3;
    if (*0x8f6a3f48 != 0x1) goto loc_8f658e94;

loc_8f658cac:
    r3 = *(r0 + 0x1c);
    r4 = r2 + r6;
    asm{ strd       r4, r5, [r0] };
    if (r3 + r2 <= 0xf) goto loc_8f658eb0;

loc_8f658cc8:
    if (r3 != 0x0) {
            loc_ffffffff8f64ac90(r8 + r3 + 0x20);
            r1 = *(r8 + 0x21);
            r2 = 0x85ebca77;
            r1 = *(r8 + 0x20) | r1 * 0x100;
            r3 = *(r8 + 0x22);
            r0 = *(r8 + 0x25);
            r1 = r1 | r3 * 0x10000 | *(r8 + 0x23) * 0x1000000;
            r1 = *(r8 + 0xc) + r2 * r1;
            r3 = 0x9e3779b1;
            asm{ ror        r1, r1, #0x13 };
            *(r8 + 0xc) = r3 * r1;
            r1 = *(r8 + 0x24);
            r1 = r1 | r0 * 0x100 | *(r8 + 0x26) * 0x10000;
            r1 = r1 | *(r8 + 0x27) * 0x1000000;
            r1 = *(r8 + 0x10) + r2 * r1;
            r0 = *(r8 + 0x29);
            asm{ ror        r1, r1, #0x13 };
            *(r8 + 0x10) = r3 * r1;
            r1 = *(r8 + 0x28);
            r1 = r1 | r0 * 0x100 | *(r8 + 0x2a) * 0x10000;
            r1 = r1 | *(r8 + 0x2b) * 0x1000000;
            r1 = *(r8 + 0x14) + r2 * r1;
            r0 = *(r8 + 0x2d);
            asm{ ror        r1, r1, #0x13 };
            *(r8 + 0x14) = r3 * r1;
            r2 = *(r8 + 0x18) + r2 * (*(r8 + 0x2c) | r0 * 0x100 | *(r8 + 0x2e) * 0x10000 | *(r8 + 0x2f) * 0x1000000);
            asm{ ror        r2, r2, #0x13 };
            *(r8 + 0x18) = r3 * r2;
            s0 = s0 + (0x10 - *(r8 + 0x1c));
            *(r8 + 0x1c) = 0x0;
    }
    r6 = r10 - 0x10;
    if (s0 > r6) goto loc_8f6590d8;

loc_8f658dc8:
    r5 = *(r8 + 0xc);
    r3 = s0;
    r4 = *(r8 + 0x10);
    r12 = *(r8 + 0x14);
    r0 = *(r8 + 0x18);
    do {
            r2 = 0x9e3779b1;
            r1 = 0x85ebca77;
            r11 = *(r3 + 0x1);
            r3 = r3 + 0x10;
            r7 = *(r3 + 0xfffffffffffffff0);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffff2) * 0x10000;
            r7 = r7 | *(r3 + 0xfffffffffffffff3) * 0x1000000;
            r11 = *(r3 + 0xfffffffffffffff5);
            r5 = r5 + r1 * r7;
            r7 = *(r3 + 0xfffffffffffffff4);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffff6) * 0x10000;
            r11 = *(r3 + 0xfffffffffffffff7);
            asm{ ror        r5, r5, #0x13 };
            r7 = r7 | r11 * 0x1000000;
            r11 = *(r3 + 0xfffffffffffffff9);
            r5 = r2 * r5;
            r4 = r4 + r1 * r7;
            r7 = *(r3 + 0xfffffffffffffff8);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffffa) * 0x10000;
            r11 = *(r3 + 0xfffffffffffffffb);
            asm{ ror        r4, r4, #0x13 };
            r7 = r7 | r11 * 0x1000000;
            r11 = *(r3 + 0xfffffffffffffffd);
            r4 = r2 * r4;
            r12 = r12 + r1 * r7;
            r7 = *(r3 + 0xfffffffffffffffc);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffffe) * 0x10000;
            r11 = *(r3 + 0xffffffffffffffff);
            asm{ ror        ip, ip, #0x13 };
            COND = r3 < r6;
            r12 = r2 * r12;
            r0 = r0 + r1 * (r7 | r11 * 0x1000000);
            asm{ ror        r0, r0, #0x13 };
            r0 = r2 * r0;
    } while (COND);
    goto loc_8f6590b4;

loc_8f6590b4:
    *(r8 + 0xc) = r5;
    *(r8 + 0x10) = r4;
    *(r8 + 0x14) = r12;
    *(r8 + 0x18) = r0;
    s0 = s0 + (r10 - 0x10 - s0 & !0xf) + 0x10;
    goto loc_8f6590d8;

loc_8f6590d8:
    if (s0 < r10) {
            loc_ffffffff8f64ac90(r8 + 0x20, s0, r10 - s0);
            *(r8 + 0x1c) = r10 - s0;
    }
    goto loc_8f6590f8;

loc_8f6590f8:
    r0 = 0x0;
    if (stack[2038] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f658eb0:
    loc_ffffffff8f64ac90(r8 + r3 + 0x20);
    *(r8 + 0x1c) = *(r8 + 0x1c) + r11;
    goto loc_8f6590f8;

loc_8f658e94:
    r3 = *(r0 + 0x1c);
    r4 = r2 + r6;
    asm{ strd       r4, r5, [r0] };
    if (r3 + r2 > 0xf) goto loc_8f658ecc;
    goto loc_8f658eb0;

loc_8f658ecc:
    if (r3 != 0x0) {
            loc_ffffffff8f64ac90(r8 + r3 + 0x20);
            r1 = *(r8 + 0x21);
            r2 = 0x85ebca77;
            r1 = *(r8 + 0x20) | r1 * 0x100;
            r3 = *(r8 + 0x22);
            r0 = *(r8 + 0x25);
            r1 = r1 | r3 * 0x10000 | *(r8 + 0x23) * 0x1000000;
            r3 = *(r8 + 0xc);
            asm{ rev        r1, r1 };
            r1 = r3 + r2 * r1;
            r3 = 0x9e3779b1;
            asm{ ror        r1, r1, #0x13 };
            *(r8 + 0xc) = r3 * r1;
            r1 = *(r8 + 0x24);
            r1 = r1 | r0 * 0x100 | *(r8 + 0x26) * 0x10000;
            r1 = r1 | *(r8 + 0x27) * 0x1000000;
            r0 = *(r8 + 0x10);
            asm{ rev        r1, r1 };
            r1 = r0 + r2 * r1;
            r0 = *(r8 + 0x29);
            asm{ ror        r1, r1, #0x13 };
            *(r8 + 0x10) = r3 * r1;
            r1 = *(r8 + 0x28);
            r1 = r1 | r0 * 0x100 | *(r8 + 0x2a) * 0x10000;
            r1 = r1 | *(r8 + 0x2b) * 0x1000000;
            r0 = *(r8 + 0x14);
            asm{ rev        r1, r1 };
            r1 = r0 + r2 * r1;
            r0 = *(r8 + 0x2d);
            asm{ ror        r1, r1, #0x13 };
            *(r8 + 0x14) = r3 * r1;
            r0 = *(r8 + 0x2c) | r0 * 0x100;
            r0 = r0 | *(r8 + 0x2e) * 0x10000;
            r0 = r0 | *(r8 + 0x2f) * 0x1000000;
            r1 = *(r8 + 0x18);
            asm{ rev        r0, r0 };
            r2 = r1 + r2 * r0;
            asm{ ror        r2, r2, #0x13 };
            *(r8 + 0x18) = r3 * r2;
            s0 = s0 + (0x10 - *(r8 + 0x1c));
            *(r8 + 0x1c) = 0x0;
    }
    r6 = r10 - 0x10;
    if (s0 > r6) goto loc_8f6590d8;

loc_8f658fdc:
    r5 = *(r8 + 0xc);
    r3 = s0;
    r4 = *(r8 + 0x10);
    r12 = *(r8 + 0x14);
    r0 = *(r8 + 0x18);
    do {
            r2 = 0x9e3779b1;
            r1 = 0x85ebca77;
            r11 = *(r3 + 0x1);
            r3 = r3 + 0x10;
            r7 = *(r3 + 0xfffffffffffffff0);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffff2) * 0x10000;
            r7 = r7 | *(r3 + 0xfffffffffffffff3) * 0x1000000;
            r11 = *(r3 + 0xfffffffffffffff5);
            asm{ rev        r7, r7 };
            r5 = r5 + r1 * r7;
            r7 = *(r3 + 0xfffffffffffffff4);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffff6) * 0x10000;
            r11 = *(r3 + 0xfffffffffffffff7);
            asm{ ror        r5, r5, #0x13 };
            r7 = r7 | r11 * 0x1000000;
            r11 = *(r3 + 0xfffffffffffffff9);
            asm{ rev        r7, r7 };
            r5 = r2 * r5;
            r4 = r4 + r1 * r7;
            r7 = *(r3 + 0xfffffffffffffff8);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffffa) * 0x10000;
            r11 = *(r3 + 0xfffffffffffffffb);
            asm{ ror        r4, r4, #0x13 };
            r7 = r7 | r11 * 0x1000000;
            r11 = *(r3 + 0xfffffffffffffffd);
            asm{ rev        r7, r7 };
            r4 = r2 * r4;
            r12 = r12 + r1 * r7;
            r7 = *(r3 + 0xfffffffffffffffc);
            r7 = r7 | r11 * 0x100 | *(r3 + 0xfffffffffffffffe) * 0x10000;
            r11 = *(r3 + 0xffffffffffffffff);
            asm{ ror        ip, ip, #0x13 };
            COND = r3 < r6;
            r7 = r7 | r11 * 0x1000000;
            asm{ rev        r7, r7 };
            r12 = r2 * r12;
            r0 = r0 + r1 * r7;
            asm{ ror        r0, r0, #0x13 };
            r0 = r2 * r0;
    } while (COND);
    goto loc_8f6590b4;

