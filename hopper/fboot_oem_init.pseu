    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r6 = 0x8f7112f4;
    r4 = 0x0;
    stack[2041] = *r6;
    loc_ffffffff8f67a690(r4, "barcode", "Device serial number\n(used interchangably with 'serialno')", 0x8f627388, r4, "^[[:print:]]*$");
    loc_ffffffff8f67a690(r4, "bare_board", "To indicate the device is a bare board (true|false) such that unnecessary initializations (like display) are skipped", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "battery", "Battery detection control\n(\"test\" or \"no_eprom\")", 0x8f627388, r4, "^test$|^no_eprom$");
    loc_ffffffff8f67a690(r4, 0x8f680a09, "Battery Installed in Device\n(To contain the Serial Number of the Battery Cell)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "bootmode", "To force certain bootmode\n(valid values are \"fastboot\", \"factory\", \"bp-tools\", \"qcom\", and \"on-device-diag\")", 0x8f627388, r4, "^fastboot$|^factory$|^bp-tools$|^qcom$|^on-device-diag$");
    loc_ffffffff8f67a690(r4, "bt_mac", "Bluetooth Mac Address.", 0x8f627388, r4, "([[:xdigit:]]{2}:){5}([[:xdigit:]]{2})");
    loc_ffffffff8f67a690(r4, 0x8f686d11, 0x8f6879bb, 0x8f627388, r4, "^[[:alpha:]]*$");
    loc_ffffffff8f67a690(r4, 0x8f68851c, "Carrier IDs, see http://goo.gl/lojLh3", 0x8f627388, r4, "^[[:print:]]{1,32}$");
    loc_ffffffff8f67a690(r4, 0x8f68263d, "Disable charger mode? (true|false)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "console", "Config kernel console log\n  enable|true     - enable with default settings\n  disable|false   - disable\n  <config string> - enable with customized settings\n  (e.g.: \"ttyHSL0\", \"ttyHSL0,230400,n8\")", r4, r4, r4);
    loc_ffffffff8f67a690(r4, 0x8f687b68, "MotoMaker customization MD5\n(32 hexadecimal digits)", 0x8f627388, r4, "^[[:xdigit:]]{32}$");
    loc_ffffffff8f67a690(r4, 0x8f682af3, "Kernel command line overlay\n add/modify option: <option>=<value>\n remove option: -<option>", r4, r4, r4);
    loc_ffffffff8f67a690(r4, 0x8f69b92e, 0x8f687c13, 0x8f627388, r4, "^[[:digit:]]{2}-[[:digit:]]{2}-[[:digit:]]{4}$");
    loc_ffffffff8f67a690(r4, "device", "Product name override\n(treating one product as if it is another)", 0x8f626204, r4, r4);
    loc_ffffffff8f67a690(r4, "disable-reset", "To disable power key HW reset (true|false)\nDisabling HW reset allows automated RF testing to hold the power key with a rubber band without causing cycling reboots", r4, r4, r4);
    loc_ffffffff8f67a690(r4, 0x8f6808de, "To disable display auto detection (true|false)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, 0x8f680949, "Enable or disable display electrostatic discharge detection and recovery in kernel display driver\n(by default this is enabled as long as a display panel is attached)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "fastboot_after_ramdump", "Force fastboot after ramdump(true|false)", r4, r4, r4);
    asm{ stm        sp, {r4, r5} };
    loc_ffffffff8f67a690(r4, "fsg-id", "FSG IDs, see http://goo.gl/gPmhU", 0x8f627388);
    loc_ffffffff8f67a690(r4, 0x8f687e90, "Factory tracking information in binary format\n(not configurable via 'fastboot oem config')", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "hwrev", "Hardware revision override\n(e.g. P1B, p3A, or 0x82B0 for P2B)", 0x8f627388, r4, "^0[xX][[:xdigit:]]{4}$|^[pP][[:xdigit:]]+$");
    asm{ stm        sp, {r4, r5} };
    loc_ffffffff8f67a690(r4, 0x8f687f58, "Device ICCID", 0x8f627388);
    loc_ffffffff8f67a690(r4, 0x8f6822ac, "Device IMEI\n(15 decimal digits including the correct checksum)", 0x8f627420, r4, r4);
    loc_ffffffff8f67a690(r4, "kernel.version", "kernel version string\n(automatically updated on each boot)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "loglevel.ram", "Set RAM log level (D, I, E, C or X)\n  X - emergency messages only\n  C - add critical messages\n  E - add error messages\n  I - add informational messages\n  D - add debug messages\nRAM logs are persisted to logs partition at importantcheckpoints", 0x8f627388, r4, "^[DIECX]$");
    asm{ stm        sp, {r4, r5} };
    loc_ffffffff8f67a690(r4, "loglevel.uart", "Set UART/serial log level (D, I, E, C or X)\n  X - emergency messages only\n  C - add critical messages\n  E - add error messages\n  I - add informational messages\n  D - add debug messages", 0x8f627388);
    asm{ stm        sp, {r4, r5} };
    loc_ffffffff8f67a690(r4, "loglevel.ui", "Set on-screen log level (D, I, E, C or X)\n  X - emergency messages only\n  C - add critical messages\n  E - add error messages\n  I - add informational messages\n  D - add debug messages", 0x8f627388);
    loc_ffffffff8f67a690(r4, 0x8f688260, "Device MEID\n(14 hexadecimal or 18 decimal digits)", 0x8f627388, r4, "^[[:xdigit:]]{14}$|^[[:digit:]]{18}$");
    loc_ffffffff8f67a690(r4, "memtest_blocks", "Number of memory blocks allocated to memtest automation\n  0 - auto-allocate", 0x8f627388, r4, "^[[:digit:]]{1,7}$");
    r1 = "memtest_cycles";
    r2 = "Number of cycles in memtest automation\n  0 - infinite";
    r0 = r4;
    r3 = 0x8f627388;
    asm{ stm        sp, {r4, r5} };
    loc_ffffffff8f67a690(r0, r1, r2, r3);
    loc_ffffffff8f67a690(r4, "memtest_mode", "Memtest mode\n  auto - automation", r4, r4, r4);
    r1 = 0x8f68834d;
    r2 = "MD5 checksum of clogo image.";
    r0 = r4;
    r3 = 0x8f627388;
    asm{ stm        sp, {r4, r7} };
    loc_ffffffff8f67a690(r0, r1, r2, r3);
    loc_ffffffff8f67a690(r4, "num-sims", "Number of SIM slots\n(Set in the range 1 to 4)", 0x8f627388, r4, "^[1234]$");
    loc_ffffffff8f67a690(r4, "radio", "Device RF ID override\n(e.g. \"1\", \"0x1\", \"A\" or \"0xA\", see http://goo.gl/0p3rjz)", 0x8f627388, r4, "^[[:xdigit:]]$|^0[xX][[:xdigit:]]$");
    loc_ffffffff8f67a690(r4, "ro.build.fingerprint", "Software build fingerprint\n(automatically updated on each boot)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "ro.build.version.full", "Full software version string\n(automatically updated on each boot)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, 0x8f6884cb, "QCOM meta build ID\n(automatically updated on each boot)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "ro.carrier", "ro.carrier value passed from kernel\n(automatically updated on each boot)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "serialno", "Device serial number\n(used interchangably with 'barcode')", 0x8f627388, r4, "[^[:cntrl:]]");
    loc_ffffffff8f67a690(r4, 0x8f6822ef, "Device stock-keeping unit\n(less or equal than 15 alphanumeric or hyphen characters)", 0x8f627388, r4, "^[-[:alnum:]]{1,15}$");
    loc_ffffffff8f67a690(r4, "time.offset", "UTC time offset in seconds since Epoch\n(automatically updated on each boot)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "version.baseband", "Modem release version\n(automatically updated on each boot)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "WPDisable", "To indicate if write protect feature should be disabled(true|false)", r4, r4, r4);
    loc_ffffffff8f67a690(r4, "wifi_mac", 0x8f688705, 0x8f627388, r4, "([[:xdigit:]]{2}:){5}([[:xdigit:]]{2})(,([[:xdigit:]]{2}:){5}([[:xdigit:]]{2})){0,1}");
    r0 = loc_ffffffff8f67a690(r4, "enable_dump_gpt", "Indicate if the oem command to dump gpt is enabled (true|false)", r4, r4, r4);
    if (stack[2041] != *r6) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

