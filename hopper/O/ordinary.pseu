    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    COND = r4 != 0x0;
    r7 = lr;
    r6 = arg1;
    stack[2040] = *arg0;
    if (!COND) {
            loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x435, "p != ((void *)0)");
    }
    r3 = *(r4 + 0x1c);
    r5 = zero_extend_32(r6);
    r8 = *(r3 + 0x38);
    if ((((*(r3 + 0x18) & 0x2) != 0x0) && (loc_ffffffff8f64a108(r5) != 0x0)) && (loc_ffffffff8f65ba64(r5) != r5)) {
            r10 = *r4;
            r8 = *(r4 + 0x4);
            if (loc_ffffffff8f65ba64(r5) == r5) {
                    loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x41e, "othercase(ch) != ch");
            }
            *r4 = sp + 0x8;
            *(r4 + 0x4) = sp + 0xa;
            stack[2040] = 0x0;
            r0 = loc_ffffffff8f65bb34(r4);
            if (*r4 != sp + 0xa) {
                    r0 = loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x425, "p->next == bracket+2");
            }
            *r4 = r10;
            *(r4 + 0x4) = r8;
    }
    else {
            r2 = r5;
            r1 = 0x10000000;
            r0 = loc_ffffffff8f65b978(r4, r1, r2);
            r3 = *(r8 + r6);
            if (r3 == 0x0) {
                    r2 = *(r4 + 0x1c);
            }
            if (CPU_FLAGS & E) {
                    r3 = *(r2 + 0x34);
            }
            if (CPU_FLAGS & E) {
                    r1 = r3 + 0x1;
            }
            if (CPU_FLAGS & E) {
                    *(r2 + 0x34) = r1;
            }
            if (CPU_FLAGS & E) {
                    *(r8 + r6) = r3;
            }
    }
    if (stack[2040] != *r0) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

