    r2 = arg2;
    r1 = arg1;
    r0 = arg0;
    if (r2 == 0x0) {
            return;
    }
    COND = r3 != 0x0;
    r12 = r0;
    if (COND) {
            return;
    }
    if (r2 >= 0x4) {
            do {
                    r2 = r2 - 0x10;
                    COND = r2 >= 0x0;
                    if (COND) {
                            asm{ stmge      ip!, {r1, r3, r8, lr} };
                    }
                    if (CPU_FLAGS & GE) {
                            asm{ stmge      ip!, {r1, r3, r8, lr} };
                    }
                    if (CPU_FLAGS & GE) {
                            asm{ stmge      ip!, {r1, r3, r8, lr} };
                    }
                    if (CPU_FLAGS & GE) {
                            asm{ stmge      ip!, {r1, r3, r8, lr} };
                    }
            } while (CPU_FLAGS & G);
            if (CPU_FLAGS & E) {
                    return;
            }
            if ((r2 & 0x8) != 0x0) {
                    asm{ stmne      ip!, {r1, r3, r8, lr} };
            }
            if (CPU_FLAGS & NE) {
                    asm{ stmne      ip!, {r1, r3, r8, lr} };
            }
            if ((r2 & 0x4) != 0x0) {
                    asm{ stmne      ip!, {r1, r3, r8, lr} };
            }
    }
    if ((r2 & 0x2) != 0x0) {
            asm{ stmne      ip!, {r1, r3} };
    }
    if ((r2 & 0x1) != 0x0) {
            *r12 = r1;
    }
    return;

