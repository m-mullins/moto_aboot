    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x94;
    r5 = *(arg0 + 0xc);
    r8 = *(arg0 + 0x8);
    r3 = *arg0;
    r6 = *arg0;
    stack[2039] = r3;
    r3 = *(r5 + 0x1);
    r1 = r3 - 0x30;
    r7 = r3 - 0x30;
    r3 = 0x0 - r1;
    r3 = r3 + r1 + CARRY(FLAGS);
    if (r8 >= 0x200000) {
            r3 = 0x0;
    }
    if (r3 == 0x0) goto loc_8f623c94;

loc_8f623c78:
    loc_ffffffff8f64aa80(sp + 0xc, "multiflash buffer too small: < %d bytes\n", 0x200000);
    goto loc_8f623cdc;

loc_8f623cdc:
    loc_ffffffff8f62192c();
    r0 = 0x3;
    *0x8f6c03b4 = 0x0;
    goto loc_8f623d6c;

loc_8f623d6c:
    if (stack[2039] != *r0) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f623c94:
    r5 = r5 + 0x3;
    if (((loc_ffffffff8f64b0ac(r5, "motoboot") == 0x0) || (loc_ffffffff8f64b0ac(r5, 0x8f682073) == 0x0)) || (loc_ffffffff8f64b0ac(r5, "cid_prov") == 0x0)) goto loc_8f623cdc;

loc_8f623ce4:
    if (*0x8f6c03b4 != 0x0) goto loc_8f623d18;

.l10:
    if (CPU_FLAGS & B) goto loc_8f623cdc;

loc_8f623d00:
    r3 = 0xed26ff3a;
    if (*r6 == r3) {
            r3 = 0x2;
    }
    if (CPU_FLAGS & NE) {
            r3 = 0x1;
    }
    *0x8f6c03b4 = r3;
    goto loc_8f623d18;

loc_8f623d18:
    if (*0x8f6c03b4 == 0x1) {
            r0 = loc_ffffffff8f6232ac();
    }
    else {
            r0 = loc_ffffffff8f6233fc();
    }
    if (r0 != 0x3) {
            r0 = 0x1;
            if (CPU_FLAGS & NE) {
                    *0x8f6c03b4 = 0x0;
            }
    }
    else {
            r0 = 0x3;
            *0x8f6c03b4 = 0x0;
    }
    goto loc_8f623d6c;

