    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r6 = arg0;
    stack[2039] = *arg0;
    loc_ffffffff8f6193f8(arg0, 0x18);
    r0 = *(r6 + 0xc);
    if (r0 == 0x0) goto loc_8f604c90;

loc_8f604bac:
    r5 = loc_ffffffff8f601d48();
    r0 = *(r6 + 0xc);
    r0 = loc_ffffffff8f6193f8(r0, 0x14);
    if (r5 == 0x0) goto loc_8f604c90;

loc_8f604bc8:
    r0 = *(r5 + 0x10);
    r7 = 0x0;
    r0 = loc_ffffffff8f601d48(r0);
    r8 = *(r5 + 0x4);
    *(r6 + 0xc) = r7;
    r4 = r0;
    goto loc_8f604be0;

loc_8f604be0:
    do {
            loc_ffffffff8f6193f8(r4, 0x20);
    } while ((*(r4 + 0x4) & 0x80) != 0x0);
    r1 = *(r4 + 0x4);
    COND = r2 == 0x0;
    if (COND) goto loc_8f604c3c;

loc_8f604c04:
    lr = *(r6 + 0x11);
    r3 = *(r4 + 0x8);
    r0 = loc_ffffffff8f656968();
    goto loc_8f604c78;

loc_8f604c78:
    r3 = *(r5 + 0x8);
    if (r3 != 0x0) {
            r0 = (r3)(r5, r7);
    }
    goto loc_8f604c90;

loc_8f604c90:
    if (stack[2039] != *r0) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f604c3c:
    r0 = *r4;
    r1 = r1 >> r1 / 0x10000;
    if (r0 == 0x1) {
            r7 = r8 + r7;
    }
    if (CPU_FLAGS & E) {
            asm{ ubfxeq     r1, r1, #0x0, #0xf };
    }
    if (CPU_FLAGS & E) {
            r7 = r7 - r1;
    }
    if (CPU_FLAGS & E) goto loc_8f604c78;

loc_8f604c58:
    asm{ ubfx       r1, r1, #0x0, #0xf };
    r7 = r7 + (0x4000 - r1);
    r8 = r8 + (r1 - 0x4000);
    r4 = loc_ffffffff8f601d48();
    goto loc_8f604be0;

