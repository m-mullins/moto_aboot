    r1 = arg1;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r10 = arg3;
    r6 = r1;
    r11 = arg4;
    r4 = arg5;
    stack[2037] = *0x8f7112f4;
    stack[2035] = arg6;
    r7 = arg7;
    r8 = arg8;
    if (arg0 != 0xff) {
            r0 = 0x33;
    }
    else {
            if (*r1 <= 0x1) {
                    stack[2036] = 0x2;
                    if ((*(r1 + 0x1) == 0xa) && (loc_ffffffff8f66c958(r1, sp + 0x8) == 0xf0)) {
                            stack[2036] = stack[2036] + 0x8;
                            r0 = loc_ffffffff8f66c958(r6, sp + 0x8);
                            if (r0 == 0xf0) {
                                    r2 = stack[2036];
                                    r1 = r2 + 0x1;
                                    if (*(r6 + r2) == 0x2) {
                                            r3 = r2 + 0x2;
                                            if (*(r6 + r1) == 0xff) {
                                                    r1 = *(r6 + r3);
                                                    r3 = *(0x3 + r6 + r2);
                                                    r3 = r3 | r1 * 0x100;
                                                    COND = r3 != 0x0;
                                                    r3 = r2 + 0x4;
                                                    if (COND) {
                                                            r0 = 0x33;
                                                    }
                                                    if (CPU_FLAGS & E) {
                                                            r0 = 0xf0;
                                                    }
                                            }
                                            if (r0 == 0xf0) {
                                                    r1 = *(r6 + r3);
                                                    r2 = *(0x1 + r6 + r3);
                                                    *r4 = r2 | r1 * 0x100;
                                                    *r11 = r3 + 0x2;
                                                    r3 = (r2 | r1 * 0x100) + r3 + 0x2;
                                                    r1 = *(r6 + r3);
                                                    r2 = *(0x1 + r6 + r3);
                                                    r2 = r2 | r1 * 0x100;
                                                    *r10 = r2;
                                                    r1 = *r4;
                                                    *r0 = r3 + 0x2;
                                                    r3 = r2 + r3 + 0x2;
                                                    if ((r1 <= 0x4) && (zero_extend_32(r2 - 0x60) <= 0xa0)) {
                                                            *r8 = r3;
                                                            *r7 = *(0x1 + r6 + r3) | *(r6 + r3) * 0x100;
                                                            *stack[2035] = r3 + 0x2;
                                                    }
                                                    else {
                                                            r0 = 0x33;
                                                    }
                                            }
                                            else {
                                                    r0 = 0x33;
                                            }
                                    }
                                    else {
                                            r0 = 0x33;
                                    }
                            }
                            else {
                                    r0 = 0x33;
                            }
                    }
                    else {
                            r0 = 0x33;
                    }
            }
            else {
                    r0 = 0x33;
            }
    }
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

