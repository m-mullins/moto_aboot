    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x19c;
    stack[1955] = arg2;
    r2 = r0;
    stack[1949] = arg1;
    stack[2037] = *0x8f7112f4;
    r3 = 0x0;
    do {
            r2 = r2 + 0x4;
            r1 = sp + 0x54;
            *(r3 + r1) = *(r2 + 0xffffffffffffffff) | *(r0 + r3) * 0x1000000 | *(r2 + 0xfffffffffffffffd) * 0x10000 | *(r2 + 0xfffffffffffffffe) * 0x100;
            r3 = r3 + 0x4;
    } while (r3 != 0x40);
    r3 = stack[1949];
    r10 = stack[1957];
    r0 = *stack[1949];
    r2 = 0x5a827999;
    asm{ ldmib      r3, {r1, lr} };
    stack[1937] = r0;
    r4 = stack[1937];
    r0 = *(r3 + 0xc);
    r5 = stack[1958];
    r2 = (r0 & !r1 | lr & r1) + (ROR(r4, 0x1b)) + *(r3 + 0x10) + r10 + r2;
    r3 = 0x5a827999;
    asm{ ror        r1, r1, #0x2 };
    r3 = r5 + r3;
    r5 = stack[1959];
    r3 = r3 + r0;
    r0 = r1 & r4;
    r12 = lr & !r4 | r0;
    asm{ ror        r0, r4, #0x2 };
    r3 = (ROR(r2, 0x1b)) + r3 + r12;
    r6 = stack[1960];
    lr = lr + r5 + 0x5a827999;
    r4 = r1 & !r2 | r2 & r0;
    r12 = 0x5a827999;
    asm{ ror        r2, r2, #0x2 };
    lr = r4 + lr + (ROR(r3, 0x1b));
    r12 = r1 + r6 + r12;
    r7 = stack[1961];
    r1 = 0x5a827999;
    r12 = r12 + (r0 & !r3 | r3 & r2);
    asm{ ror        r3, r3, #0x2 };
    r12 = r12 + (ROR(lr, 0x1b));
    r8 = stack[1962];
    r0 = (r2 & !lr | lr & r3) + (ROR(r12, 0x1b)) + r0 + r7 + r1;
    r1 = 0x5a827999;
    asm{ ror        lr, lr, #0x2 };
    s0 = stack[1963];
    r2 = r2 + r8 + r1;
    r1 = r3 & !r12 | r12 & lr;
    asm{ ror        ip, ip, #0x2 };
    r1 = (ROR(r0, 0x1b)) + r2 + r1;
    r11 = stack[1964];
    r2 = (lr & !r0 | r0 & r12) + (ROR(r1, 0x1b)) + r3 + s0 + 0x5a827999;
    r3 = 0x5a827999;
    asm{ ror        r0, r0, #0x2 };
    r3 = r11 + r3;
    r11 = stack[1965];
    lr = r3 + lr;
    r3 = r12 & !r1 | r1 & r0;
    asm{ ror        r1, r1, #0x2 };
    r3 = (ROR(r2, 0x1b)) + lr + r3;
    lr = (r0 & !r2 | r2 & r1) + (ROR(r3, 0x1b)) + r12 + r11 + 0x5a827999;
    r4 = stack[1966];
    r12 = 0x5a827999;
    asm{ ror        r2, r2, #0x2 };
    r0 = r0 + r4 + r12;
    r4 = stack[1967];
    r12 = r0 + (r1 & !r3 | r3 & r2);
    r0 = 0x5a827999;
    r12 = r12 + (ROR(lr, 0x1b));
    asm{ ror        r3, r3, #0x2 };
    r0 = (r2 & !lr | lr & r3) + (ROR(r12, 0x1b)) + r1 + r4 + r0;
    r4 = stack[1968];
    r1 = 0x5a827999;
    asm{ ror        lr, lr, #0x2 };
    r2 = r2 + r4 + r1;
    r4 = stack[1969];
    r1 = r2 + (r3 & !r12 | r12 & lr);
    r2 = 0x5a827999;
    r1 = r1 + (ROR(r0, 0x1b));
    asm{ ror        ip, ip, #0x2 };
    r2 = (lr & !r0 | r0 & r12) + (ROR(r1, 0x1b)) + r3 + r4 + r2;
    r4 = stack[1970];
    r3 = 0x5a827999;
    asm{ ror        r0, r0, #0x2 };
    lr = lr + r4 + r3;
    r4 = stack[1971];
    r3 = lr + (r12 & !r1 | r1 & r0);
    lr = 0x5a827999;
    r3 = r3 + (ROR(r2, 0x1b));
    asm{ ror        r1, r1, #0x2 };
    lr = (r0 & !r2 | r2 & r1) + (ROR(r3, 0x1b)) + r12 + r4 + lr;
    r4 = stack[1972];
    r12 = 0x5a827999;
    asm{ ror        r2, r2, #0x2 };
    r0 = r0 + r4 + r12;
    r4 = stack[1970];
    r12 = r0 + (r1 & !r3 | r3 & r2);
    r0 = r5 ^ r10 ^ r11;
    asm{ ror        r3, r3, #0x2 };
    r0 = r0 ^ r4;
    r12 = r12 + (ROR(lr, 0x1b));
    r5 = r7 ^ r5;
    r10 = 0x6ed9eba1;
    asm{ ror        r0, r0, #0x1f };
    stack[1939] = r0;
    r0 = r2 & !lr | lr & r3;
    r4 = stack[1958];
    r1 = (ROR(r12, 0x1b)) + r1 + stack[1939] + 0x5a827999;
    asm{ ror        lr, lr, #0x2 };
    r0 = r1 + r0;
    r1 = r6 ^ r4 ^ stack[1966] ^ stack[1971];
    asm{ ror        r1, r1, #0x1f };
    stack[1938] = r1;
    r4 = stack[1972];
    r1 = (r3 & !r12 | r12 & lr) + r2 + stack[1938] + 0x5a827999;
    r2 = stack[1967];
    r1 = r1 + (ROR(r0, 0x1b));
    asm{ ror        ip, ip, #0x2 };
    r5 = r5 ^ r2;
    r2 = 0x5a827999;
    r5 = r5 ^ r4;
    r4 = lr & !r0;
    asm{ ror        r5, r5, #0x1f };
    r2 = (r4 | r0 & r12) + (ROR(r1, 0x1b)) + r3 + r5 + r2;
    r3 = stack[1939];
    r4 = r8 ^ r6 ^ stack[1968];
    asm{ ror        r0, r0, #0x2 };
    r4 = r4 ^ r3;
    r3 = 0x5a827999;
    r6 = r12 & !r1;
    asm{ ror        r4, r4, #0x1f };
    r3 = (r6 | r1 & r0) + lr + r4 + r3;
    lr = s0 ^ r7;
    r7 = stack[1938];
    lr = lr ^ stack[1969];
    asm{ ror        r1, r1, #0x2 };
    r3 = r3 + (ROR(r2, 0x1b));
    lr = lr ^ r7;
    r7 = 0x6ed9eba1;
    r6 = r1 ^ r0;
    asm{ ror        lr, lr, #0x1f };
    r6 = r6 ^ r2;
    r7 = lr + r7;
    asm{ ror        r2, r2, #0x2 };
    r7 = (ROR(r3, 0x1b)) + r6 + r7 + r12;
    r12 = stack[1964] ^ r8;
    r8 = 0x6ed9eba1;
    r12 = r12 ^ stack[1970] ^ r5;
    r6 = r2 ^ r1 ^ r3;
    asm{ ror        r3, r3, #0x2 };
    asm{ ror        ip, ip, #0x1f };
    r10 = (ROR(r7, 0x1b)) + r6 + r0 + r12 + r10;
    r6 = r3 ^ r2 ^ r7;
    r0 = r11 ^ s0 ^ stack[1971] ^ r4;
    s0 = stack[1964];
    asm{ ror        r7, r7, #0x2 };
    asm{ ror        r0, r0, #0x1f };
    r8 = (ROR(r10, 0x1b)) + r6 + r1 + r0 + r8;
    r6 = 0x6ed9eba1;
    r1 = stack[1966] ^ s0 ^ stack[1972] ^ lr;
    s0 = r7 ^ r3 ^ r10;
    asm{ ror        sl, sl, #0x2 };
    asm{ ror        r1, r1, #0x1f };
    r6 = (ROR(r8, 0x1b)) + s0 + r2 + r1 + r6;
    s0 = 0x6ed9eba1;
    r2 = stack[1967] ^ r11 ^ stack[1939] ^ r12;
    r11 = r10 ^ r7 ^ r8;
    asm{ ror        r8, r8, #0x2 };
    asm{ ror        r2, r2, #0x1f };
    s0 = (ROR(r6, 0x1b)) + r11 + r3 + r2 + s0;
    r11 = 0x6ed9eba1;
    r3 = stack[1968] ^ stack[1966] ^ stack[1938] ^ r0;
    asm{ ror        r3, r3, #0x1f };
    r7 = r7 + r3 + r11;
    r11 = r8 ^ r10 ^ r6;
    asm{ ror        r6, r6, #0x2 };
    stack[1940] = r6;
    r7 = (ROR(s0, 0x1b)) + r7 + r11;
    r11 = stack[1969] ^ stack[1967] ^ r5 ^ r1;
    asm{ ror        fp, fp, #0x1f };
    stack[1943] = r11;
    r10 = r10 + stack[1943] + 0x6ed9eba1;
    r6 = stack[1968];
    r11 = stack[1940] ^ r8 ^ s0;
    asm{ ror        sb, sb, #0x2 };
    r10 = (ROR(r7, 0x1b)) + r10 + r11;
    r11 = stack[1970] ^ r6 ^ r4 ^ r2;
    asm{ ror        fp, fp, #0x1f };
    stack[1944] = r11;
    r8 = r8 + stack[1944] + 0x6ed9eba1;
    r6 = stack[1969];
    r11 = s0 ^ stack[1940] ^ r7;
    asm{ ror        r7, r7, #0x2 };
    stack[1942] = r7;
    r8 = (ROR(r10, 0x1b)) + r8 + r11;
    r11 = stack[1971] ^ r6 ^ lr ^ r3;
    asm{ ror        fp, fp, #0x1f };
    stack[1945] = r11;
    r6 = stack[1940] + stack[1945] + 0x6ed9eba1;
    r7 = stack[1970];
    r11 = stack[1942] ^ s0 ^ r10;
    asm{ ror        sl, sl, #0x2 };
    r6 = (ROR(r8, 0x1b)) + r6 + r11;
    r11 = stack[1972] ^ r7 ^ r12 ^ stack[1943];
    asm{ ror        fp, fp, #0x1f };
    stack[1940] = r11;
    s0 = s0 + stack[1940] + 0x6ed9eba1;
    r7 = stack[1971];
    r11 = r10 ^ stack[1942] ^ r8;
    asm{ ror        r8, r8, #0x2 };
    s0 = (ROR(r6, 0x1b)) + s0 + r11;
    r11 = stack[1939] ^ r7 ^ r0 ^ stack[1944];
    asm{ ror        fp, fp, #0x1f };
    stack[1941] = r11;
    r7 = stack[1942] + stack[1941] + 0x6ed9eba1;
    r11 = r8 ^ r10 ^ r6;
    asm{ ror        r6, r6, #0x2 };
    stack[1946] = r6;
    r7 = (ROR(s0, 0x1b)) + r7 + r11;
    r11 = stack[1938] ^ stack[1972] ^ r1 ^ stack[1945];
    asm{ ror        fp, fp, #0x1f };
    stack[1942] = r11;
    r10 = r10 + stack[1942] + 0x6ed9eba1;
    r6 = stack[1939];
    r11 = stack[1946] ^ r8 ^ s0;
    asm{ ror        sb, sb, #0x2 };
    r10 = r10 + r11;
    r11 = r5 ^ r6 ^ r2;
    r10 = r10 + (ROR(r7, 0x1b));
    r5 = lr ^ r5;
    r11 = r11 ^ stack[1940];
    lr = r0 ^ lr;
    r0 = r2 ^ r0;
    asm{ ror        fp, fp, #0x1f };
    stack[1939] = r11;
    r8 = r8 + stack[1939] + 0x6ed9eba1;
    r6 = stack[1938];
    r11 = s0 ^ stack[1946] ^ r7;
    asm{ ror        r7, r7, #0x2 };
    r8 = r8 + r11;
    r11 = r4 ^ r6 ^ r3;
    r8 = r8 + (ROR(r10, 0x1b));
    r4 = r12 ^ r4;
    r11 = r11 ^ stack[1941];
    r12 = r1 ^ r12;
    r1 = r3 ^ r1;
    asm{ ror        fp, fp, #0x1f };
    stack[1938] = r11;
    r6 = stack[1946] + stack[1938] + 0x6ed9eba1;
    r11 = r7 ^ s0 ^ r10;
    asm{ ror        sl, sl, #0x2 };
    r6 = (ROR(r8, 0x1b)) + r6 + r11;
    r5 = r5 ^ stack[1943] ^ stack[1942];
    asm{ ror        r5, r5, #0x1f };
    stack[1946] = r5;
    r5 = stack[1944];
    s0 = (r10 ^ r7 ^ r8) + s0 + stack[1946] + 0x6ed9eba1;
    r11 = stack[1939];
    asm{ ror        r8, r8, #0x2 };
    s0 = s0 + (ROR(r6, 0x1b));
    r4 = r4 ^ r5 ^ r11;
    r11 = stack[1945];
    asm{ ror        r4, r4, #0x1f };
    stack[1947] = r4;
    r12 = r12 ^ stack[1940];
    lr = lr ^ r11 ^ stack[1938];
    r7 = (r8 ^ r10 ^ r6) + r7 + stack[1947] + 0x6ed9eba1;
    asm{ ror        r6, r6, #0x2 };
    r11 = stack[1947];
    asm{ ror        lr, lr, #0x1f };
    stack[1948] = lr;
    r5 = stack[1948];
    r4 = r6 ^ r8 ^ s0;
    lr = 0x6ed9eba1;
    r7 = r7 + (ROR(s0, 0x1b));
    asm{ ror        sb, sb, #0x2 };
    r10 = r4 + r10 + r5 + lr;
    r12 = r12 ^ stack[1946];
    r0 = r0 ^ stack[1941] ^ r11;
    lr = s0 ^ r6;
    r10 = r10 + (ROR(r7, 0x1b));
    asm{ ror        ip, ip, #0x1f };
    stack[1950] = r12;
    r4 = stack[1950];
    asm{ ror        r0, r0, #0x1f };
    lr = lr ^ r7;
    r12 = 0x6ed9eba1;
    asm{ ror        r7, r7, #0x2 };
    stack[1951] = r0;
    r5 = stack[1943];
    r8 = (ROR(r10, 0x1b)) + lr + r8 + r4 + r12;
    r6 = (r7 ^ s0 ^ r10) + r6 + stack[1951] + 0x6ed9eba1;
    r12 = stack[1950];
    r1 = r1 ^ stack[1942] ^ stack[1948];
    r2 = r5 ^ r2 ^ stack[1939];
    asm{ ror        sl, sl, #0x2 };
    r2 = r2 ^ r12;
    asm{ ror        r1, r1, #0x1f };
    stack[1952] = r1;
    r0 = r10 ^ r7;
    r4 = stack[1952];
    asm{ ror        r2, r2, #0x1f };
    r6 = r6 + (ROR(r8, 0x1b));
    stack[1953] = r2;
    r0 = r0 ^ r8;
    r1 = 0x6ed9eba1;
    asm{ ror        r8, r8, #0x2 };
    r7 = ((r8 | r10) & r6 | r8 & r10) + r7 + stack[1953] + 0x8f1bbcdc;
    r12 = stack[1945];
    r3 = stack[1944] ^ r3 ^ stack[1938] ^ stack[1951];
    s0 = (ROR(r6, 0x1b)) + r0 + s0 + r4 + r1;
    lr = stack[1946];
    asm{ ror        r6, r6, #0x2 };
    asm{ ror        r3, r3, #0x1f };
    stack[1954] = r3;
    r7 = r7 + (ROR(s0, 0x1b));
    r11 = r12 ^ r5 ^ lr ^ stack[1952];
    r10 = ((r6 | r8) & s0 | r6 & r8) + r10 + stack[1954] + 0x8f1bbcdc;
    r3 = 0x8f1bbcdc;
    asm{ ror        sb, sb, #0x2 };
    asm{ ror        fp, fp, #0x1f };
    r8 = ((s0 | r6) & r7 | s0 & r6) + r8 + r11 + r3;
    r5 = stack[1941];
    r12 = stack[1940] ^ stack[1944] ^ stack[1947] ^ stack[1953];
    stack[1943] = r11;
    r10 = r10 + (ROR(r7, 0x1b));
    r11 = stack[1945];
    asm{ ror        ip, ip, #0x1f };
    r3 = 0x8f1bbcdc;
    asm{ ror        r7, r7, #0x2 };
    r3 = r12 + r3;
    stack[1944] = r12;
    r8 = r8 + (ROR(r10, 0x1b));
    r1 = 0x8f1bbcdc;
    r12 = r5 ^ r11 ^ stack[1948] ^ stack[1954];
    r2 = (r7 | s0) & r10;
    r6 = r3 + r6;
    asm{ ror        sl, sl, #0x2 };
    asm{ ror        ip, ip, #0x1f };
    r3 = r2 | r7 & s0;
    s0 = s0 + r12 + r1;
    r6 = r6 + r3;
    stack[1945] = r12;
    r1 = (r10 | r7) & r8 | r10 & r7;
    r2 = stack[1942];
    r3 = stack[1940];
    r6 = r6 + (ROR(r8, 0x1b));
    r4 = stack[1950];
    asm{ ror        r8, r8, #0x2 };
    r11 = r2 ^ r3 ^ r4;
    r3 = 0x8f1bbcdc;
    r11 = r11 ^ stack[1943];
    r2 = r8 | r10;
    r1 = s0 + r1;
    s0 = stack[1939];
    asm{ ror        fp, fp, #0x1f };
    stack[1940] = r11;
    r7 = r7 + r11 + r3;
    r3 = r2 & r6 | r8 & r10;
    r0 = 0x8f1bbcdc;
    r1 = r1 + (ROR(r6, 0x1b));
    r2 = s0 ^ stack[1941] ^ stack[1951] ^ stack[1944];
    asm{ ror        r6, r6, #0x2 };
    r4 = stack[1942];
    r7 = r7 + r3;
    asm{ ror        r2, r2, #0x1f };
    stack[1941] = r2;
    r10 = r10 + r2 + r0;
    s0 = stack[1945];
    r0 = (r6 | r8) & r1 | r6 & r8;
    r7 = r7 + (ROR(r1, 0x1b));
    r3 = stack[1938] ^ r4 ^ stack[1952];
    asm{ ror        r1, r1, #0x2 };
    r3 = r3 ^ s0;
    s0 = 0x8f1bbcdc;
    r12 = stack[1939];
    r0 = r10 + r0;
    asm{ ror        r3, r3, #0x1f };
    stack[1942] = r3;
    r8 = r8 + r3 + s0;
    s0 = (r1 | r6) & r7 | r1 & r6;
    r5 = 0x8f1bbcdc;
    r0 = r0 + (ROR(r7, 0x1b));
    r2 = stack[1946] ^ r12 ^ stack[1953] ^ stack[1940];
    asm{ ror        r7, r7, #0x2 };
    r3 = r7 & r1;
    r4 = stack[1947];
    asm{ ror        r2, r2, #0x1f };
    r11 = stack[1954];
    r12 = stack[1941];
    r10 = 0x8f1bbcdc;
    r5 = ((r7 | r1) & r0 | r3) + r6 + r2 + r5;
    r6 = stack[1938];
    s0 = (ROR(r0, 0x1b)) + r8 + s0;
    asm{ ror        r0, r0, #0x2 };
    stack[1939] = r2;
    r3 = r4 ^ r6 ^ r11 ^ r12;
    r2 = stack[1946];
    r4 = stack[1942];
    r5 = r5 + (ROR(s0, 0x1b));
    asm{ ror        r3, r3, #0x1f };
    stack[1938] = r3;
    r1 = r1 + r3 + r10;
    r3 = stack[1943];
    r10 = r1 + ((r0 | r7) & s0 | r0 & r7);
    r1 = stack[1948];
    asm{ ror        sb, sb, #0x2 };
    r10 = r10 + (ROR(r5, 0x1b));
    lr = r1 ^ r2 ^ r3;
    r3 = s0 & r0;
    lr = lr ^ r4;
    r4 = 0x8f1bbcdc;
    asm{ ror        lr, lr, #0x1f };
    stack[1946] = lr;
    r6 = stack[1950];
    r11 = stack[1944];
    r4 = ((s0 | r0) & r5 | r3) + r7 + lr + r4;
    r7 = stack[1947];
    lr = stack[1939];
    asm{ ror        r5, r5, #0x2 };
    r3 = r5 & s0;
    r2 = stack[1938];
    r12 = r6 ^ r7 ^ r11 ^ lr;
    lr = 0x8f1bbcdc;
    r4 = r4 + (ROR(r10, 0x1b));
    r11 = stack[1953];
    asm{ ror        ip, ip, #0x1f };
    stack[1947] = r12;
    r0 = r0 + r12 + lr;
    r12 = 0x8f1bbcdc;
    lr = (r5 | s0) & r10 | r3;
    asm{ ror        sl, sl, #0x2 };
    r3 = r10 & r5;
    lr = (ROR(r4, 0x1b)) + r0 + lr;
    r0 = 0x8f1bbcdc;
    r8 = stack[1951] ^ r1 ^ stack[1945];
    r1 = stack[1951];
    r8 = r8 ^ r2;
    r2 = stack[1941];
    asm{ ror        r8, r8, #0x1f };
    s0 = s0 + r8 + r12;
    r12 = (r10 | r5) & r4;
    asm{ ror        r4, r4, #0x2 };
    r12 = s0 + (r12 | r3);
    r3 = r4 & r10;
    r12 = r12 + (ROR(lr, 0x1b));
    r7 = stack[1952] ^ r6 ^ stack[1940];
    r6 = stack[1952];
    r7 = r7 ^ stack[1946];
    s0 = r11 ^ r1 ^ r2;
    r1 = 0x8f1bbcdc;
    asm{ ror        r7, r7, #0x1f };
    r11 = stack[1942];
    r2 = 0x8f1bbcdc;
    r5 = r5 + r7 + r0;
    r0 = (r4 | r10) & lr;
    asm{ ror        lr, lr, #0x2 };
    r0 = r5 + (r0 | r3);
    r5 = stack[1954];
    s0 = s0 ^ stack[1947];
    r3 = lr & r4;
    r0 = r0 + (ROR(r12, 0x1b));
    asm{ ror        sb, sb, #0x1f };
    r10 = r10 + s0 + r1;
    r1 = (lr | r4) & r12;
    asm{ ror        ip, ip, #0x2 };
    r1 = r1 | r3;
    r3 = r12 & lr;
    r1 = r10 + r1;
    r10 = r5 ^ r6 ^ r11;
    r5 = stack[1939];
    r10 = r10 ^ r8;
    r1 = r1 + (ROR(r0, 0x1b));
    asm{ ror        sl, sl, #0x1f };
    r4 = r4 + r10 + r2;
    r2 = (r12 | lr) & r0;
    asm{ ror        r0, r0, #0x2 };
    r2 = (ROR(r1, 0x1b)) + r4 + (r2 | r3);
    r3 = 0x8f1bbcdc;
    r6 = (r0 | r12) & r1;
    r11 = stack[1943] ^ stack[1953] ^ r5 ^ r7;
    r4 = stack[1954];
    r5 = stack[1938];
    asm{ ror        r1, r1, #0x2 };
    asm{ ror        fp, fp, #0x1f };
    r6 = (r6 | r0 & r12) + lr + r11 + r3;
    r3 = stack[1944] ^ r4;
    r4 = stack[1945];
    r3 = r3 ^ r5;
    r5 = stack[1943];
    r3 = r3 ^ s0;
    r6 = r6 + (ROR(r2, 0x1b));
    asm{ ror        r3, r3, #0x1f };
    stack[1948] = r3;
    r12 = r12 + stack[1948] + 0x8f1bbcdc;
    lr = (r1 | r0) & r2;
    r3 = r1 & r0;
    asm{ ror        r2, r2, #0x2 };
    r3 = lr | r3;
    lr = r4 ^ r5;
    r5 = 0x8f1bbcdc;
    r3 = (ROR(r6, 0x1b)) + r12 + r3;
    r12 = r2 & r1;
    lr = lr ^ stack[1946] ^ r10;
    asm{ ror        lr, lr, #0x1f };
    stack[1943] = lr;
    r0 = r0 + lr + r5;
    lr = stack[1940];
    r4 = stack[1947];
    r5 = r0 + ((r2 | r1) & r6 | r12);
    r0 = stack[1944];
    asm{ ror        r6, r6, #0x2 };
    r5 = r5 + (ROR(r3, 0x1b));
    r12 = lr ^ r0;
    r0 = r6 & r2;
    r12 = r12 ^ r4;
    r4 = 0x8f1bbcdc;
    r12 = r12 ^ r11;
    lr = stack[1941];
    asm{ ror        ip, ip, #0x1f };
    stack[1944] = r12;
    r1 = r1 + r12 + r4;
    r4 = (r6 | r2) & r3;
    asm{ ror        r3, r3, #0x2 };
    r4 = r1 + (r4 | r0);
    r12 = lr ^ stack[1945];
    lr = 0xca62c1d6;
    r0 = stack[1943];
    r12 = r12 ^ r8 ^ stack[1948];
    r1 = r3 ^ r6 ^ r5;
    r4 = r4 + (ROR(r5, 0x1b));
    asm{ ror        ip, ip, #0x1f };
    stack[1945] = r12;
    lr = r2 + r12 + lr;
    r12 = stack[1940];
    r2 = stack[1942];
    lr = lr + r1;
    asm{ ror        r5, r5, #0x2 };
    lr = lr + (ROR(r4, 0x1b));
    r1 = r2 ^ r12;
    r1 = r1 ^ r7 ^ r0;
    r2 = r5 ^ r3 ^ r4;
    asm{ ror        r4, r4, #0x2 };
    asm{ ror        r1, r1, #0x1f };
    r3 = *0x8f7112f4;
    stack[1940] = r1;
    r12 = (ROR(lr, 0x1b)) + r2 + r6 + r1 + 0xca62c1d6;
    r1 = stack[1938];
    r6 = stack[1945];
    r2 = stack[1939] ^ stack[1941] ^ s0 ^ 0x0;
    r0 = 0xca62c1d6;
    asm{ ror        r2, r2, #0x1f };
    stack[1941] = r2;
    r0 = r3 + r2 + r0;
    r2 = r4 ^ r5 ^ lr;
    asm{ ror        lr, lr, #0x2 };
    r0 = (ROR(r12, 0x1b)) + r0 + r2;
    r3 = r1 ^ stack[1942];
    r1 = 0xca62c1d6;
    r3 = r3 ^ r10 ^ r6;
    r6 = stack[1940];
    asm{ ror        r3, r3, #0x1f };
    stack[1942] = r3;
    r1 = r5 + r3 + r1;
    r5 = stack[1939];
    r1 = r1 + (lr ^ r4 ^ r12);
    r3 = stack[1946];
    asm{ ror        ip, ip, #0x2 };
    r1 = r1 + (ROR(r0, 0x1b));
    r2 = r3 ^ r5;
    r5 = stack[1938];
    r2 = r2 ^ r11 ^ r6;
    r6 = stack[1948];
    asm{ ror        r2, r2, #0x1f };
    stack[1939] = r2;
    r2 = r4 + stack[1939] + 0xca62c1d6;
    r4 = stack[1947];
    r3 = r12 ^ lr ^ r0;
    asm{ ror        r0, r0, #0x2 };
    r2 = (ROR(r1, 0x1b)) + r2 + r3;
    r3 = r4 ^ r5 ^ r6 ^ stack[1941];
    r4 = r0 ^ r12 ^ r1;
    asm{ ror        r1, r1, #0x2 };
    asm{ ror        r3, r3, #0x1f };
    stack[1938] = r3;
    r6 = 0xca62c1d6;
    r3 = (ROR(r2, 0x1b)) + r4 + lr + stack[1938] + 0xca62c1d6;
    lr = r8 ^ stack[1946] ^ stack[1943] ^ stack[1942];
    r4 = r1 ^ r0 ^ r2;
    r5 = stack[1944];
    asm{ ror        r2, r2, #0x2 };
    asm{ ror        lr, lr, #0x1f };
    r6 = (ROR(r3, 0x1b)) + r4 + r12 + lr + r6;
    r12 = r7 ^ stack[1947] ^ r5 ^ stack[1939];
    r4 = 0xca62c1d6;
    r5 = r2 ^ r1 ^ r3;
    asm{ ror        r3, r3, #0x2 };
    asm{ ror        ip, ip, #0x1f };
    r4 = r0 + r12 + r4;
    r0 = s0 ^ r8;
    r8 = 0xca62c1d6;
    r4 = (ROR(r6, 0x1b)) + r4 + r5;
    r0 = r0 ^ stack[1945] ^ stack[1938];
    r5 = r3 ^ r2 ^ r6;
    asm{ ror        r6, r6, #0x2 };
    asm{ ror        r0, r0, #0x1f };
    r8 = r5 + r1 + r0 + r8;
    r5 = 0xca62c1d6;
    r8 = r8 + (ROR(r4, 0x1b));
    r1 = r10 ^ r7 ^ stack[1940] ^ lr;
    r7 = r6 ^ r3 ^ r4;
    asm{ ror        r4, r4, #0x2 };
    asm{ ror        r1, r1, #0x1f };
    r5 = (ROR(r8, 0x1b)) + r7 + r2 + r1 + r5;
    r2 = r11 ^ s0 ^ stack[1941];
    s0 = 0xca62c1d6;
    r2 = r2 ^ r12;
    r7 = r4 ^ r6 ^ r8;
    asm{ ror        r8, r8, #0x2 };
    asm{ ror        r2, r2, #0x1f };
    s0 = (ROR(r5, 0x1b)) + r7 + r3 + r2 + s0;
    r7 = 0xca62c1d6;
    r3 = stack[1948] ^ r10 ^ stack[1942] ^ r0;
    r10 = r8 ^ r4 ^ r5;
    asm{ ror        r5, r5, #0x2 };
    asm{ ror        r3, r3, #0x1f };
    r6 = r10 + r6 + r3 + r7;
    r7 = 0xca62c1d6;
    r6 = r6 + (ROR(s0, 0x1b));
    r10 = stack[1943] ^ r11 ^ stack[1939] ^ r1;
    r11 = r5 ^ r8 ^ s0;
    asm{ ror        sb, sb, #0x2 };
    asm{ ror        sl, sl, #0x1f };
    r4 = (ROR(r6, 0x1b)) + r11 + r4 + r10 + r7;
    r11 = 0xca62c1d6;
    r7 = stack[1944] ^ stack[1948] ^ stack[1938] ^ r2;
    asm{ ror        r7, r7, #0x1f };
    stack[1946] = r7;
    r8 = r8 + r7 + r11;
    r7 = stack[1945];
    r8 = r8 + (s0 ^ r5 ^ r6);
    r11 = stack[1943];
    asm{ ror        r6, r6, #0x2 };
    r8 = r8 + (ROR(r4, 0x1b));
    r7 = r7 ^ r11;
    r11 = 0xca62c1d6;
    lr = r7 ^ lr;
    r7 = stack[1940];
    lr = lr ^ r3;
    asm{ ror        lr, lr, #0x1f };
    r5 = r5 + lr + r11;
    r11 = r6 ^ s0 ^ r4;
    asm{ ror        r4, r4, #0x2 };
    r5 = (ROR(r8, 0x1b)) + r5 + r11;
    r11 = r4 ^ r6 ^ r8;
    r10 = r7 ^ stack[1944] ^ r12 ^ r10;
    r12 = 0xca62c1d6;
    asm{ ror        r8, r8, #0x2 };
    asm{ ror        sl, sl, #0x1f };
    s0 = (ROR(r5, 0x1b)) + r11 + s0 + r10 + r12;
    r11 = stack[1942];
    r7 = stack[1941] ^ stack[1945] ^ r0 ^ stack[1946];
    r0 = 0xca62c1d6;
    r12 = r8 ^ r4;
    asm{ ror        r7, r7, #0x1f };
    r12 = r12 ^ r5;
    r0 = r7 + r0;
    asm{ ror        r5, r5, #0x2 };
    r6 = (ROR(s0, 0x1b)) + r12 + r0 + r6;
    r12 = 0xca62c1d6;
    r0 = stack[1941];
    lr = r11 ^ stack[1940] ^ r1 ^ lr;
    r1 = r5 ^ r8 ^ s0;
    asm{ ror        sb, sb, #0x2 };
    asm{ ror        lr, lr, #0x1f };
    r4 = r1 + r4 + lr + r12;
    r2 = stack[1939] ^ r0 ^ r2;
    r0 = 0xca62c1d6;
    r10 = r2 ^ r10;
    r1 = stack[1938];
    r2 = s0 ^ r5;
    r4 = r4 + (ROR(r6, 0x1b));
    asm{ ror        sl, sl, #0x1f };
    r2 = r2 ^ r6;
    r0 = r10 + r0;
    asm{ ror        r6, r6, #0x2 };
    r8 = r0 + r8;
    r0 = sp + 0x54;
    r8 = r8 + r2;
    r2 = 0xca62c1d6;
    r7 = r1 ^ r11 ^ r3 ^ r7;
    r3 = stack[1937];
    r11 = stack[1949];
    r8 = r8 + (ROR(r4, 0x1b));
    asm{ ror        r7, r7, #0x1f };
    r2 = r7 + r3 + r2;
    *stack[1955] = (ROR(r8, 0x1b)) + (r6 ^ s0 ^ r4) + r2 + r5;
    *(stack[1955] + 0x4) = r8 + *(r11 + 0x4);
    *(stack[1955] + 0x8) = *(r11 + 0x8) + (ROR(r4, 0x2));
    *(stack[1955] + 0xc) = r6 + *(r11 + 0xc);
    r3 = *(r11 + 0x10);
    *(stack[1955] + 0x10) = s0 + r3;
    loc_ffffffff8f64adc0(r0, 0x140, r2, r3, stack[1936], stack[1937], stack[1938], stack[1939], stack[1940]);
    r0 = 0x0;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

