    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    r3 = *0x8f7112f4;
    stack[2041] = r3;
    if (r1 > 0x1) {
            if (r1 != 0x2) {
                    r3 = 0x0;
            }
            if (CPU_FLAGS & E) {
                    r3 = 0x1;
            }
            if (CPU_FLAGS & NE) {
                    r2 = 0xa;
            }
            if (CPU_FLAGS & E) {
                    r2 = 0x8;
            }
    }
    else {
            r3 = 0x0;
            r2 = 0x4;
    }
    r6 = r2 & 0x3;
    r12 = 0x0;
    r8 = r2 + r6;
    r2 = *r0;
    r8 = SAR(r8 + 0x3, (r8 + 0x3) / 0x4);
    r4 = (r4 << r8 * 0x4) + 0x64;
    do {
            COND = r3 == 0x0;
            r5 = *(r4 + 0x1a98004);
            asm{ rev        r5, r5 };
            if (!COND) {
                    r3 = zero_extend_32(r5);
                    if ((r3 == 0x1c) || (r3 == 0x1a)) {
                            *r2 = r5;
                            r2 = r2 + 0x4;
                    }
            }
            else {
                    *r2 = r5;
                    r2 = r2 + 0x4;
            }
            r12 = r12 + 0x1;
            r4 = r4 - 0x4;
            if (r12 < r8) {
                    r3 = 0x0;
            }
    } while (CPU_FLAGS & L);
    if (r1 > 0x2) {
            r3 = 0x0;
    }
    if (CPU_FLAGS & G) {
            do {
                    r2 = *r0;
                    *(r2 + r3) = *(0x4 + r3 + r2 + r6);
                    r3 = r3 + 0x1;
            } while (r3 != r1);
    }
    r0 = r1;
    if (stack[2041] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

