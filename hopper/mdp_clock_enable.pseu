    sp = sp - 0x4 - 0x4 - 0x4 - 0x14;
    r4 = lr;
    r3 = *0x8f7112f4;
    stack[2043] = r3;
    r0 = loc_ffffffff8f60cdc4("mdp_ahb_clk", 0x0, 0x1, r3, stack[2040]);
    COND = r2 == 0x0;
    if (!COND) {
            loc_ffffffff8f656968(0x0 ^ 0xffffffff, "failed to set mdp_ahb_clk ret = %d\n");
            loc_ffffffff8f6484ac(r4, "ASSERT FAILED at (%s:%d): %s\n", "platform/msm8916/acpuclock.c", 0xcd, 0x8f69c66f);
    }
    loc_ffffffff8f601d78() == 0x0;
    r0 = loc_ffffffff8f60cdc4();
    if (r0 != 0x0) {
            loc_ffffffff8f656968(0x0 ^ 0xffffffff, "failed to set mdp_clk_src ret = %d\n");
            loc_ffffffff8f6484ac(r4, "ASSERT FAILED at (%s:%d): %s\n", "platform/msm8916/acpuclock.c", 0xd9, 0x8f69c66f);
    }
    r0 = loc_ffffffff8f60cdc4("mdss_vsync_clk", 0x0, 0x1);
    COND = r2 == 0x0;
    if (!COND) {
            loc_ffffffff8f656968(0x0 ^ 0xffffffff, "failed to set mdss vsync clk ret = %d\n");
            loc_ffffffff8f6484ac(r4, "ASSERT FAILED at (%s:%d): %s\n", "platform/msm8916/acpuclock.c", 0xe0, 0x8f69c66f);
    }
    r0 = loc_ffffffff8f60cdc4("mdss_mdp_clk", 0x0, 0x1);
    COND = r2 == 0x0;
    if (!COND) {
            loc_ffffffff8f656968(0x0 ^ 0xffffffff, "failed to set mdp_clk ret = %d\n");
            r0 = loc_ffffffff8f6484ac(r4, "ASSERT FAILED at (%s:%d): %s\n", "platform/msm8916/acpuclock.c", 0xe7, 0x8f69c66f);
    }
    if (stack[2043] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

