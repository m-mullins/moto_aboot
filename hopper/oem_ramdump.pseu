    r2 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x94;
    r7 = lr;
    r4 = arg0;
    r6 = arg1;
    r3 = *0x8f7112f4;
    stack[2037] = r3;
    loc_ffffffff8f673228(arg0, arg1, r2, r3, stack[2002]) != 0x0;
    if (CPU_FLAGS & NE) goto loc_8f627ce4;

loc_8f62775c:
    r5 = r4 - 0x1;
    r4 = r6 + r4 * 0x4;
    goto loc_8f627764;

loc_8f627764:
    if (r5 <= 0x0) goto loc_8f627784;

loc_8f62776c:
    r4 = r4 + 0xfffffffffffffffc;
    r3 = *r4;
    r3 = *r3;
    if (r3 != 0x0) goto loc_8f627788;

loc_8f62777c:
    r5 = r5 - 0x1;
    goto loc_8f627764;

loc_8f627788:
    r4 = *(r6 + 0x4);
    if (loc_ffffffff8f64b0ac(r4, "status") != 0x0) goto loc_8f627990;

loc_8f6277a0:
    r4 = loc_ffffffff8f6359f4();
    if (loc_ffffffff8f6364dc() != 0x0) goto loc_8f6277d8;

loc_8f6277b4:
    loc_ffffffff8f62192c(0x8f683451, "RAM dump currently disabled");
    loc_ffffffff8f62192c(0x8f683451, "  (run 'fastboot oem ramdump enable' to enable)");
    goto loc_8f627988;

loc_8f627988:
    loc_ffffffff8f62192c();
    goto loc_8f627d68;

loc_8f627d68:
    r0 = 0x1;
    goto loc_8f627d6c;

loc_8f627d6c:
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f6277d8:
    if (r4 == 0x0) {
            r2 = "app/mbm/fastboot_oem.c";
            r3 = 0x7f9;
            loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", r2, r3, 0x8f69ceba);
    }
    loc_ffffffff8f62192c(0x8f683451, "RAM dump is enabled");
    r1 = 0x8f6a4e20;
    loc_ffffffff8f62192c(0x8f683451, r1);
    r0 = loc_ffffffff8f635424();
    if (r0 == 0x0) {
            r12 = *(r4 + 0x20);
    }
    if (CPU_FLAGS & E) {
            r1 = r4;
    }
    if (CPU_FLAGS & E) {
            r2 = r0;
    }
    if (CPU_FLAGS & E) {
            r3 = r0;
    }
    if (CPU_FLAGS & E) goto loc_8f627894;

loc_8f627830:
    r0 = loc_ffffffff8f61a7d0();
    loc_ffffffff8f62192c(0x8f683451, "To be able to collect a ramdump, please make sure you have an SD card inserted with at least %dMB of available space on it", r2 >> r0 / 0x100000);
    loc_ffffffff8f62192c(0x8f683451, 0x8f6a4e20);
    loc_ffffffff8f62192c(0x8f683451, 0x8f685ade);
    loc_ffffffff8f62192c(0x8f683451, 0x8f6a4e20);
    loc_ffffffff8f62192c(0x8f683451, "If you think you've already got a RAM dump, check under the /ram_dump folder on your SD card to view or extract the RAM dump files. You can do this by connecting your device via USB and look for the storage drive that is enumerated by the device to your PCâ€¦");
    goto loc_8f627974;

loc_8f627974:
    loc_ffffffff8f62192c(0x8f683451, 0x8f6a4e20);
    goto loc_8f627988;

loc_8f627894:
    while (r3 != r12) {
            r0 = *(r1 + 0xa8);
            if (((r0 & 0x2) == 0x0) && ((r0 & 0x1) != 0x0)) {
                    r2 = r2 + 0x1;
            }
            r3 = r3 + 0x1;
            r1 = r1 + 0x68;
    }
    if (r2 == 0x0) goto loc_8f627d68;

loc_8f6278a4:
    r5 = r4 + 0xc0;
    r6 = 0x0;
    loc_ffffffff8f62192c(0x8f683451, "%d dump files available:");
    loc_ffffffff8f62192c(0x8f683451, "  (run 'fastboot oem ramdump pull' to retrieve)");
    loc_ffffffff8f62192c(0x8f683451, "  (run 'fastboot oem ramdump clear' to discard)");
    loc_ffffffff8f62192c(0x8f683451, 0x8f6a4e20);
    while (r6 < *(r4 + 0x20)) {
            r3 = *(r5 + 0xffffffffffffffe8);
            if (((r3 & 0x2) == 0x0) && ((r3 & 0x1) != 0x0)) {
                    r3 = *(r5 + 0xfffffffffffffffc);
                    asm{ ubfx       r2, r3, #0x0, #0xa };
                    if (CPU_FLAGS & E) {
                            r2 = 0x8f685458;
                    }
                    if (CPU_FLAGS & NE) {
                            r2 = "bytes";
                    }
                    r2 = r5;
                    loc_ffffffff8f62192c();
            }
            r6 = r6 + 0x1;
            r5 = r5 + 0x68;
    }
    loc_ffffffff8f62192c(0x8f683451, 0x8f6a4e20);
    if (*(r4 + 0x24) != 0x0) {
            r0 = loc_ffffffff8f63639c();
            loc_ffffffff8f62192c(0x8f683451, "Timestamp: %s", r0);
    }
    r0 = loc_ffffffff8f636410();
    loc_ffffffff8f62192c(0x8f683451, "Reason: %s", r0);
    goto loc_8f627974;

loc_8f627990:
    if (loc_ffffffff8f64b0ac(r4, 0x8f685dfd) != 0x0) goto loc_8f6279ac;

loc_8f6279a4:
    loc_ffffffff8f625b90();
    goto loc_8f627d68;

loc_8f6279ac:
    if (loc_ffffffff8f64b0ac(r4, "enable") != 0x0) goto loc_8f6279f0;

loc_8f6279c0:
    if (loc_ffffffff8f6364dc() != 0x0) goto loc_8f627d68;

loc_8f6279cc:
    if (loc_ffffffff8f635424() == 0x0) goto loc_8f6279e0;

loc_8f6279d8:
    r0 = loc_ffffffff8f636b00();
    goto loc_8f627a2c;

loc_8f627a2c:
    if (r0 != 0x0) {
            r0 = 0x3;
    }
    if (CPU_FLAGS & E) {
            r0 = 0x1;
    }
    goto loc_8f627d6c;

loc_8f6279e0:
    if (loc_ffffffff8f627640() != 0x0) goto loc_8f6279d8;
    goto loc_8f627d68;

loc_8f6279f0:
    if (loc_ffffffff8f64b0ac(r4, "disable") != 0x0) goto loc_8f627a4c;

loc_8f627a04:
    if (loc_ffffffff8f6364dc() == 0x0) goto loc_8f627d68;

loc_8f627a10:
    if (loc_ffffffff8f635424() == 0x0) goto loc_8f627a3c;

loc_8f627a1c:
    loc_ffffffff8f62192c(0x8f683451, "Please wait...");
    r0 = loc_ffffffff8f636604();
    goto loc_8f627a2c;

loc_8f627a3c:
    if (loc_ffffffff8f627640() != 0x0) goto loc_8f627a1c;
    goto loc_8f627d68;

loc_8f627a4c:
    if (loc_ffffffff8f64b0ac(r4, "clear") != 0x0) goto loc_8f627a80;

loc_8f627a60:
    if (loc_ffffffff8f635424() == 0x0) goto loc_8f627a78;

loc_8f627a6c:
    loc_ffffffff8f6247c0();
    goto loc_8f627a70;

loc_8f627a70:
    r0 = 0x3;
    goto loc_8f627d6c;

loc_8f627a78:
    r0 = loc_ffffffff8f6356d0();
    goto loc_8f627d50;

loc_8f627d50:
    if (r0 == 0x0) {
            r0 = 0x1;
    }
    if (CPU_FLAGS & NE) {
            r0 = 0x3;
    }
    goto loc_8f627d6c;

loc_8f627a80:
    if (loc_ffffffff8f64b0ac(r4, 0x8f685e16) != 0x0) goto loc_8f627aa8;

loc_8f627a94:
    if (loc_ffffffff8f635424() == 0x0) {
            loc_ffffffff8f624814();
    }
    else {
            loc_ffffffff8f6247c0();
    }
    goto loc_8f627a70;

loc_8f627aa8:
    if ((loc_ffffffff8f64b0ac(r4, 0x8f685e11) == 0x0) || (loc_ffffffff8f64b0ac(r4, "ramdump-pull") == 0x0)) goto loc_8f627ad0;

loc_8f627cbc:
    if (loc_ffffffff8f64b0ac(r4, "__trigger") != 0x0) goto loc_8f627d38;

loc_8f627cd0:
    if (loc_ffffffff8f6364dc() != 0x0) goto loc_8f627cec;

loc_8f627ce4:
    loc_ffffffff8f62192c();
    goto loc_8f627a70;

loc_8f627cec:
    if (loc_ffffffff8f63651c() == 0x0) {
            loc_ffffffff8f62192c(0x8f683451, "Rebooting for RAM dump test...");
            loc_ffffffff8f62192c(0x8f683451, "  (expect a few seconds of screen black-out)");
            loc_ffffffff8f621534(0x8f6833d5, 0x8f6a4e20);
            loc_ffffffff8f60c558(0x64);
            loc_ffffffff8f6061e4();
            loc_ffffffff8f60dd74(0x77665507);
            r0 = 0x2;
    }
    else {
            r0 = 0x3;
    }
    goto loc_8f627d6c;

loc_8f627d38:
    if (loc_ffffffff8f64b0ac(r4, "__prune") != 0x0) goto loc_8f627d60;

loc_8f627d4c:
    r0 = loc_ffffffff8f636724();
    goto loc_8f627d50;

loc_8f627d60:
    loc_ffffffff8f625b90();
    goto loc_8f627a70;

loc_8f627ad0:
    s0 = loc_ffffffff8f6359f4();
    if (loc_ffffffff8f635424() != 0x0) goto loc_8f627a6c;

loc_8f627ae4:
    r0 = loc_ffffffff8f6364dc();
    if (r0 == 0x0) {
            r0 = 0x8f683451;
    }
    if (CPU_FLAGS & E) goto loc_8f627ce4;

loc_8f627af8:
    if (s0 == 0x0) {
            r0 = loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "app/mbm/fastboot_oem.c", 0x8a6, 0x8f69ceba);
    }
    r12 = *(r0 + 0x20);
    r3 = 0x0;
    r1 = s0;
    r2 = r3;
    while (r2 != r12) {
            r0 = *(r1 + 0xa8);
            if (((r0 & 0x2) == 0x0) && ((r0 & 0x1) != 0x0)) {
                    r3 = r3 + 0x1;
            }
            r2 = r2 + 0x1;
            r1 = r1 + 0x68;
    }
    if (r3 == 0x0) {
            r0 = 0x8f683451;
    }
    if (CPU_FLAGS & E) goto loc_8f627ce4;

loc_8f627b64:
    if (r5 <= 0x1) {
            r10 = 0x1;
    }
    if (!CPU_FLAGS & LE) {
            r0 = *(r6 + 0x8);
            r0 = loc_ffffffff8f64b0ac(r0, 0x8f683f68);
            COND = r10 < 0x0;
            if (COND) {
                    r10 = 0x0;
            }
    }
    r7 = 0x0;
    r5 = sp + 0x4b & !0x3f;
    r4 = s0 + 0xc0;
    r11 = r7;
    goto loc_8f627b98;

loc_8f627b98:
    if (r11 >= *(r0 + 0x20)) goto loc_8f627c60;

loc_8f627ba4:
    r3 = *(r4 + 0xffffffffffffffe8);
    if (((r3 & 0x2) != 0x0) || ((r3 & 0x1) == 0x0)) goto loc_8f627c54;

loc_8f627bb8:
    if (r10 != 0x0) goto loc_8f627bd8;

loc_8f627bc0:
    r0 = loc_ffffffff8f64b470(r4, *(r6 + 0x8), 0x18);
    if (r0 != 0x0) goto loc_8f627c54;

loc_8f627bd8:
    if (r7 == 0x0) {
            loc_ffffffff8f621534(0x8f6833d5, 0x8f6a4e20);
    }
    r0 = loc_ffffffff8f64b354(r4);
    loc_ffffffff8f64aa80(r5, "DUMP%04X%s", r0, r4);
    if ((loc_ffffffff8f62d948(r5, loc_ffffffff8f64b354(r5)) < 0x0) || (loc_ffffffff8f62d7e8(r5, 0x4) < 0x0)) goto loc_8f627a70;

loc_8f627c38:
    asm{ ldrd       r0, r1, [r4, #-0x10] };
    r0 = loc_ffffffff8f625c6c();
    if (r0 != 0x0) goto loc_8f627a70;

loc_8f627c50:
    r7 = r7 + 0x1;
    goto loc_8f627c54;

loc_8f627c54:
    r11 = r11 + 0x1;
    r4 = r4 + 0x68;
    goto loc_8f627b98;

loc_8f627c60:
    r10 = r10 ^ 0x1;
    if (r7 != 0x0) {
            r7 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r7 = r10 & 0x1;
    }
    if (r7 == 0x0) goto loc_8f627c8c;

loc_8f627c78:
    loc_ffffffff8f62192c(0x8f683451, "%s: does not exist", *(r6 + 0x8));
    goto loc_8f627a70;

loc_8f627c8c:
    loc_ffffffff8f64aa80(r5, "DUMPDONE");
    if (loc_ffffffff8f62d948(r5, loc_ffffffff8f64b354(r5)) < 0x0) goto loc_8f627a70;

loc_8f627cb4:
    loc_ffffffff8f636478();
    goto loc_8f627d68;

loc_8f627784:
    if (CPU_FLAGS & E) goto loc_8f6277a0;

