    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x314;
    r1 = r0;
    lr = 0x0;
    stack[2037] = *0x8f7112f4;
    do {
            r4 = *(r0 + lr);
            r8 = 0x0;
            r2 = *(r1 + 0x7);
            r1 = r1 + 0x8;
            s0 = s0 << r4 * 0x1000000;
            r4 = *(r1 + 0xfffffffffffffff9);
            r2 = r2 | r8;
            r3 = 0x0 | s0;
            r7 = r7 << r4 * 0x10000;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_318] };
            r2 = r2 | r4;
            r4 = *(r1 + 0xfffffffffffffffa);
            r3 = r3 | r5;
            r7 = r7 << r4 * 0x100;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_310] };
            r3 = r3 | r5;
            r5 = *(r1 + 0xfffffffffffffffb);
            r2 = r2 | r4;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_308] };
            r2 = r2 | r4;
            r4 = *(r1 + 0xfffffffffffffffc);
            r3 = r3 | r5;
            r7 = r7 << r4 * 0x1000000;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_330] };
            r2 = r2 | r4;
            r4 = *(r1 + 0xfffffffffffffffd);
            r3 = r3 | r5;
            r7 = r7 << r4 * 0x10000;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_328] };
            r2 = r2 | r4;
            r4 = *(r1 + 0xfffffffffffffffe);
            r3 = r3 | r5;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_320] };
            r7 = lr + 0x88;
            lr = lr + 0x8;
            COND = lr != 0x80;
            r3 = r3 | r5;
            r5 = sp;
            r2 = r2 | r4;
            asm{ strd       r2, r3, [r7, r5] };
    } while (COND);
    lr = sp + 0x88;
    r7 = 0x0;
    do {
            r11 = r7 + 0x88;
            r10 = sp;
            s0 = *(lr + 0x8);
            r7 = r7 + 0x8;
            asm{ ldrd       r2, r3, [lr, #0x48] };
            lr = lr + 0x8;
            asm{ ldrd       r0, r1, [fp, sl] };
            r8 = *(lr + 0x4);
            r0 = r0 + r2;
            r5 = *(lr + 0x68);
            r1 = r1 + r3 + CARRY(FLAGS);
            r4 = *(lr + 0x6c);
            r3 = (((r3 >> s0 / 0x100 | r8 * 0x1000000) >> r8 / 0x100 | s0 * 0x1000000) >> s0 / 0x2 | r8 * 0x80000000) >> r8 / 0x2 | s0 * 0x80000000;
            asm{ ldrd       sl, fp, [sp, #0x338 + var_2F8] };
            s0 = s0 >> s0 / 0x80;
            asm{ ldrd       r2, r3, [sp, #0x338 + var_300] };
            r3 = r3 ^ r11;
            r11 = s0 | r8 * 0x2000000;
            r8 = r8 >> r8 / 0x80;
            r2 = r2 ^ r10;
            asm{ ldrd       r8, sb, [sp, #0x338 + var_338] };
            r2 = r2 ^ r8;
            r0 = r0 + r2;
            r1 = r1 + (r3 ^ s0) + CARRY(FLAGS);
            r3 = (((r3 ^ s0) << r5 * 0x8 | r4 / 0x20000000) << r4 * 0x8 | r5 / 0x20000000) >> r5 / 0x80000 | r4 * 0x2000;
            r3 = r3 >> r4 / 0x80000 | r5 * 0x2000;
            asm{ ldrd       sl, fp, [sp, #0x338 + var_2E8] };
            asm{ ldrd       r2, r3, [sp, #0x338 + var_2F0] };
            r2 = r2 ^ r10;
            r10 = r10 >> r5 / 0x40 | r4 * 0x4000000;
            r3 = r3 ^ r11;
            r11 = r11 >> r4 / 0x40;
            r2 = (r2 ^ r10) + r0;
            r3 = (r3 ^ r11) + r1 + CARRY(FLAGS);
            COND = r7 != 0x200;
            asm{ strd       r2, r3, [lr, #0x78] };
    } while (COND);
    asm{ ldrd       r0, r1, [ip] };
    lr = 0x0;
    asm{ ldrd       r2, r3, [ip, #0x8] };
    asm{ ldrd       r8, sb, [ip, #0x18] };
    asm{ ldrd       sl, fp, [ip, #0x28] };
    asm{ strd       r0, r1, [sp, #0x338 + var_318] };
    asm{ strd       r2, r3, [sp, #0x338 + var_330] };
    asm{ ldrd       r4, r5, [ip, #0x10] };
    asm{ strd       r8, sb, [sp, #0x338 + var_310] };
    asm{ strd       sl, fp, [sp, #0x338 + var_328] };
    asm{ ldrd       r0, r1, [ip, #0x30] };
    asm{ ldrd       r2, r3, [ip, #0x38] };
    asm{ ldrd       r8, sb, [ip, #0x20] };
    asm{ ldrd       sl, fp, [sp, #0x338 + var_318] };
    asm{ strd       r4, r5, [sp, #0x338 + var_338] };
    asm{ strd       r0, r1, [sp, #0x338 + var_320] };
    asm{ strd       r2, r3, [sp, #0x338 + var_308] };
    do {
            asm{ ldrd       r0, r1, [sp, #0x338 + var_338] };
            asm{ ldrd       r4, r5, [sp, #0x338 + var_330] };
            asm{ ldrd       r2, r3, [sp, #0x338 + var_338] };
            r0 = (r0 ^ r10) & r4;
            r3 = r3 & r11 ^ (r1 ^ r11) & r5;
            r2 = r2 & r10 ^ r0;
            r1 = ((((r1 ^ r11) & r5) << r10 * 0x40000000 | r11 / 0x4) << r11 * 0x40000000 | r10 / 0x4) >> r10 / 0x10000000 | r11 * 0x10;
            r1 = r1 >> r11 / 0x10000000 | r10 * 0x10;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_2D8] };
            asm{ ldrd       r0, r1, [sp, #0x338 + var_2E0] };
            r0 = r0 ^ r4;
            r1 = r1 ^ r5;
            r4 = (r4 << r10 * 0x2000000 | r11 / 0x80) << r11 * 0x2000000 | r10 / 0x80;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_2D0] };
            r0 = r0 ^ r4;
            r1 = r1 ^ r5;
            r4 = r2 + r0;
            r2 = lr + 0x88;
            asm{ strd       r4, r5, [sp, #0x338 + var_300] };
            r5 = sp;
            asm{ ldrd       r0, r1, [r2, r5] };
            asm{ ldrd       r2, r3, [lr, r7] };
            lr = lr + 0x8;
            r0 = r0 + r2;
            r1 = r1 + r3 + CARRY(FLAGS);
            r3 = (((r3 >> r8 / 0x40000 | s0 * 0x4000) >> s0 / 0x40000 | r8 * 0x4000) >> r8 / 0x4000 | s0 * 0x40000) >> s0 / 0x4000 | r8 * 0x40000;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_2C0] };
            asm{ ldrd       r2, r3, [sp, #0x338 + var_2C8] };
            r2 = r2 ^ r4;
            r3 = r3 ^ r5;
            r4 = (r4 << r8 * 0x800000 | s0 / 0x200) << s0 * 0x800000 | r8 / 0x200;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_2B8] };
            r3 = r3 ^ r5;
            r2 = (r2 ^ r4) + r0;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_320] };
            r3 = r3 + r1 + CARRY(FLAGS);
            asm{ ldrd       r0, r1, [sp, #0x338 + var_328] };
            r4 = r4 & !r8;
            r5 = r5 & !s0;
            r1 = r1 & s0 ^ r5;
            r0 = (r0 & r8 ^ r4) + r2;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_310] };
            r1 = r1 + r3 + CARRY(FLAGS);
            asm{ ldrd       r2, r3, [sp, #0x338 + var_308] };
            r0 = r0 + r2;
            r1 = r1 + r3 + CARRY(FLAGS);
            asm{ ldrd       r2, r3, [sp, #0x338 + var_300] };
            r4 = r4 + r0;
            r5 = r5 + r1 + CARRY(FLAGS);
            r0 = r0 + r2;
            r1 = r1 + r3 + CARRY(FLAGS);
            if (lr == 0x280) {
                break;
            }
            asm{ ldrd       r2, r3, [sp, #0x338 + var_320] };
            asm{ strd       r2, r3, [sp, #0x338 + var_308] };
            asm{ ldrd       r2, r3, [sp, #0x338 + var_328] };
            asm{ strd       r8, sb, [sp, #0x338 + var_328] };
            r8 = r4;
            s0 = r5;
            asm{ ldrd       r4, r5, [sp, #0x338 + var_338] };
            asm{ strd       r2, r3, [sp, #0x338 + var_320] };
            asm{ ldrd       r2, r3, [sp, #0x338 + var_330] };
            asm{ strd       r4, r5, [sp, #0x338 + var_310] };
            asm{ strd       sl, fp, [sp, #0x338 + var_330] };
            r10 = r0;
            asm{ strd       r2, r3, [sp, #0x338 + var_338] };
            r11 = r1;
    } while (true);
    r3 = *0x8f7112f4;
    r0 = 0x0;
    asm{ ldrd       r2, r3, [sp, #0x338 + var_318] };
    r0 = r0 + r2;
    r1 = r1 + r3 + CARRY(FLAGS);
    asm{ strd       r0, r1, [r6] };
    asm{ ldrd       r2, r3, [ip, #0x8] };
    asm{ ldrd       r0, r1, [sp, #0x338 + var_338] };
    r2 = r2 + r10;
    r3 = r3 + r11 + CARRY(FLAGS);
    asm{ ldrd       sl, fp, [sp, #0x338 + var_330] };
    asm{ strd       r2, r3, [r6, #0x8] };
    asm{ ldrd       r2, r3, [ip, #0x10] };
    r2 = r2 + r10;
    r3 = r3 + r11 + CARRY(FLAGS);
    asm{ strd       r2, r3, [r6, #0x10] };
    asm{ ldrd       r2, r3, [ip, #0x18] };
    r2 = r2 + r0;
    r0 = sp + 0x88;
    r3 = r3 + r1 + CARRY(FLAGS);
    asm{ strd       r2, r3, [r6, #0x18] };
    asm{ ldrd       r2, r3, [ip, #0x20] };
    r1 = lr;
    r2 = r2 + r4;
    r3 = r3 + r5 + CARRY(FLAGS);
    asm{ strd       r2, r3, [r6, #0x20] };
    asm{ ldrd       r2, r3, [ip, #0x28] };
    asm{ ldrd       r4, r5, [sp, #0x338 + var_328] };
    r2 = r2 + r8;
    r3 = r3 + s0 + CARRY(FLAGS);
    asm{ strd       r2, r3, [r6, #0x28] };
    asm{ ldrd       r2, r3, [ip, #0x30] };
    asm{ ldrd       r8, sb, [sp, #0x338 + var_320] };
    r2 = r2 + r4;
    r3 = r3 + r5 + CARRY(FLAGS);
    asm{ strd       r2, r3, [r6, #0x30] };
    asm{ ldrd       r2, r3, [ip, #0x38] };
    r2 = r2 + r8;
    r3 = r3 + s0 + CARRY(FLAGS);
    asm{ strd       r2, r3, [r6, #0x38] };
    loc_ffffffff8f64adc0(r0, r1, r2, r3);
    r0 = 0x0;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

