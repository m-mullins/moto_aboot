    r1 = arg1;
    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x3c;
    s0 = r0;
    r10 = r1;
    stack[2027] = arg2;
    r7 = arg3;
    r8 = 0x0;
    stack[2037] = *0x8f7112f4;
    goto loc_8f64a4c4;

loc_8f64a4c4:
    r3 = *stack[2027];
    if (r3 == 0x0) goto loc_8f64a9b4;

loc_8f64a4d4:
    r2 = stack[2027];
    if (r3 == 0x25) {
            r1 = 0x0;
    }
    r2 = r2 + 0x1;
    if (CPU_FLAGS & E) {
            r6 = r1;
    }
    stack[2027] = r2;
    if (CPU_FLAGS & E) {
            r0 = 0xa;
    }
    if (CPU_FLAGS & NE) goto loc_8f64a614;

loc_8f64a4f4:
    r3 = *stack[2027];
    r2 = stack[2027] + 0x1;
    stack[2027] = r2;
    if (r3 == 0x0) goto loc_8f64a9b4;

loc_8f64a508:
    if (r3 == 0x63) goto loc_8f64a634;

loc_8f64a510:
    if (CPU_FLAGS & A) goto loc_8f64a598;

loc_8f64a514:
    if (r3 == 0x2e) goto loc_8f64a4f4;

loc_8f64a51c:
    if (CPU_FLAGS & A) goto loc_8f64a554;

loc_8f64a520:
    if (r3 == 0x25) goto loc_8f64a614;

loc_8f64a528:
    if (CPU_FLAGS & A) goto loc_8f64a53c;

loc_8f64a52c:
    if (r3 != 0x23) goto loc_8f64a87c;

loc_8f64a534:
    r6 = r6 | 0x20;
    goto loc_8f64a4f4;

loc_8f64a87c:
    *r0 = 0x25;
    r2 = r8 + 0x2;
    if (r2 != r10) goto loc_8f64a89c;

loc_8f64a890:
    r8 = r8 + 0x1;
    goto loc_8f64a9b4;

loc_8f64a9b4:
    *r0 = 0x0;
    r0 = r8;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

loc_8f64a89c:
    r1 = s0 + 0x2;
    *(r0 + 0x1) = r3;
    CMP(r8 + 0x3, r10);
    s0 = r1;
    r8 = r2;
    goto loc_8f64a8b4;

loc_8f64a8b4:
    if (CPU_FLAGS & NE) goto loc_8f64a4c4;
    goto loc_8f64a9b4;

loc_8f64a53c:
    if (r3 == 0x2b) goto loc_8f64a680;

loc_8f64a544:
    if (r3 != 0x2d) goto loc_8f64a87c;

loc_8f64a54c:
    r6 = r6 | 0x200;
    goto loc_8f64a4f4;

loc_8f64a680:
    r6 = r6 | 0x80;
    goto loc_8f64a4f4;

loc_8f64a614:
    *r0 = r3;
    CMP(r8 + 0x2, r10);
    s0 = s0 + 0x1;
    r8 = r8 + 0x1;
    goto loc_8f64a8b4;

loc_8f64a554:
    if (r3 == 0x44) goto loc_8f64a698;

loc_8f64a55c:
    if (CPU_FLAGS & A) goto loc_8f64a580;

loc_8f64a560:
    r2 = r3 - 0x30;
    if (r2 > 0x9) goto loc_8f64a87c;

loc_8f64a56c:
    if (r1 == 0x0) {
            CMP(r3, 0x30);
    }
    if (CPU_FLAGS & E) {
            r6 = r6 | 0x400;
    }
    r1 = r2 + r0 * r1;
    goto loc_8f64a4f4;

loc_8f64a580:
    if (r3 == 0x55) goto loc_8f64a6ec;

loc_8f64a588:
    if (r3 == 0x58) {
            r6 = r6 | 0x40;
    }
    if (CPU_FLAGS & E) goto loc_8f64a758;
    goto loc_8f64a87c;

loc_8f64a758:
    if ((r6 & 0x2) != 0x0) {
            r7 = r7 + 0x7;
    }
    if (CPU_FLAGS & NE) {
            r3 = r7 & !0x7;
    }
    if (CPU_FLAGS & NE) {
            r7 = r3 + 0x8;
    }
    if (CPU_FLAGS & NE) {
            asm{ ldrdne     r4, r5, [r3] };
    }
    if (!CPU_FLAGS & NE) {
            r3 = r7 + 0x4;
            if ((r6 & 0x1) == 0x0) {
                    if ((r6 & 0x8) != 0x0) {
                            r4 = *r7;
                    }
                    if (!CPU_FLAGS & NE) {
                            if ((r6 & 0x4) != 0x0) {
                                    r4 = *r7;
                            }
                            if (!CPU_FLAGS & NE) {
                                    r4 = *r7;
                            }
                    }
            }
            else {
                    r4 = *r7;
            }
            r5 = 0x0;
            r7 = r3;
    }
    r3 = "0123456789ABCDEFlinux,phandle";
    r12 = 0x8f6a2072;
    if ((r6 & 0x40) != 0x0) {
            r12 = r3;
    }
    stack[2037] = 0x0;
    r3 = sp + 0x32;
    do {
            r0 = r4 & 0xf;
            r4 = r2 >> r4 / 0x10 | r5 * 0x10000000;
            r5 = r11 >> r5 / 0x10;
            r11 = r3;
            *r3 = *(r12 + r0);
            r3 = r3 + 0x1;
            COND = r2 != 0x0;
    } while (COND);
    if ((r6 & 0x20) == 0x0) goto loc_8f64a8bc;

loc_8f64a7f0:
    *r0 = 0x30;
    r3 = r8 + 0x2;
    if (r3 == r10) goto loc_8f64a890;

loc_8f64a804:
    r8 = r8 + 0x3;
    r2 = s0 + 0x2;
    if ((r6 & 0x40) == 0x0) {
            r0 = 0x78;
    }
    if (CPU_FLAGS & NE) {
            r0 = 0x58;
    }
    COND = r8 != r10;
    *(r0 + 0x1) = r0;
    r8 = r3;
    s0 = r2;
    if (COND) goto loc_8f64a8bc;
    goto loc_8f64a9b4;

loc_8f64a8bc:
    if ((r6 & 0x200) != 0x0) {
            r11 = r11 - r8;
    }
    if (CPU_FLAGS & NE) {
            r3 = r8;
    }
    if (CPU_FLAGS & E) goto loc_8f64a92c;

loc_8f64a8cc:
    r2 = *(r11 + r3);
    r0 = r3 - r8;
    if (r2 == 0x0) goto loc_8f64a8f8;

loc_8f64a8dc:
    *r0 = r2;
    r0 = r0 + 0x1;
    r2 = r3 + 0x1;
    if (r3 + 0x2 == r10) goto loc_8f64a9b0;

loc_8f64a8f0:
    r3 = r2;
    goto loc_8f64a8cc;

loc_8f64a9b0:
    r8 = r2;
    goto loc_8f64a9b4;

loc_8f64a8f8:
    r1 = s0 + r1;
    r8 = r3;
    goto loc_8f64a904;

loc_8f64a904:
    if (r1 - s0 < r0) goto loc_8f64a4c4;

loc_8f64a910:
    COND = r8 + 0x2 != r10;
    *r0 = 0x20;
    r0 = r0 + 0x1;
    r8 = r8 + 0x1;
    if (COND) goto loc_8f64a904;
    goto loc_8f64a9b4;

loc_8f64a92c:
    r0 = loc_ffffffff8f64b354(r11);
    r3 = r8;
    r1 = s0 + r1;
    if ((r6 & 0x400) == 0x0) {
            r2 = 0x20;
    }
    if (CPU_FLAGS & NE) {
            r2 = 0x30;
    }
    goto loc_8f64a950;

loc_8f64a950:
    r4 = r1 - s0;
    if (r4 < r0) goto loc_8f64a978;

loc_8f64a95c:
    *r0 = r2;
    r0 = r0 + 0x1;
    r8 = r8 + 0x1;
    if (r3 + 0x2 == r10) goto loc_8f64a9b4;

loc_8f64a970:
    r3 = r8;
    goto loc_8f64a950;

loc_8f64a978:
    r11 = r11 - r8;
    goto loc_8f64a97c;

loc_8f64a97c:
    r3 = *(r11 + r8);
    if (r3 == 0x0) goto loc_8f64a4c4;

loc_8f64a988:
    *r0 = r3;
    r0 = r0 + 0x1;
    COND = r8 + 0x2 != r10;
    r8 = r8 + 0x1;
    if (COND) goto loc_8f64a97c;
    goto loc_8f64a9b4;

loc_8f64a6ec:
    r6 = r6 | 0x1;
    goto loc_8f64a6f0;

loc_8f64a6f0:
    if ((r6 & 0x2) != 0x0) {
            r7 = r7 + 0x7;
    }
    if (CPU_FLAGS & NE) {
            r3 = r7 & !0x7;
    }
    if (CPU_FLAGS & NE) {
            r7 = r3 + 0x8;
    }
    if (CPU_FLAGS & NE) {
            asm{ ldrdne     r2, r3, [r3] };
    }
    if (!CPU_FLAGS & NE) {
            r0 = r7 + 0x4;
            if ((r6 & 0x1) == 0x0) {
                    if ((r6 & 0x8) != 0x0) {
                            r2 = *r7;
                    }
                    if (!CPU_FLAGS & NE) {
                            if ((r6 & 0x4) != 0x0) {
                                    r2 = *r7;
                            }
                            if (!CPU_FLAGS & NE) {
                                    r2 = *r7;
                            }
                    }
            }
            else {
                    r2 = *r7;
            }
            r3 = 0x0;
            r7 = r0;
    }
    goto loc_8f64a738;

loc_8f64a738:
    r1 = r1;
    r11 = loc_ffffffff8f64a354(sp + 0x14);
    goto loc_8f64a8bc;

loc_8f64a698:
    r6 = r6 | 0x1;
    goto loc_8f64a69c;

loc_8f64a69c:
    if ((r6 & 0x2) != 0x0) {
            r7 = r7 + 0x7;
    }
    if (CPU_FLAGS & NE) {
            r3 = r7 & !0x7;
    }
    if (CPU_FLAGS & NE) {
            r7 = r3 + 0x8;
    }
    if (CPU_FLAGS & NE) {
            asm{ ldrdne     r2, r3, [r3] };
    }
    if (!CPU_FLAGS & NE) {
            r0 = r7 + 0x4;
            if ((r6 & 0x1) == 0x0) {
                    if ((r6 & 0x8) != 0x0) {
                            asm{ ldrsbne    r2, [r7] };
                    }
                    if (!CPU_FLAGS & NE) {
                            if ((r6 & 0x4) != 0x0) {
                                    asm{ ldrshne    r2, [r7] };
                            }
                            if (!CPU_FLAGS & NE) {
                                    r2 = *r7;
                            }
                    }
            }
            else {
                    r2 = *r7;
            }
            r3 = SAR(r3, r2 / 0x80000000);
            r7 = r0;
    }
    r6 = r6 | 0x100;
    goto loc_8f64a738;

loc_8f64a598:
    if (r3 == 0x6e) goto loc_8f64a830;

loc_8f64a5a0:
    if (CPU_FLAGS & A) goto loc_8f64a5dc;

loc_8f64a5a4:
    if (r3 == 0x68) goto loc_8f64a688;

loc_8f64a5ac:
    if (CPU_FLAGS & A) goto loc_8f64a5bc;

loc_8f64a5b0:
    if (r3 == 0x64) goto loc_8f64a69c;
    goto loc_8f64a87c;

loc_8f64a5bc:
    if (r3 == 0x69) goto loc_8f64a69c;

loc_8f64a5c4:
    if (r3 != 0x6c) goto loc_8f64a87c;

loc_8f64a5cc:
    if ((r6 & 0x1) != 0x0) {
            r6 = r6 | 0x2;
    }
    r6 = r6 | 0x1;
    goto loc_8f64a4f4;

loc_8f64a688:
    if ((r6 & 0x4) != 0x0) {
            r6 = r6 | 0x8;
    }
    r6 = r6 | 0x4;
    goto loc_8f64a4f4;

loc_8f64a5dc:
    if (r3 == 0x75) goto loc_8f64a6f0;

loc_8f64a5e4:
    if (CPU_FLAGS & A) goto loc_8f64a5fc;

loc_8f64a5e8:
    if (r3 == 0x70) goto loc_8f64a754;

loc_8f64a5f0:
    if (r3 == 0x73) goto loc_8f64a664;
    goto loc_8f64a87c;

loc_8f64a664:
    r11 = *r7;
    r3 = r7 + 0x4;
    if (r11 != 0x0) {
            r7 = r3;
    }
    if (CPU_FLAGS & E) {
            r7 = r3;
    }
    if (CPU_FLAGS & E) {
            r11 = "<null>";
    }
    goto loc_8f64a8bc;

loc_8f64a754:
    r6 = r6 | 0x21;
    goto loc_8f64a758;

loc_8f64a5fc:
    if (r3 == 0x78) goto loc_8f64a758;

loc_8f64a604:
    if (r3 != 0x7a) goto loc_8f64a87c;

loc_8f64a60c:
    r6 = r6 | 0x10;
    goto loc_8f64a4f4;

loc_8f64a830:
    r1 = r7 + 0x4;
    r0 = *r7;
    if (CPU_FLAGS & NE) {
            asm{ strdne     r2, r3, [r0] };
    }
    if (!CPU_FLAGS & NE) {
            if ((r6 & 0x1) != 0x0) {
                    *r0 = r8;
            }
            else {
                    if ((r6 & 0x8) != 0x0) {
                            *r0 = r8;
                    }
                    if (!CPU_FLAGS & NE) {
                            if ((r6 & 0x4) != 0x0) {
                                    *r0 = r8;
                            }
                            if (!CPU_FLAGS & NE) {
                                    *r0 = r8;
                            }
                    }
            }
    }
    r7 = r1;
    goto loc_8f64a4c4;

loc_8f64a634:
    r1 = r7 + 0x4;
    r3 = s0 + 0x1;
    *r0 = *r7;
    r2 = r8 + 0x1;
    if (r8 + 0x2 == r10) goto loc_8f64a9a4;

loc_8f64a654:
    r7 = r1;
    r8 = r2;
    s0 = r3;
    goto loc_8f64a4c4;

loc_8f64a9a4:
    r8 = r2;
    goto loc_8f64a9b4;

