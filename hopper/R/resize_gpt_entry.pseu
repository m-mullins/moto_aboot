    r0 = arg0;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    s0 = arg3;
    r1 = r0;
    r8 = arg2;
    stack[2040] = *0x8f7112f4;
    r3 = 0x8f6e1318;
    r7 = *r3;
    if (r0 < r7) {
            r3 = 0x0;
    }
    if (!CPU_FLAGS & B) {
            r3 = *0x8f6e1310;
            r3 = r7 + (r3 + 0x2000000 - 0x1) * 0x80;
            if (r0 > r3) {
                    r3 = 0x0;
            }
            if (CPU_FLAGS & B) {
                    r3 = 0x1;
            }
    }
    r5 = *(r1 + 0x21);
    r4 = *(r1 + 0x20);
    r12 = r1 - 0x80;
    if (r3 == 0x0) {
            r3 = 0x8f6e1320;
    }
    r0 = r1 + 0x80;
    r4 = r4 | r5 * 0x100;
    r5 = *(r1 + 0x22);
    if (CPU_FLAGS & NE) {
            r3 = 0x8f6e1328;
    }
    if (CPU_FLAGS & E) {
            r6 = *r3;
    }
    r4 = r4 | r5 * 0x10000;
    r5 = *(r1 + 0x23);
    if (CPU_FLAGS & E) {
            r3 = 0x8f6e130c;
    }
    if (CPU_FLAGS & NE) {
            r6 = *r3;
    }
    r2 = r4 | r5 * 0x1000000;
    r5 = *(r1 + 0x25);
    r4 = *(r1 + 0x24);
    if (CPU_FLAGS & E) {
            r7 = *r3;
    }
    r2 = r2 - 0x1;
    r4 = r4 | r5 * 0x100 | *(r1 + 0x26) * 0x10000;
    r5 = *(r1 + 0x27);
    r3 = (r4 | r5 * 0x1000000) - 0x0 + !CARRY(FLAGS);
    r2 = r2 + (r4 >> r8 / 0x200 | s0 * 0x800000);
    r3 = r3 + (r5 >> s0 / 0x200) + CARRY(FLAGS);
    r4 = 0x1ff & r8;
    COND = r8 != 0x0;
    if (!COND) {
            r4 = 0x8f6e1310;
            if (r12 < r7) {
                    r12 = 0x0;
            }
            if (r0 >= r7 + *r4 * 0x80) {
                    r0 = 0x0;
            }
            if (r12 != 0x0) {
                    r4 = *(r12 + 0x28) | *(r12 + 0x29) * 0x100 | *(r12 + 0x2a) * 0x10000 | *(r12 + 0x2b) * 0x1000000;
                    if (r3 == (*(r12 + 0x2c) | *(r12 + 0x2d) * 0x100 | *(r12 + 0x2e) * 0x10000 | *(r12 + 0x2f) * 0x1000000)) {
                            CMP(r2, r4);
                    }
                    if (!CPU_FLAGS & B) {
                            if (r0 != 0x0) {
                                    r4 = *(r0 + 0x20) | *(r0 + 0x21) * 0x100 | *(r0 + 0x22) * 0x10000 | *(r0 + 0x23) * 0x1000000;
                                    r8 = *(r0 + 0x25);
                                    r12 = *(r0 + 0x24);
                                    r12 = r12 | r8 * 0x100;
                                    r8 = *(r0 + 0x26);
                                    r0 = *(r0 + 0x27);
                                    if (r3 == (r12 | r8 * 0x10000 | r0 * 0x1000000)) {
                                            CMP(r2, r4);
                                    }
                                    if (!CPU_FLAGS & NB) {
                                            *(r1 + 0x28) = r2;
                                            asm{ ubfx       r0, r2, #0x8, #0x8 };
                                            *(r1 + 0x2c) = r3;
                                            r4 = 0x0;
                                            *(r1 + 0x29) = r0;
                                            asm{ ubfx       r0, r2, #0x10, #0x8 };
                                            r2 = r2 >> r2 / 0x1000000;
                                            *(r1 + 0x2a) = r0;
                                            *(r1 + 0x2b) = r2;
                                            asm{ ubfx       r2, r3, #0x8, #0x8 };
                                            *(r1 + 0x2d) = r2;
                                            asm{ ubfx       r2, r3, #0x10, #0x8 };
                                            *(r1 + 0x2e) = r2;
                                            *(r1 + 0x2f) = r3 >> r3 / 0x1000000;
                                            r2 = *(r6 + 0x55);
                                            r3 = *(r6 + 0x54);
                                            r1 = *(r6 + 0x51);
                                            r3 = r3 | r2 * 0x100 | *(r6 + 0x56) * 0x10000;
                                            r3 = r3 | *(r6 + 0x57) * 0x1000000;
                                            r0 = loc_ffffffff8f67b2cc(r4, r7, (*(r6 + 0x50) | r1 * 0x100 | *(r6 + 0x52) * 0x10000 | *(r6 + 0x53) * 0x1000000) * r3, r3);
                                            r2 = *(r6 + 0xd);
                                            *(r6 + 0x10) = r4;
                                            r1 = r6;
                                            *(r6 + 0x11) = r4;
                                            *(r6 + 0x12) = r4;
                                            *(r6 + 0x13) = r4;
                                            asm{ ubfx       r3, r0, #0x8, #0x8 };
                                            *(r6 + 0x59) = r3;
                                            asm{ ubfx       r3, r0, #0x10, #0x8 };
                                            *(r6 + 0x5a) = r3;
                                            r3 = *(r6 + 0xc);
                                            *(r6 + 0x58) = r0;
                                            r3 = r3 | r2 * 0x100;
                                            r2 = *(r6 + 0xe);
                                            *(r6 + 0x5b) = r0 >> r0 / 0x1000000;
                                            r3 = r3 | r2 * 0x10000;
                                            r0 = loc_ffffffff8f67b2cc(r4, r1, r3 | *(r6 + 0xf) * 0x1000000, r3);
                                            asm{ ubfx       r3, r0, #0x8, #0x8 };
                                            *(r6 + 0x10) = r0;
                                            *(r6 + 0x11) = r3;
                                            asm{ ubfx       r3, r0, #0x10, #0x8 };
                                            *(r6 + 0x12) = r3;
                                            *(r6 + 0x13) = r0 >> r0 / 0x1000000;
                                            r0 = r4;
                                    }
                                    else {
                                            r0 = 0x10 ^ 0xffffffff;
                                    }
                            }
                            else {
                                    *(r1 + 0x28) = r2;
                                    asm{ ubfx       r0, r2, #0x8, #0x8 };
                                    *(r1 + 0x2c) = r3;
                                    r4 = 0x0;
                                    *(r1 + 0x29) = r0;
                                    asm{ ubfx       r0, r2, #0x10, #0x8 };
                                    r2 = r2 >> r2 / 0x1000000;
                                    *(r1 + 0x2a) = r0;
                                    *(r1 + 0x2b) = r2;
                                    asm{ ubfx       r2, r3, #0x8, #0x8 };
                                    *(r1 + 0x2d) = r2;
                                    asm{ ubfx       r2, r3, #0x10, #0x8 };
                                    *(r1 + 0x2e) = r2;
                                    *(r1 + 0x2f) = r3 >> r3 / 0x1000000;
                                    r2 = *(r6 + 0x55);
                                    r3 = *(r6 + 0x54);
                                    r1 = *(r6 + 0x51);
                                    r3 = r3 | r2 * 0x100 | *(r6 + 0x56) * 0x10000;
                                    r3 = r3 | *(r6 + 0x57) * 0x1000000;
                                    r0 = loc_ffffffff8f67b2cc(r4, r7, (*(r6 + 0x50) | r1 * 0x100 | *(r6 + 0x52) * 0x10000 | *(r6 + 0x53) * 0x1000000) * r3, r3);
                                    r2 = *(r6 + 0xd);
                                    *(r6 + 0x10) = r4;
                                    r1 = r6;
                                    *(r6 + 0x11) = r4;
                                    *(r6 + 0x12) = r4;
                                    *(r6 + 0x13) = r4;
                                    asm{ ubfx       r3, r0, #0x8, #0x8 };
                                    *(r6 + 0x59) = r3;
                                    asm{ ubfx       r3, r0, #0x10, #0x8 };
                                    *(r6 + 0x5a) = r3;
                                    r3 = *(r6 + 0xc);
                                    *(r6 + 0x58) = r0;
                                    r3 = r3 | r2 * 0x100;
                                    r2 = *(r6 + 0xe);
                                    *(r6 + 0x5b) = r0 >> r0 / 0x1000000;
                                    r3 = r3 | r2 * 0x10000;
                                    r0 = loc_ffffffff8f67b2cc(r4, r1, r3 | *(r6 + 0xf) * 0x1000000, r3);
                                    asm{ ubfx       r3, r0, #0x8, #0x8 };
                                    *(r6 + 0x10) = r0;
                                    *(r6 + 0x11) = r3;
                                    asm{ ubfx       r3, r0, #0x10, #0x8 };
                                    *(r6 + 0x12) = r3;
                                    *(r6 + 0x13) = r0 >> r0 / 0x1000000;
                                    r0 = r4;
                            }
                    }
                    else {
                            r0 = 0x10 ^ 0xffffffff;
                    }
            }
            else {
                    if (r0 != 0x0) {
                            r4 = *(r0 + 0x20) | *(r0 + 0x21) * 0x100 | *(r0 + 0x22) * 0x10000 | *(r0 + 0x23) * 0x1000000;
                            r8 = *(r0 + 0x25);
                            r12 = *(r0 + 0x24);
                            r12 = r12 | r8 * 0x100;
                            r8 = *(r0 + 0x26);
                            r0 = *(r0 + 0x27);
                            if (r3 == (r12 | r8 * 0x10000 | r0 * 0x1000000)) {
                                    CMP(r2, r4);
                            }
                            if (!CPU_FLAGS & NB) {
                                    *(r1 + 0x28) = r2;
                                    asm{ ubfx       r0, r2, #0x8, #0x8 };
                                    *(r1 + 0x2c) = r3;
                                    r4 = 0x0;
                                    *(r1 + 0x29) = r0;
                                    asm{ ubfx       r0, r2, #0x10, #0x8 };
                                    r2 = r2 >> r2 / 0x1000000;
                                    *(r1 + 0x2a) = r0;
                                    *(r1 + 0x2b) = r2;
                                    asm{ ubfx       r2, r3, #0x8, #0x8 };
                                    *(r1 + 0x2d) = r2;
                                    asm{ ubfx       r2, r3, #0x10, #0x8 };
                                    *(r1 + 0x2e) = r2;
                                    *(r1 + 0x2f) = r3 >> r3 / 0x1000000;
                                    r2 = *(r6 + 0x55);
                                    r3 = *(r6 + 0x54);
                                    r1 = *(r6 + 0x51);
                                    r3 = r3 | r2 * 0x100 | *(r6 + 0x56) * 0x10000;
                                    r3 = r3 | *(r6 + 0x57) * 0x1000000;
                                    r0 = loc_ffffffff8f67b2cc(r4, r7, (*(r6 + 0x50) | r1 * 0x100 | *(r6 + 0x52) * 0x10000 | *(r6 + 0x53) * 0x1000000) * r3, r3);
                                    r2 = *(r6 + 0xd);
                                    *(r6 + 0x10) = r4;
                                    r1 = r6;
                                    *(r6 + 0x11) = r4;
                                    *(r6 + 0x12) = r4;
                                    *(r6 + 0x13) = r4;
                                    asm{ ubfx       r3, r0, #0x8, #0x8 };
                                    *(r6 + 0x59) = r3;
                                    asm{ ubfx       r3, r0, #0x10, #0x8 };
                                    *(r6 + 0x5a) = r3;
                                    r3 = *(r6 + 0xc);
                                    *(r6 + 0x58) = r0;
                                    r3 = r3 | r2 * 0x100;
                                    r2 = *(r6 + 0xe);
                                    *(r6 + 0x5b) = r0 >> r0 / 0x1000000;
                                    r3 = r3 | r2 * 0x10000;
                                    r0 = loc_ffffffff8f67b2cc(r4, r1, r3 | *(r6 + 0xf) * 0x1000000, r3);
                                    asm{ ubfx       r3, r0, #0x8, #0x8 };
                                    *(r6 + 0x10) = r0;
                                    *(r6 + 0x11) = r3;
                                    asm{ ubfx       r3, r0, #0x10, #0x8 };
                                    *(r6 + 0x12) = r3;
                                    *(r6 + 0x13) = r0 >> r0 / 0x1000000;
                                    r0 = r4;
                            }
                            else {
                                    r0 = 0x10 ^ 0xffffffff;
                            }
                    }
                    else {
                            *(r1 + 0x28) = r2;
                            asm{ ubfx       r0, r2, #0x8, #0x8 };
                            *(r1 + 0x2c) = r3;
                            r4 = 0x0;
                            *(r1 + 0x29) = r0;
                            asm{ ubfx       r0, r2, #0x10, #0x8 };
                            r2 = r2 >> r2 / 0x1000000;
                            *(r1 + 0x2a) = r0;
                            *(r1 + 0x2b) = r2;
                            asm{ ubfx       r2, r3, #0x8, #0x8 };
                            *(r1 + 0x2d) = r2;
                            asm{ ubfx       r2, r3, #0x10, #0x8 };
                            *(r1 + 0x2e) = r2;
                            *(r1 + 0x2f) = r3 >> r3 / 0x1000000;
                            r2 = *(r6 + 0x55);
                            r3 = *(r6 + 0x54);
                            r1 = *(r6 + 0x51);
                            r3 = r3 | r2 * 0x100 | *(r6 + 0x56) * 0x10000;
                            r3 = r3 | *(r6 + 0x57) * 0x1000000;
                            r0 = loc_ffffffff8f67b2cc(r4, r7, (*(r6 + 0x50) | r1 * 0x100 | *(r6 + 0x52) * 0x10000 | *(r6 + 0x53) * 0x1000000) * r3, r3);
                            r2 = *(r6 + 0xd);
                            *(r6 + 0x10) = r4;
                            r1 = r6;
                            *(r6 + 0x11) = r4;
                            *(r6 + 0x12) = r4;
                            *(r6 + 0x13) = r4;
                            asm{ ubfx       r3, r0, #0x8, #0x8 };
                            *(r6 + 0x59) = r3;
                            asm{ ubfx       r3, r0, #0x10, #0x8 };
                            *(r6 + 0x5a) = r3;
                            r3 = *(r6 + 0xc);
                            *(r6 + 0x58) = r0;
                            r3 = r3 | r2 * 0x100;
                            r2 = *(r6 + 0xe);
                            *(r6 + 0x5b) = r0 >> r0 / 0x1000000;
                            r3 = r3 | r2 * 0x10000;
                            r0 = loc_ffffffff8f67b2cc(r4, r1, r3 | *(r6 + 0xf) * 0x1000000, r3);
                            asm{ ubfx       r3, r0, #0x8, #0x8 };
                            *(r6 + 0x10) = r0;
                            *(r6 + 0x11) = r3;
                            asm{ ubfx       r3, r0, #0x10, #0x8 };
                            *(r6 + 0x12) = r3;
                            *(r6 + 0x13) = r0 >> r0 / 0x1000000;
                            r0 = r4;
                    }
            }
    }
    else {
            r0 = 0x6 ^ 0xffffffff;
    }
    if (stack[2040] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

