    r2 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x14;
    r6 = arg3;
    r11 = arg4;
    s0 = lr;
    r4 = arg0;
    r3 = *0x8f7112f4;
    r7 = r2;
    stack[2037] = r3;
    if (r4 == 0x0) {
            r2 = "lib/regex/regcomp.c";
            r3 = 0x475;
            loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", r2, r3, "p != ((void *)0)");
    }
    if (r11 > 0x100) {
            r3 = 0xc;
    }
    if (CPU_FLAGS & A) {
            *(r4 + 0x8) = r3;
    }
    r3 = *(r4 + 0x8);
    if (r3 == 0x0) {
            if (r7 > r6) {
                    r2 = "lib/regex/regcomp.c";
                    r3 = 0x47e;
                    loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", r2, r3, "from <= to");
            }
            if (r7 <= 0x1) {
                    r2 = r2 << r7 * 0x8;
            }
            if (!CPU_FLAGS & LE) {
                    if (r7 != 0x100) {
                            r2 = 0x10;
                    }
                    if (CPU_FLAGS & E) {
                            r2 = 0x18;
                    }
            }
            if (r6 <= 0x1) {
                    r3 = r6;
            }
            if (!CPU_FLAGS & LE) {
                    if (r6 != 0x100) {
                            r3 = 0x2;
                    }
                    if (CPU_FLAGS & E) {
                            r3 = 0x3;
                    }
            }
            if (r2 + r3 < 0x13) {
                    loc_8f65ca60();
            }
            if (stack[2037] == *0x8f7112f4) {
                    loc_ffffffff8f65b358(r4, 0xf);
            }
            else {
                    loc_ffffffff8f648514();
            }
    }
    else {
            if (stack[2037] != *0x8f7112f4) {
                    loc_ffffffff8f648514();
            }
    }
    return;

