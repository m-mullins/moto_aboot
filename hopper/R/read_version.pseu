    stack[2042] = r6;
    stack[2043] = r7;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4;
    s0 = arg0;
    r6 = arg1;
    r7 = arg2;
    r3 = *0x8f7112f4;
    stack[2038] = r3;
    r0 = loc_ffffffff8f65385c("versions", arg1, arg2, r3, arg0, stack[2038], arg2, r4, r5, stack[2042], stack[2043], 0x8f7112f4, r10, r11, lr);
    if (r0 != 0x0) {
            r4 = *(r0 + 0x21);
            r2 = *(r0 + 0x20);
            r1 = *(r0 + 0x29);
            r4 = r2 | r4 * 0x100;
            r2 = *(r0 + 0x22);
            r3 = *(r0 + 0x2b);
            r4 = r4 | r2 * 0x10000 | *(r0 + 0x23) * 0x1000000;
            r3 = *(r0 + 0x28) | r1 * 0x100 | *(r0 + 0x2a) * 0x10000 | r3 * 0x1000000;
            if (r4 != 0x0) {
                    CMP(r3, r4);
            }
            r11 = r3 - r4;
            if (!CPU_FLAGS & E) {
                    r10 = r10 << r11 * 0x200;
                    r0 = loc_ffffffff8f64aacc(r10);
                    COND = r5 == 0x0;
                    if (!COND) {
                            r0 = loc_ffffffff8f65066c(r4, r11, r5);
                            COND = r4 != 0x0;
                            if (!COND) {
                                    *(0xffffffffffffffff + r5 + r10) = r4;
                                    r0 = loc_ffffffff8f64b6a0(r5, s0);
                                    COND = r10 == 0x0;
                                    if (COND) {
                                            *r6 = r4;
                                    }
                                    if (!CPU_FLAGS & E) {
                                            r0 = loc_ffffffff8f64b354(s0);
                                            r1 = r7 - 0x1;
                                            r3 = r10 + r0;
                                            if (*(r10 + r0) == 0x3a) {
                                                    r3 = r3 + 0x1;
                                            }
                                            if (*r3 == 0x20) {
                                                    r3 = r3 + 0x1;
                                            }
                                            while (r4 < r1) {
                                                    r2 = *(r3 + r4);
                                                    if (r2 != 0xa) {
                                                            CMP(r2, 0xd);
                                                    }
                                                    if (!CPU_FLAGS & NE) {
                                                        break;
                                                    }
                                                    if (r2 == 0x0) {
                                                        break;
                                                    }
                                                    r4 = r4 + 0x1;
                                            }
                                            *(r3 + r4) = 0x0;
                                            loc_ffffffff8f64b2c0(r6, r3, r7);
                                    }
                            }
                            else {
                                    r4 = 0x0 ^ 0xffffffff;
                            }
                            loc_ffffffff8f64ab9c(r5);
                    }
                    else {
                            r4 = 0x0 ^ 0xffffffff;
                    }
            }
            else {
                    r4 = 0x0 ^ 0xffffffff;
            }
    }
    else {
            r4 = 0x0 ^ 0xffffffff;
    }
    r0 = r4;
    if (stack[2038] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

