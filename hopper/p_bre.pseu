    r0 = arg0;
    r10 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    COND = r4 != 0x0;
    r7 = lr;
    stack[2034] = arg1;
    stack[2035] = arg2;
    stack[2037] = *r0;
    if (!COND) {
            r0 = loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x243, "p != ((void *)0)");
    }
    if ((r10 > 0x100) || (*(r4 + 0x8) == 0xc)) goto loc_8f65d4d0;

loc_8f65d4dc:
    r3 = *r4;
    r2 = *(r4 + 0x4);
    stack[2033] = *(r4 + 0x14);
    if ((r3 < r2) && (*r3 == 0x5e)) {
            *r4 = r3 + 0x1;
            r0 = loc_ffffffff8f65b978(r4, 0x18000000, 0x0, r3 + 0x1);
            r3 = *(r4 + 0x1c);
            *(r3 + 0x28) = *(r3 + 0x28) | 0x1;
            *(r3 + 0x2c) = *(r3 + 0x2c) + 0x1;
    }
    r5 = 0x0;
    r8 = 0x1;
    goto loc_8f65d53c;

loc_8f65d53c:
    r3 = *r4;
    r2 = *(r4 + 0x4);
    r6 = *(r4 + 0x14);
    if (r3 < r2) goto loc_8f65d590;

loc_8f65d550:
    if (r5 != 0x0) {
            *(r4 + 0x14) = r6 - 0x1;
            r0 = loc_ffffffff8f65b978(r4, 0x20000000, 0x0);
            r3 = *(r4 + 0x1c);
            *(r3 + 0x28) = *(r3 + 0x28) | 0x2;
            *(r3 + 0x30) = *(r3 + 0x30) + 0x1;
    }
    if (*(r4 + 0x14) == stack[2033]) {
            if (stack[2037] == *r0) {
                    loc_ffffffff8f65b358(r4, 0xe);
            }
            else {
                    loc_ffffffff8f648514();
            }
    }
    else {
            if (stack[2037] != *r0) {
                    loc_ffffffff8f648514();
            }
    }
    return;

loc_8f65d590:
    r1 = r3 + 0x1;
    if (r1 < r2) goto loc_8f65dad0;

loc_8f65d59c:
    *r4 = r1;
    r5 = *r3;
    if (r5 == 0x5c) {
            if (r1 >= r2) {
                    loc_ffffffff8f65b358(r4, 0x5);
            }
            r3 = *r4;
            *r4 = r3 + 0x1;
            r5 = *r3;
            r5 = r5 | 0x100;
    }
    if (r5 != 0x129) {
            if (!CPU_FLAGS & G) {
                    if (r5 != 0x2e) {
                            if (!CPU_FLAGS & G) {
                                    if (r5 == 0x2a) {
                                            if (r8 == 0x0) {
                                                    loc_ffffffff8f65b358(r4, 0xd);
                                            }
                                    }
                                    loc_ffffffff8f65c5e4(r4, zero_extend_32(r5));
                            }
                            else {
                                    if (r5 != 0x5b) {
                                            if (r5 != 0x128) {
                                                    loc_ffffffff8f65c5e4(r4, zero_extend_32(r5));
                                            }
                                            else {
                                                    r2 = *(r4 + 0x1c);
                                                    r3 = *(r2 + 0x44);
                                                    r8 = r3 + 0x1;
                                                    *(r2 + 0x44) = r8;
                                                    if (r8 < 0x9) {
                                                            r3 = r3 + 0x9;
                                                    }
                                                    if (CPU_FLAGS & B) {
                                                            r2 = *(r4 + 0x14);
                                                    }
                                                    if (CPU_FLAGS & B) {
                                                            *(r4 + r3 * 0x4) = r2;
                                                    }
                                                    loc_ffffffff8f65b978();
                                                    r3 = *r4;
                                                    r2 = *(r4 + 0x4);
                                                    if ((r3 < r2) && ((((r2 < r3 + 0x1) || (*r3 != 0x5c)) || (*(r3 + 0x1) != 0x29)))) {
                                                            loc_ffffffff8f65d474(r4, 0x5c, 0x29, r10 + 0x1);
                                                    }
                                                    if (r8 <= 0x9) {
                                                            r3 = *(r4 + 0x14);
                                                            *(r4 + (r8 + 0x12) * 0x4) = r3;
                                                            if (r3 == 0x0) {
                                                                    loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x292, "p->pend[subno] != 0");
                                                            }
                                                    }
                                                    loc_ffffffff8f65b978(r4, 0x70000000, r8);
                                                    r3 = *r4;
                                                    r2 = *(r4 + 0x4);
                                                    if (((r3 < r2) && (r2 >= r3 + 0x1)) && (*r3 == 0x5c)) {
                                                            if (*(r3 + 0x1) == 0x29) {
                                                                    r3 = r3 + 0x2;
                                                            }
                                                            if (CPU_FLAGS & E) {
                                                                    *r4 = r3;
                                                            }
                                                            if (!CPU_FLAGS & E) {
                                                                    loc_ffffffff8f65b358();
                                                            }
                                                    }
                                                    else {
                                                            loc_ffffffff8f65b358();
                                                    }
                                            }
                                    }
                                    else {
                                            loc_ffffffff8f65bb34(r4);
                                    }
                            }
                    }
                    else {
                            r2 = *(*(r4 + 0x1c) + 0x18);
                            r2 = r2 & 0x8;
                            COND = r2 == 0x0;
                            if (!COND) {
                                    loc_ffffffff8f65c74c();
                            }
                            else {
                                    loc_ffffffff8f65b978();
                            }
                    }
            }
            else {
                    if (r5 != 0x17b) {
                            if (!CPU_FLAGS & G) {
                                    if (r5 - 0x130 >= 0x9) {
                                            loc_ffffffff8f65c5e4(r4, zero_extend_32(r5));
                                    }
                                    else {
                                            r8 = (r5 & !0x100) - 0x30;
                                            if (r8 >= 0x9) {
                                                    loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x2a5, "i < 10");
                                            }
                                            r11 = r4 + r8 * 0x4;
                                            if (*(r11 + 0x48) != 0x0) {
                                                    if (r8 >= *(*(r4 + 0x1c) + 0x44)) {
                                                            loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x2a7, "i <= p->g->nsub");
                                                    }
                                                    loc_ffffffff8f65b978(r4, 0x38000000, r8);
                                                    if (*(r11 + 0x20) == 0x0) {
                                                            loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x2a9, "p->pbegin[i] != 0");
                                                    }
                                                    if ((*(*(r4 + 0xc) + *(r11 + 0x20) * 0x4) & 0xf8000000) != 0x68000000) {
                                                            loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x2aa, "((p->strip[p->pbegin[i]])&((uint32_t)0xf8000000UL)) == (((uint32_t)(13))<<((unsigned)27))");
                                                    }
                                                    if ((*(*(r4 + 0xc) + *(r11 + 0x48) * 0x4) & 0xf8000000) != 0x70000000) {
                                                            loc_ffffffff8f6484ac(r7, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/regcomp.c", 0x2ab, "((p->strip[p->pend[i]])&((uint32_t)0xf8000000UL)) == (((uint32_t)(14))<<((unsigned)27))");
                                                    }
                                                    loc_ffffffff8f65b7d8(r4, *(r11 + 0x20) + 0x1, *(r11 + 0x48));
                                                    loc_ffffffff8f65b978(r4, 0x40000000, r8);
                                            }
                                            else {
                                                    loc_ffffffff8f65b358(r4, 0x6);
                                            }
                                            *(*(r4 + 0x1c) + 0x48) = 0x1;
                                    }
                            }
                            else {
                                    if (r5 != 0x17d) {
                                            loc_ffffffff8f65c5e4(r4, zero_extend_32(r5));
                                    }
                                    else {
                                            loc_ffffffff8f65b358();
                                    }
                            }
                    }
                    else {
                            loc_ffffffff8f65b358();
                    }
            }
    }
    else {
            loc_ffffffff8f65b358();
    }
    r3 = *r4;
    r0 = *(r4 + 0x4);
    if (r3 >= r0) goto loc_8f65db28;

loc_8f65d90c:
    r1 = *r3;
    r2 = r3 + 0x1;
    if (r1 != 0x2a) goto loc_8f65d984;

loc_8f65d91c:
    *r4 = r2;
    loc_ffffffff8f65c82c(r4, 0x48000000, *(r4 + 0x14) + 0x1 - r6, r6);
    loc_ffffffff8f65b978(r4, 0x50000000, *(r4 + 0x14) - r6);
    loc_ffffffff8f65c82c(r4, 0x58000000, *(r4 + 0x14) + 0x1 - r6, r6);
    r0 = loc_ffffffff8f65b978(r4, 0x60000000, *(r4 + 0x14) - r6);
    goto loc_8f65dac4;

loc_8f65dac4:
    r5 = 0x0;
    goto loc_8f65dac8;

loc_8f65dac8:
    r8 = 0x0;
    goto loc_8f65d53c;

loc_8f65d984:
    if (((r0 < r2) || (r1 != 0x5c)) || (*(r3 + 0x1) != 0x7b)) goto loc_8f65db28;

loc_8f65d9a0:
    *r4 = r3 + 0x2;
    r0 = loc_ffffffff8f65b3e0(r4);
    r3 = *r4;
    r2 = *(r4 + 0x4);
    r8 = r0;
    if ((r3 < r2) && (*r3 == 0x2c)) {
            *r4 = r3 + 0x1;
            if (r3 + 0x1 < r2) {
                    if (loc_ffffffff8f64a0c8(*(r3 + 0x1)) != 0x0) {
                            r0 = loc_ffffffff8f65b3e0(r4);
                            r3 = r0;
                            if (r8 > r0) {
                                    loc_ffffffff8f65b358(r4, 0xa);
                            }
                    }
            }
    }
    r5 = 0x0;
    r0 = loc_ffffffff8f65c98c(r4, r6, r8);
    r3 = *r4;
    r2 = *(r4 + 0x4);
    if (((r3 >= r2) || (r2 < r3 + 0x1)) || (*r3 != 0x5c)) goto loc_8f65da90;

loc_8f65da68:
    if (*(r3 + 0x1) == 0x7d) {
            r3 = r3 + 0x2;
    }
    if (CPU_FLAGS & E) {
            *r4 = r3;
    }
    if (CPU_FLAGS & NE) goto loc_8f65da90;
    goto loc_8f65dac8;

loc_8f65da90:
    r3 = *r4;
    if (r3 < r2) goto loc_8f65da80;

loc_8f65db38:
    loc_ffffffff8f65b358(r4, 0x9);
    goto loc_8f65dab8;

loc_8f65dab8:
    r0 = loc_ffffffff8f65b358(r4, 0xa);
    goto loc_8f65dac4;

loc_8f65da80:
    r1 = r3 + 0x1;
    if (r1 < r2) goto loc_8f65daa0;

loc_8f65da8c:
    *r4 = r1;
    goto loc_8f65da90;

loc_8f65daa0:
    if ((*r3 != 0x5c) || (*(r3 + 0x1) != 0x7d)) goto loc_8f65da8c;
    goto loc_8f65dab8;

loc_8f65db28:
    r3 = r5 - 0x24;
    r5 = 0x0 - r3;
    r5 = r5 + r3 + CARRY(FLAGS);
    goto loc_8f65dac8;

loc_8f65dad0:
    if (*r3 != stack[2034]) goto loc_8f65d59c;

loc_8f65dae0:
    r0 = *(r3 + 0x1);
    if (r0 != stack[2035]) goto loc_8f65d59c;
    goto loc_8f65d550;

loc_8f65d4d0:
    *(r4 + 0x8) = 0xc;
    if (stack[2037] != *r0) {
            loc_ffffffff8f648514();
    }
    return;

