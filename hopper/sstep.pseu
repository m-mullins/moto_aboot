    r8 = arg3;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    COND = r11 != 0x0;
    s0 = lr;
    stack[2034] = arg2;
    r6 = arg1;
    r7 = arg4;
    r4 = arg5;
    stack[2037] = *0x8f7112f4;
    if (!COND) {
            loc_ffffffff8f6484ac(lr, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x3c7, "g != ((void *)0)");
    }
    r5 = 0x1 << r6;
    stack[2033] = r7 - 0x100 - 0x2;
    goto loc_8f65e1b0;

loc_8f65e1b0:
    if (r6 == stack[2034]) goto loc_8f65e4a4;

loc_8f65e1bc:
    r2 = *(r11 + 0x4);
    r10 = *(r2 + r6 * 0x4);
    r3 = r10 & 0xf8000000;
    if (r3 == 0x50000000) goto loc_8f65e360;

loc_8f65e1d0:
    if (CPU_FLAGS & A) goto loc_8f65e234;

loc_8f65e1d4:
    if (r3 == 0x28000000) goto loc_8f65e320;

loc_8f65e1dc:
    if (CPU_FLAGS & A) goto loc_8f65e20c;

loc_8f65e1e0:
    if (r3 == 0x10000000) goto loc_8f65e2e4;

loc_8f65e1e8:
    if (CPU_FLAGS & A) goto loc_8f65e1f8;

loc_8f65e1ec:
    if (r3 == 0x8000000) {
            if (r6 != stack[2034] - 0x1) {
                    loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x3cd, "pc == stop-1");
            }
    }
    goto loc_8f65e498;

loc_8f65e498:
    r6 = r6 + 0x1;
    r5 = r5 << r5 * 0x2;
    goto loc_8f65e1b0;

loc_8f65e1f8:
    if (r3 == 0x18000000) goto loc_8f65e2f0;

loc_8f65e200:
    if (r3 == 0x20000000) goto loc_8f65e300;
    goto loc_8f65e498;

loc_8f65e300:
    if (stack[2033] > 0x1) goto loc_8f65e498;

loc_8f65e358:
    r3 = r5 & r8;
    goto loc_8f65e494;

loc_8f65e494:
    r4 = r4 | r3 * 0x2;
    goto loc_8f65e498;

loc_8f65e2f0:
    CMP(r7 & !0x2, 0x101);
    goto loc_8f65e318;

loc_8f65e318:
    if (CPU_FLAGS & NE) goto loc_8f65e498;
    goto loc_8f65e358;

loc_8f65e2e4:
    CMP(r7, zero_extend_32(r10));
    goto loc_8f65e318;

loc_8f65e20c:
    if (r3 == 0x38000000) goto loc_8f65e490;

loc_8f65e214:
    if (CPU_FLAGS & A) goto loc_8f65e224;

loc_8f65e218:
    if (r3 == 0x30000000) goto loc_8f65e32c;
    goto loc_8f65e498;

loc_8f65e32c:
    r3 = *(r11 + 0x10);
    if ((r7 > 0xff) || ((*(*(r3 + (r10 & !0xf8000000) * 0x10) + zero_extend_32(r7)) & *(0x4 + r3 + (r10 & !0xf8000000) * 0x10)) == 0x0)) goto loc_8f65e498;
    goto loc_8f65e358;

loc_8f65e224:
    if (r3 == 0x40000000) goto loc_8f65e490;

loc_8f65e22c:
    CMP(r3, 0x48000000);
    goto loc_8f65e274;

loc_8f65e274:
    if (CPU_FLAGS & E) goto loc_8f65e490;
    goto loc_8f65e498;

loc_8f65e490:
    r3 = r5 & r4;
    goto loc_8f65e494;

loc_8f65e320:
    if (r7 > 0xff) goto loc_8f65e498;
    goto loc_8f65e358;

loc_8f65e234:
    if (r3 == 0x78000000) goto loc_8f65e398;

loc_8f65e23c:
    if (CPU_FLAGS & A) goto loc_8f65e27c;

loc_8f65e240:
    if (r3 == 0x60000000) goto loc_8f65e490;

loc_8f65e248:
    if (CPU_FLAGS & A) goto loc_8f65e268;

loc_8f65e24c:
    if (r3 == 0x58000000) {
            r3 = r5 & r4;
    }
    if (CPU_FLAGS & E) {
            r10 = r10 & !0xf8000000;
    }
    if (CPU_FLAGS & E) {
            r3 = r4 | r3 * 0x2;
    }
    if (CPU_FLAGS & E) {
            r4 = r3 & r5;
    }
    if (CPU_FLAGS & E) {
            r4 = r3 |     r4;
    r10;
;
    }
    goto loc_8f65e498;

loc_8f65e268:
    if (r3 == 0x68000000) goto loc_8f65e490;

loc_8f65e270:
    CMP(r3, 0x70000000);
    goto loc_8f65e274;

loc_8f65e27c:
    if (r3 == 0x90000000) goto loc_8f65e490;

loc_8f65e284:
    if (CPU_FLAGS & A) goto loc_8f65e29c;

loc_8f65e288:
    if (r3 == 0x80000000) goto loc_8f65e3d4;

loc_8f65e290:
    if (r3 == 0x88000000) goto loc_8f65e440;
    goto loc_8f65e498;

loc_8f65e440:
    r10 = r10 & !0xf8000000;
    r4 = r4 | (r5 & r4) * 0x2;
    r3 = *(r2 + (r10 + r6) * 0x4);
    r3 = r3 & 0xf8000000;
    if (r3 == 0x90000000) goto loc_8f65e498;

loc_8f65e460:
    if (r3 != 0x88000000) {
            loc_ffffffff8f6484ac();
    }
    goto loc_8f65e484;

loc_8f65e484:
    r4 = r4 |     r4 & r5;
    r10;
;
    goto loc_8f65e498;

loc_8f65e3d4:
    COND = r2 != 0x0;
    stack[2035] = r2;
    if (COND) {
            r10 = 0x1;
    }
    if (!CPU_FLAGS & E) {
            do {
                    r12 = *(*(r11 + 0x4) + (r10 + r6) * 0x4);
                    r3 = r12 & 0xf8000000;
                    if (r3 == 0x90000000) {
                        break;
                    }
                    if (r3 != 0x88000000) {
                            loc_ffffffff8f6484ac(s0, "ASSERT FAILED at (%s:%d): %s\n", "lib/regex/engine.c", 0x414, "((s)&((uint32_t)0xf8000000UL)) == (((uint32_t)(17))<<((unsigned)27))");
                            r12 = r12;
                    }
                    r10 = r10 + (r12 & !0xf8000000);
            } while (true);
            r4 = r4 |     stack[2035];
    r10;
;
    }
    goto loc_8f65e498;

loc_8f65e29c:
    if (r3 == 0x98000000) goto loc_8f65e310;

loc_8f65e2a4:
    if (r3 == 0xa0000000) {
            r3 = 0x106;
    }
    if (CPU_FLAGS & E) goto loc_8f65e314;
    goto loc_8f65e498;

loc_8f65e314:
    CMP(r7, r3);
    goto loc_8f65e318;

loc_8f65e310:
    r3 = 0x105;
    goto loc_8f65e314;

loc_8f65e398:
    r10 = r10 & !0xf8000000;
    r4 = r4 | (r5 & r4) * 0x2;
    if ((*(r2 + (r10 + r6) * 0x4) & 0xf8000000) != 0x88000000) {
            loc_ffffffff8f6484ac();
    }
    goto loc_8f65e484;

loc_8f65e360:
    r10 = r10 & !0xf8000000;
    r2 = r5 >> r10;
    COND = (r2 & (r4 | (r5 & r4) * 0x2)) != 0x0;
    r4 = r4 | (r5 & r4) * 0x2 |     (r4 | (r5 & r4) * 0x2) & r5;
    r10;
;
    if (!COND) {
            if ((r4 & r2) != 0x0) {
                    r6 = r6 - r10;
            }
            if (CPU_FLAGS & NE) {
                    r5 = 0x1;
            }
            if (CPU_FLAGS & NE) {
                    r6 = r6 - 0x1;
            }
            if (CPU_FLAGS & NE) {
                    r5 = r5 << r6;
            }
    }
    goto loc_8f65e498;

loc_8f65e4a4:
    r0 = r4;
    if (stack[2037] != *0x8f7112f4) {
            r0 = loc_ffffffff8f648514();
    }
    return r0;

