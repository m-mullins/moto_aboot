    r6 = arg2;
    sp = sp - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x4 - 0x24;
    r7 = arg0;
    r5 = arg1;
    stack[2034] = arg3;
    stack[2037] = *0x8f7112f4;
    if ((*0x8f6afe0c != 0x0) || (*0x8f6e0c38 == 0x0)) goto loc_8f64e2e4;

loc_8f64de90:
    r3 = *(*0x8f6e0c38 + 0x14);
    if (r6 > r3) goto loc_8f64deac;

loc_8f64de9c:
    r1 = *(*0x8f6e0c38 + 0x10);
    stack[2033] = r1;
    if (r5 < r1) goto loc_8f64ded0;

loc_8f64deac:
    if (stack[2037] == *0x8f7112f4) {
            loc_ffffffff8f656968(0x1, "Image is too large for screen\n");
    }
    else {
            loc_ffffffff8f648514();
    }
    return;

loc_8f64ded0:
    if (*0x8f6e0c40 != 0x0) goto loc_8f64e27c;

loc_8f64dee0:
    r3 = r3;
    if (loc_ffffffff8f64af40() != 0x0) goto loc_8f64df88;

loc_8f64defc:
    r1 = *(r7 + 0xb);
    r6 = *(r7 + 0xa);
    r2 = *(r7 + 0x9);
    r5 = *(r7 + 0x8);
    r6 = r1 | r6 * 0x100;
    COND = r6 != 0x0;
    if (COND) {
            r1 = 0x0;
    }
    if (CPU_FLAGS & E) {
            r1 = 0x1;
    }
    r5 = r2 | r5 * 0x100;
    COND = r5 != 0x0;
    if (COND) {
            r2 = r1;
    }
    if (CPU_FLAGS & E) {
            r2 = r1 | 0x1;
    }
    if (r2 != 0x0) goto loc_8f64e28c;

loc_8f64df2c:
    if (((r5 > stack[2033]) || (r6 > r3)) || (*(*0x8f6e0c38 + 0x1c) != 0x3)) goto loc_8f64df4c;

loc_8f64df64:
    r10 = *(r7 + 0xf);
    r4 = r7 + 0xc;
    r12 = 0x1;
    r10 = r10 << r10 * 0x100 | *(r7 + 0xe) * 0x10000;
    goto loc_8f64df94;

loc_8f64df94:
    s0 = r3 - r6 >> (r3 - r6) / 0x2;
    stack[2035] = *(*0x8f6e0c38 + 0x1c);
    r8 = stack[2033] - r5 >> (stack[2033] - r5) / 0x2;
    if (((r12 ^ 0x1) & !stack[2034] & 0x1) != 0x0) {
            r10 = *(r7 + 0x1);
            r10 = r10 << r10 * 0x100 | *r7 * 0x10000;
    }
    if (r8 != 0x0) {
            r11 = *0x8f6e0c38;
            r1 = 0x0;
            asm{ stm        sp, {r3, sl} };
            stack[2032] = r12;
            loc_ffffffff8f649350(r11, r1, r1, r8, stack[2030]);
            r7 = r8 + r5;
            r0 = *0x8f6e0c38;
            r1 = r7;
            r3 = *(r0 + 0x10);
            asm{ stm        sp, {r2, sl} };
            loc_ffffffff8f649350(r0, r1, 0x0, r3 - r7);
            r12 = stack[2032];
    }
    if (s0 != 0x0) {
            r7 = 0x8f6e0c38;
            r1 = r8;
            asm{ stm        sp, {sb, sl} };
            r0 = *r7;
            stack[2032] = r12;
            loc_ffffffff8f649350(r0, r1, 0x0, r5, stack[2030]);
            r0 = *r7;
            r2 = s0 + r6;
            r1 = r8;
            r3 = *(r0 + 0x14);
            asm{ stm        sp, {r3, sl} };
            loc_ffffffff8f649350(r0, r1, r2, r5);
            r12 = stack[2032];
    }
    if (r12 == 0x0) goto loc_8f64e19c;

loc_8f64e088:
    r3 = *0x8f6e0c38;
    r8 = r8 + *(r3 + 0x10) * s0;
    r8 = *r3 + *(r3 + 0x1c) * r8;
    goto loc_8f64e0a0;

loc_8f64e0a0:
    if (r6 == 0x0) goto loc_8f64e28c;

loc_8f64e0a8:
    r7 = r5;
    goto loc_8f64e0ac;

loc_8f64e0ac:
    if (r7 == 0x0) goto loc_8f64e180;

loc_8f64e0b4:
    s0 = *r4;
    s0 = *(r4 + 0x1) | s0 * 0x100;
    if ((s0 & 0x8000) == 0x0) goto loc_8f64e128;

loc_8f64e0c8:
    asm{ ubfx       sb, sb, #0x0, #0xf };
    COND = r3 < 0x0;
    if (COND) {
            r3 = 0x0;
    }
    if (s0 > r7) {
            r3 = r3 | 0x1;
    }
    if (r3 != 0x0) goto loc_8f64e28c;

loc_8f64e0e4:
    r0 = *(r4 + 0x2);
    r7 = r7 - s0;
    r12 = *(r4 + 0x3);
    r1 = r4 + 0x5;
    lr = *(r4 + 0x4);
    r3 = r8;
    r2 = s0;
    do {
            r2 = r2 - 0x1;
            COND = r2 >= 0x0;
            if (COND) {
                    *r3 = r0;
            }
            if (CPU_FLAGS & NS) {
                    r3 = r3 + 0x3;
            }
            if (CPU_FLAGS & NS) {
                    *(r3 + 0xfffffffffffffffe) = r12;
            }
            if (CPU_FLAGS & NS) {
                    *(r3 + 0xffffffffffffffff) = lr;
            }
    } while (CPU_FLAGS & NB);
    r4 = r1;
    r8 = r8 + s0 + s0 * 0x2;
    goto loc_8f64e0ac;

loc_8f64e28c:
    loc_ffffffff8f656968(0x2, "flush surface...\n");
    r0 = *0x8f6e0c38;
    loc_ffffffff8f64942c(r0);
    r0 = loc_ffffffff8f656968(0x2, "flush surface end\n");
    if (*0x8f6e0c3c != 0x0) {
            r0 = loc_ffffffff8f61017c();
    }
    if (stack[2037] == *0x8f7112f4) {
            loc_ffffffff8f64d5d8();
    }
    else {
            loc_ffffffff8f648514();
    }
    return;

loc_8f64e128:
    COND = r3 < 0x0;
    if (COND) {
            r3 = 0x0;
    }
    if (s0 > r7) {
            r3 = r3 | 0x1;
    }
    if (r3 != 0x0) goto loc_8f64e28c;

loc_8f64e140:
    r7 = r7 - s0;
    r3 = *0x8f6e0c38;
    loc_ffffffff8f64ac90(r8, r4 + 0x2, *(r3 + 0x1c) * s0, r3);
    r3 = *0x8f6e0c38;
    r3 = *(r3 + 0x1c);
    r8 = r8 + r3 * s0;
    r4 = r3 * s0 + r4 + 0x2;
    goto loc_8f64e0ac;

loc_8f64e180:
    r3 = *0x8f6e0c38;
    r6 = r6 - 0x1;
    r8 = r8 + *(r3 + 0x1c) * (*(r3 + 0x10) - r5);
    goto loc_8f64e0a0;

loc_8f64e19c:
    r10 = stack[2035] * r5;
    r7 = stack[2033] * stack[2035];
    if (stack[2034] != 0x0) {
            r3 = *0x8f6e0c38;
            r5 = r12;
            r8 = r8 + *(r3 + 0x10) * s0;
            r8 = *r3 + *(r3 + 0x1c) * r8;
            s0 = r10 + 0x3 & !0x3;
            while (r5 != r6) {
                    r0 = r8;
                    r8 = r8 + r7;
                    loc_ffffffff8f64ac90(r0, r4, r10);
                    r4 = r4 + s0;
                    r5 = r5 + 0x1;
            }
    }
    else {
            if (r8 != 0x0) {
                    r3 = *0x8f6e0c38;
                    r5 = stack[2034];
                    r8 = r8 + *(r3 + 0x10) * s0;
                    r8 = *r3 + *(r3 + 0x1c) * r8;
                    while (r5 != r6) {
                            r0 = r8;
                            r8 = r8 + r7;
                            loc_ffffffff8f64ac90(r0, r4, r10);
                            r4 = r4 + r10;
                            r5 = r5 + 0x1;
                    }
            }
            else {
                    r2 = *0x8f6e0c38;
                    r3 = *(r2 + 0x1c);
                    loc_ffffffff8f64ac90(*r2 + s0 * r3 * r5, r4, r3 * r6 * r5, r3);
            }
    }
    goto loc_8f64e28c;

loc_8f64df4c:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "Invalid logo w %d, h %d\n", r5, r6);
    goto loc_8f64e28c;

loc_8f64df88:
    r8 = *0x8f6e0c40;
    r4 = r7;
    r12 = r8;
    goto loc_8f64df94;

loc_8f64e27c:
    loc_ffffffff8f656968(0x0 ^ 0xffffffff, "%s: unsupported feature!\n", "draw_logo_in_landscape");
    goto loc_8f64e28c;

loc_8f64e2e4:
    if (stack[2037] != *0x8f7112f4) {
            loc_ffffffff8f648514();
    }
    return;

